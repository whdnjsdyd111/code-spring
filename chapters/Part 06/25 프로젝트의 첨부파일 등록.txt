            25.1 첨부파일 정보를 위한 준비

첨부파일이 게시물과 합쳐지면 가장 먼저 게시물과 첨부파일 관계를 저장하는 테이블 설계가 우선이다.
게시물 첨부 파일은 각자 고유한 UUID 를 가지고 있어 별도의 PK 를 지정할 필욘 없지만,
게시물 등록 시 첨부파일 데이블 역시 같이 insert 작업이 진행되어야 하므로 트랜잭션 처리가 필요하다.

첨부파일 보관 테이블은 tbl_attach 로 설계 한다.


    CREATE TABLE tbl_attach (
        uuid VARCHAR2(100) not null,
        uploadPath VARCHAR2(200) not null,
        fileName VARCHAR2(100) not null,
        filetype CHAR(1) DEFAULT 'I',
        bno NUMBER(10, 0)
    );

    ALTER TABLE tbl_attach ADD CONSTRAINT pk_attach PRIMARY KEY(uuid);

    ALTER TABLE tbl_attach ADD CONSTRAINT fk_board_attach FOREIGN KEY (bno)
    REFERENCES tbl_board(bno);


첨부파일 보관은 UUID 가 포함된 이름을 pk 로 하고 실제 파일 업로드 경로를 uploadPath,
파일 이름을 fileName, 이미지 파일 여부를 판단하는 fileType, 해당 게시불 번호를 저장하는 bno 컬럼을 이용한다.

SQL 처리기 때문에 파일 정보를 처리하기 위해 파라미터를 여러 개 사용해야 하는 불편함이 있어,
'src/main/java/domain' 패키지에 아에 BoardAttachVO 클래스를 설계하는 것이 유용하다.


    import lombok.Data;

    @Data
    public class BoardAttachVO {
        private String uuid;
        private String uploadPath;
        private String fileName;
        private boolean fileType;

        private Long bno;
    }


기존 BoardVO 는 등록 시 한 번에 BoardAttachVO 를 처리할 수 있도록 List<BoardAttachVO> 를 추가한다.


    @Data
    public class BoardVO {
        private Long bno;
        private String title;
        private String content;
        private String writer;
        private Date regdate;
        private Date updateDate;

        private int replyCnt;

        private List<BoardAttachVO> attachList;
    }


        25.1.1 첨부파일 처리를 위한 Mapper 처리

첨부파일 정보를 데이터베이스로 보관하니 이를 처리할 SQL 을 Mapper 인터페이스와 XML 을 작성하여 처리한다.


    import java.util.List;

    public interface BoardAttachMapper {
        public void insert(BoardAttachVO vo);

        public void delete(String uuid);

        public List<BoardAttachVO> findByBno(Long bno);
    }


BoardAttachMapper 의 경우는 첨부파일의 수정은 존재하지 않아 insert() 와 delete() 작업만을 처리한다.
특정 게시물의 번호로 첨부 파일 찾는 작업이 필요하니 findByBno() 메소드를 정의한다.

Mapper 인터페이스의 SQL 을 처리하는 BoardAttachMapper.xml 을 추가한다.


    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE mapper
            PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/schema/mybatis-3-mapper.dtd">
    <mapper namespace="mapper.BoardAttachMapper">

        <insert id="insert">
            INSERT INTO tbl_attach (uuid, uploadpath, filename, filetype, bno)
            VALUES (#{uuid}, #{uploadPath}, #{fileName}, #{fileType}, ${bno})
        </insert>

        <delete id="delete">
            DELETE FROM tbl_attach WHERE uuid = ${uuid}
        </delete>

        <select id="findByBno" resultType="domain.BoardAttachVO">
            SELECT * FROM tbl_attach WHERE bno = ${bno}
        </select>
    </mapper>


            25.2 등록을 위한 화면 처리

첨부파일 자체의 처리는 Ajax 를 통해서 이루어지므로, 게시물의 등록 시점에서는 현재 서버 업로드된 파일들에
정보 등록할 게시물 정보와 같이 처리한다. 이 작업은 게시물 등록 버튼 클릭 시 현재 서버에 업로드된 파일 정보를
<input type='hidden'> 으로 만들어서 한 번에 전송하는 방식을 사용한다.

게시물 등록 담당은 /board/register.jsp 파일에서 첨부파일을 추가할 수 있도록 수정하는 작업부터 시작한다.

기존 게시물 제목이나 내용을 입력하는 부분 아래쪽에 새로운 <div> 를 추가한다.


    <div class="row">
        <div class="col-lg-12">
            <div class="card">

                <div class="card-header">File Attach</div>
                <div class="card-body">
                    <div class="form-group uploadDiv">
                        <input type="file" name="uploadFile" multiple>
                    </div>

                    <div class="uploadResult">
                        <ul>

                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>


추가된 <div> 엔 이전에 사용한 <div class='uploadResult'> 등으로 파일 업로드한 결과를 처리하게 한다.

업로드를 위해 uploadAjax.jsp 의 CSS 부분을 register.jsp 내에도 추가한다.


        25.2.1 JavaScript 처리

복잡한 부분은 파일 선택이나 'Submit Button' 클릭했을 때의 JavaScript 처리이다.
먼저 'Submit Button' 클랙 시 첨부파일 관련 처리를 할 수 있도록 기본 동작을 막는 작업부터 시작한다.


    <script>
        $(document).ready(function(e) {
            var formObj = $("form[role='form']");

            $("button[type='submit']").on("click", function(e) {
                e.preventDefault();

                console.log("submit clicked");
            })
        });
    </script>


파일 업로드는 별도의 업로드 버튼을 두지 않고, <input type='file'> 내용 변경되는 것을 감지하여 처리하도록 한다.
$(document).ready() 내에 파일 업로드 시 필요한 코드를 추가한다.


    <script>
        $(document).ready(function(e) {
            var formObj = $("form[role='form']");

            $("button[type='submit']").on("click", function(e) {
                e.preventDefault();

                console.log("submit clicked");
            });

            var regex = new RegExp("(.*?)\.(exe|sh|zip|alz)$");

            var maxSize = 5242880;  // 5MB

            function checkExtension(fileName, fileSize) {
                if(fileSize >= maxSize) {
                    alert("파일 사이즈 초과");
                    return false;
                }

                if(regex.test(fileName)) {
                    alert("해당 종류의 파일은 업로드할 수 없습니다.");
                    return false;
                }

                return true;
            }

            $("input[type='file']").change(function(e) {
                var formData = new FormData();

                var inputFile = $("input[name='uploadFile']");

                var files = inputFile[0].files;

                for(let i = 0; i < files.length; i++) {
                    if(!checkExtension(files[i].name, files[i].size)) {
                        return false;
                    }
                    formData.append("uploadFile", files[i]);
                }

                $.ajax({
                    url: '/uploadAjaxAction',
                    processData: false,
                    contentType: false,
                    data: formData,
                    type: 'POST',
                    dataType: 'json',
                    success: function(result) {
                        console.log(result);
                        // showUploadResult(result);    업로드 결과 처리 함수
                    }
                });
            });

        });
    </script>


첨부된 파일 처리는 기존과 동일하며 아직 섬네일이나 파일 아이콘 부분은 처리하지 않았다.
브라우저에 업로드가 정상 처리되는지 만 확인한다.

업로드 결과를 화면 섬네일을 만들어 처리하는 부분은 별도의 showUploadResult() 함수를 제작하고 결과를 반영한다.


    function showUploadResult(uploadResultArr) {

        if(uploadResultArr || uploadResultArr.length == 0) return;

        var uploadUL = $('.uploadResult ul');

        var str = "";

        $(uploadResultArr).each(function(i, obj) {
            if(!obj.image) {
                ...
            } else {
                ...
            }
        });

        uploadUL.append(str);
    }


    $.ajax({
        url: '/uploadAjaxAction',
        processData: false,
        contentType: false,
        data: formData,
        type: 'POST',
        dataType: 'json',
        success: function(result) {
            console.log(result);
            showUploadResult(result); //    업로드 결과 처리 함수
        }
    });


이미지 파일일 경우 일반 파일의 경우 보여진 화면 내용은 showUploadResult() 내에 아래와 같은 HTML 태그들을 이용하여 작성한다.


    // image type
    if(obj.image) {
        var fileCallPath = encodeURIComponent(obj.uploadPath + "/s_" + obj.uuid + "_" + obj.fileName);

        str += "<li><div><span>" + obj.fileName + "</span>" +
            "<button type='button' class='btn btn-warning btn-circle'><i class='fa fa-times'></i></button><br>" +
            "<img src='/display?fileName=" + fileCallPath + "'></div></li>"
    } else {
        // str += "<li>" + obj.fileName + "</li>";
        var fileCallPath = encodeURIComponent(obj.uploadPath + "/" + obj.uuid + "_" + obj.fileName);

        var fileLink = fileCallPath.replace(new RegExp(/\\/g), "/");

        str += "<li><div><span>" + obj.fileName + "</span>" +
            "<button type='button' class='btn btn-warning btn-circle'><i class='fa fa-times'></i></button><br>" +
            "<img src='${pageContext.request.contextPath}/resources/img/attach.png'></a>" +
            "</div></li>";
    }


        25.2.2 첨부파일 변경 처리

첨부파일 변경은 사실 업로드된 파일 삭제이니 'x' 모양 아이콘을 클릭 시 이루어지는 이벤트를 처리한다.


    $('.uploadResult').on("click", "button", function(e) {
        console.log("delete file");
    });


업로드된 파일의 'x' 아이콘을 누르면 콘솔창에 'delete file' 이 나타난다.

삭제를 위해 업로드된 파일 경로와 UUID 가 포함된 파일 이름이 필요하니 앞서 작성된 부분을 수정한다.
<button> 태그에 'data-file' 과 'data-type' 정보를 추가한다.


    // image type
    if(obj.image) {
        var fileCallPath = encodeURIComponent(obj.uploadPath + "/s_" + obj.uuid + "_" + obj.fileName);

        str += "<li><div><span>" + obj.fileName + "</span>" +
            "<button type='button' data-file=\'" + fileCallPath + "\' data-type='image'" +
            " class='btn btn-warning btn-circle'><i class='fa fa-times'></i></button><br>" +
            "<img src='/display?fileName=" + fileCallPath + "'></div></li>"
    } else {
        // str += "<li>" + obj.fileName + "</li>";
        var fileCallPath = encodeURIComponent(obj.uploadPath + "/" + obj.uuid + "_" + obj.fileName);

        var fileLink = fileCallPath.replace(new RegExp(/\\/g), "/");

        str += "<li><div><span>" + obj.fileName + "</span>" +
            "<button type='button' data-file=\'" + fileCallPath + "\' data-type='file'" +
            "class='btn btn-warning btn-circle'><i class='fa fa-times'></i></button><br>" +
            "<img src='${pageContext.request.contextPath}/resources/img/attach.png'></a>" +
            "</div></li>";
    }


'x' 아이콘을 클릭하면 서버에서 삭제하도록 이벤트 처리한다.


    $('.uploadResult').on("click", "button", function(e) {
        console.log("delete file");

        var targetFile = $(this).data('file');
        var type = $(this).data("type");
        var targetLi = $(this).closest("li");

        $.ajax({
            url: '/deleteFile',
            data: {fileName: targetFile, type: type},
            dataType: 'text',
            type: 'POST',
            success: function(result) {
                alert(result);
                targetLi.remove();
            }
        });
    });


        25.2.3 게시물 등록과 첨부파일 데이터베이스 처리

게시물 등록 과정에 첨부파일 상세 조회는 의미없고, 단순히 새 첨부파일을 추가하거나 삭제하여 자신이 원하는 파일을
게시물 등록 시 같이 포함하도록 한다. Ajax 를 이용할 경우 이미 어떤 파일을 첨부로 처리할 지는 이미 완료된 상태로 하므로
관련 남은 작업은 게시물 등록 시 첨부파일과 관련 자료를 같이 전송하고, 이를 데이터베이스에 등록하는 것이다.
게시물 등록은 <form> 태그를 통해 이루어지니 이미 업로드된 정보는 별도의 <input type='hidden'> 태그를 생성하여 처리한다.

이를 위해 첨부파일 정보를 태그로 생성할 시 첨부파일과 관련된 정보를 추가한다.


    // image type
    if(obj.image) {
        var fileCallPath = encodeURIComponent(obj.uploadPath + "/s_" + obj.uuid + "_" + obj.fileName);

        str += "<li data-path='" + obj.uploadPath + "'" +
            "data-uuid='" + obj.uuid + "' data-filename='" + obj.fileName +
            "' data-type='" + obj.image + "'>" +
            "<div><span>" + obj.fileName + "</span>" +
            "<button type='button' data-file=\'" + fileCallPath + "\' data-type='image'" +
            " class='btn btn-warning btn-circle'><i class='fa fa-times'></i></button><br>" +
            "<img src='/display?fileName=" + fileCallPath + "'></div></li>"
    } else {
        // str += "<li>" + obj.fileName + "</li>";
        var fileCallPath = encodeURIComponent(obj.uploadPath + "/" + obj.uuid + "_" + obj.fileName);

        var fileLink = fileCallPath.replace(new RegExp(/\\/g), "/");

        str += "<li data-path='" + obj.uploadPath + "'" +
            "data-uuid='" + obj.uuid + "' data-filename='" + obj.fileName +
            "' data-type='" + obj.image + "'>" +
            "<div><span>" + obj.fileName + "</span>" +
            "<button type='button' data-file=\'" + fileCallPath + "\' data-type='file'" +
            "class='btn btn-warning btn-circle'><i class='fa fa-times'></i></button><br>" +
            "<img src='${pageContext.request.contextPath}/resources/img/attach.png'></a>" +
            "</div></li>";
    }


<input type='hidden'> 으로 처리된 첨부파일의 정보는 BoardVO 로 수집된다.

BoardVO 엔 attachList 란 이름의 변수로 첨부파일 정보를 수집하여 <input type='hidden'> 의 name 은
'attachList[인덱스 번호]' 와 같은 이름을 사용하도록 한다.

JSP 화면에 JavaScript 로 기존 <form> 태그를 전송하는 부분을 수정한다.


    $("button[type='submit']").on("click", function(e) {
        e.preventDefault();

        console.log("submit clicked");

        var str = "";

        $('.uploadResult ul li').each(function(i, obj) {
            var jobj = $(obj);

            console.log(jobj);

            str += "<input type='hidden' name='attachList[" + i + "].fileName' value='" + jobj.data("filename") +"'>"
                + "<input type='hidden' name='attachList[" + i + "].uuid' value='" + jobj.data("uuid") +"'>"
                + "<input type='hidden' name='attachList[" + i + "].uploadPath' value='" + jobj.data("path") +"'>"
                + "<input type='hidden' name='attachList[" + i + "].fileType' value='" + jobj.data("type") +"'>"
        });

        formObj.append(str).submit();
    });


브라우저에 게시물 등록을 선택하면 이미 업로드된 항목들을 내부적으로 <input type='hidden'> 태그들로
만들어서 <form> 태그가 submit 될 때 같이 전송되도록 한다.


            25.3 BoardController, BoardService 의 처리

파라미터 수집하는 BoardController 는 별도 처리 없이 전송된 데이터가 제대로 수집되는지 먼저 확인한다.


    @PostMapping("/register")
    public String register(BoardVO board, RedirectAttributes rttr) {
        log.info("====================");
        log.info("register: " + board);

        if(board.getAttachList() != null) {
            board.getAttachList().forEach(attach -> log.info(attach.toString()));
        }

        log.info("====================");

        // service.register(board);

        // rttr.addFlashAttribute("result", board.getBno());

        return "redirect:/board/list";
    }


BoardController 의 register() 는 BoardService 호출 전 log 로 확인하는 작업이 먼저다.
브라우저에서 첨부파일을 추가하고 게시물 등록하면 서버에선 로그들이 출력되는 것을 볼 수 있다.
이때 첨부파일이 이미지인지 여부에 따라 fileType 등이 제대로 처리되는지 확인한다.


        25.3.1 BoardServiceImpl 처리

BoardMapper 와 BoardAttachMapper 는 이미 작성해 두어 남은 작업은 BoardServiceImpl 에서 두 개의 Mapper 인터페이스 타입을
주입하고, 이를 호출하는 일이다. 2 개의 Mapper 를 주입받아야 하므로 자동주입 대신 Setter 메소드를 이용한다.


    @Setter(onMethod_ = @Autowired)
    private BoardMapper mapper;

    @Setter(onMethod_ = @Autowired)
    private BoardAttachMapper attachMapper;


게시물 등록 작업은 tbl_board 테이블과 tbl_attach 테이블 양쪽 모두 insert 가 진행되어야 하기 때문에 트랜잭션 처리가 필요하다.
일반적으로 오라클 시퀀스로 nextval 과 currval 를 이용하여 처리하겠지만, 예제는 이미 MyBatis 의 selectKey 를 이용하여
별도의 currval 을 매번 호출할 필요는 없다.


    @Transactional
    @Override
    public void register(BoardVO board) {
        log.info("register ..." + board);

        mapper.insertSelectKey(board);

        if(board.getAttachList() == null || board.getAttachList().size() <= 0) {
            return;
        }

        board.getAttachList().forEach(attach -> {
            attach.setBno(board.getBno());
            attachMapper.insert(attach);
        });
    }


BoardServiceImpl 의 register() 는 트랜잭션 하에 tbl_board 에 먼저 게시물 등록하고, 각 첨부파일은 생성된 게시물 번호를 세팅한 후
tbl_attach 테이블에 데이터를 추가한다. MyBatis 쪽에 문제가 없을 시 데이터베이스의 tbl_attach 테이블에 첨부파일이
여러 개 등록되었을 때 데이터베이스에 등록되는 것을 확인할 수 있다.
