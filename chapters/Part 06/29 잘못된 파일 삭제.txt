Ajax 로 첨부파일 사용 시 사용자가 게시물 등록 또는 수정 전 이미 업로드한 파일들을 볼 수 있는 장점이 있지만,
다음 문제가 남긴다.


    - 첨부파일만 등록하고 게시물 등록하지 않을 때의 문제 - 파일은 이미 서버에 업로드되었지만, 등록하지 않았으니 의미없는 업로드
    - 게시물 수정 시 파일을 삭제했지만 실제 폴더에 기존 파일은 삭제되지 않는 문제 - 데이터베이스는 삭제되었지만 실제 폴더엔 남는 문제


공통적으로 사용자가 Ajax 로 어느 작업을 한 후 비정상적으로 브라우저를 종료하거나 페이지를 빠져나가는 문제이다.
이 문제를 해결할 핵심은 정상적으로 사용자의 게시물에 첨부된 파일인지 아니면 사용자가 게시물 수정 시에 업로드한
최종적인 사용되는 파일인지 아닌지를 파악해야 한다.


            29.1 잘못 업로드된 파일의 정리

게시물에 필요한 모든 파일의 정보는 최종적으로 데이터베이스에 기록되어 있다.
사용자가 게시물 등록이나 수정 시에 첨부파일을 등록했지만, 최종적으로 submit 하지 않은 경우 폴더에 업로드되지만,
데이터베이스엔 아무 변화가 없다.

정상적으로 첨부파일이 게시물에 사용되면 데이터베이스의 tbl_attach 테이블에 기록되었을 것이므로
데이터베이스와 비교하는 작업을 거쳐 업로드만 된 파일 목록을 찾아야 한다.

파일 목록을 찾을 때엔 반드시 오늘 날짜가 아닌 파일들을 대상으로 해야만 한다.
오늘 날짜를 대상으로 한 경우 지금 게시물을 작성하거나 수정하기 위해 업로드하고 있는 파일들을 삭제할 가능성이 있기 때문이다.
이 작업은 주기적으로 동작해야 하므로 스케줄링할 수 있는 Spring-Batch 나 Quartz 라이브러리를 이용한다.


            29.2 Quartz 라이브러리 설정

Quartz 라이브러리는 일반적으로 스케줄러를 구성하기 위해 사용한다.
서버를 운영하기 위해 주기적으로 매일, 매주, 매월 등 주기적으로 특정한 프로그램을 실행할 필요가 있다.
이 작업은 운영체제 기능을 이용하여 작업할 수도 있지만, 스프링과 Quartz 라이브러리로 간단히 처리할 수 있다.
(Spring-Batch 는 많은 양의 데이터를 주기적으로 읽고 쓰는 작업에 유용하여 설정이 복잡하다.)

Quartz 기능을 활용하기 위해 pom.xml 에 라이브러리를 추가한다.


    <!-- 스케줄러 -->
    <dependency>
        <groupId>org.quartz-scheduler</groupId>
        <artifactId>quartz</artifactId>
        <version>2.3.2</version>
    </dependency>
    <dependency>
        <groupId>org.quartz-scheduler</groupId>
        <artifactId>quartz-jobs</artifactId>
        <version>2.3.2</version>
    </dependency>


Quartz 설정은 XML 어노테이션을 활용할 수 있다. 어노테이션으로 이용하기 위해 root-context.xml 일부를 수정한다.


	<!-- Scheduler -->
	<task:annotation-driven />


        29.2.1 Java 설저 이용할 경우

어노테이션을 이용하는 스케줄러 설정은 @EnableScheduling 설정으로 이루어진다.
RootConfig 클래스 파일에 어노테이션을 추가한다.


    @Configuration
    @ComponentScan(basePackages = {"sample", "service", "aop"})
    @EnableAspectJAutoProxy
    @EnableTransactionManagement
    @EnableScheduling
    @MapperScan(basePackages = {"mapper"})
    public class RootConfig {
        ...
    }


        29.2.2 Task 작업의 처리

실제 작업의 로직은 별도로 'src/main/java/task' 패키지에 FileCheckTask 란 클래스를 작성하여 처리한다.


    @Log
    @Component
    public class FileCheckTask {
        @Scheduled(cron = "0 * * * * *")
        public void checkFiles() throws Exception {
            log.warning("File Check Task run ...");

            log.warning("====================");
        }
    }


FileCheckTask 엔 @Component 어노테이션과 @Scheduled 어노테이션이 사용되었다.
@Scheduled 어노테이션엔 cron 이란 속성을 부여하여 주기를 제어한다. 로그가 정상 기록되는지 확인을 위해
log.warn() 레벨을 이용하여 실행 중에 확인할 수 있도록 한다.

우선 FileCheckTask 가 정상 동작하는지 확인을 위해 root-context.xml 에 FileCheckTask 을 빈으로 설정한다.


	<!-- Scheduler -->
	<context:component-scan base-package="task" />
	<task:annotation-driven />


예제의 cron 설정은 매분 0초마다 한 번식 실행되도록 지정되어 서버 실행해 두고 1분 마다 로그가 기록되는지 확인한다.


            29.3 BoardAttachMapper 수정

FileCheckTask 가 정상적으로 동작하는지 확인한 후 데이터베이스에서 등록된 모든 파일의 목록이 필요하니,
BoardAttachMapper 의 목록을 가져오는 메소드를 추가한다.


    public List<BoardAttachVO> getOldFiles();


BoardAttachMapper.xml 파일에 아래 쿼리를 추가한다. sysdate 에서 1을 빼 어제 날짜를 처리한다.


    <select id="getOldFiles" resultType="domain.BoardAttachVO">
        SELECT * FROM tbl_attach WHERE uploadpath = TO_CHAR(sysdate - 1, 'yyyy\mm\dd')
    </select>


            29.4 cron 설정과 삭제 처리

Cron 은 원래 유닉스 계열에서 사용된 스케줄러 프로그램 이름이지만, 워낙 많이 사용되어 각종 언어나 기술에 맞는 라이브러리 형태로
많이 사용된다. 작성된 FileCheckTask 내에서는 @Scheduled(cron = "0 * * * * *") 과 같이 표현식이 사용되었지만,
이때 의미는 '매분 0초가 될 때마다 실행한다' 로 해석할 수 있다.


    0   *   *   *   *   *   (*)
    s   m   h   d   M   w   y

    * 모든 수
    ? 제외
    - 기간
    , 특정 시간
    / 시작 시간과 반복 시간
    L 마지막
    W 가까운 평일


        29.4.1 파일 목록 처리

작업 순서는 데이터베이스에 사용된 파일 목록을 얻어오고, 해당 폴더의 파일 목록에서 데이터베이스에 없는 파일을 찾아낸다.
이후 데이터베이스에 없는 파일들을 삭제하는 순서로 구성한다.


    @Log
    @Component
    public class FileCheckTask {
        @Setter(onMethod_ = @Autowired)
        private BoardAttachMapper attachMapper;

        private String getFolderYesterDay() {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            Calendar cal = Calendar.getInstance();

            cal.add(Calendar.DATE, -1);

            String str = sdf.format(cal.getTime());

            return str.replace("-", File.separator);
        }

        @Scheduled(cron = "0 0 2 * * *")
        public void checkFiles() throws Exception {
            log.warning("File Check Task run ...");
            log.warning(new Date().toString());

            // file list in database
            List<BoardAttachVO> fileList = attachMapper.getOldFiles();

            // ready for check file in directory with database file list
            List<Path> fileListPaths = fileList.stream()
                    .map(vo -> Paths.get("C:\\upload", vo.getUploadPath(),
                            vo.getUuid() + "_" + vo.getFileName()))
                    .collect(Collectors.toList());

            // image file has thumbnail file
            fileList.stream().filter(vo -> vo.isFileType() == true)
                    .map(vo -> Paths.get("C:\\upload", vo.getUploadPath(), "s_" +
                            vo.getUuid() + "_" + vo.getFileName()))
                    .forEach(p -> fileListPaths.add(p));

            log.warning("====================");

            fileListPaths.forEach(p -> log.warning(p.toString()));

            // file in yesterday directory
            File targetDir = Paths.get("C:\\upload", getFolderYesterDay()).toFile();

            File[] removeFiles = targetDir.listFiles(file -> fileListPaths.contains(file.toPath()) == false);

            log.warning("====================");
            for(File file : removeFiles) {
                log.warning(file.getAbsolutePath());
                file.delete();
            }
        }
    }


FileCheckTask 의 checkFiles() 는 매일 새벽 2시에 동작한다.
먼저 attachMapper 를 이용하여 어제 날짜로 보관된 모든 첨부파일의 목록을 가져온다.
데이터베이스에서 가져온 파일 목록은 BoardAttachVO 타입 객체로, 나중에 비교를 위해 Paths 목록으로 변환한다.
이때 이미지 파일의 경우 섬네일 파일도 목록에 필요하니 별도로 처리하여 해당 일의 예상 파일 목록을 완성한다.
코드에선 fileListPaths 이름으로 처리한다.

데이터베이스에 있는 파일들의 준비가 끝나면 실제 폴더에 있는 파일들의 목록에서 데이터베이스에 없는 파일들을 찾아 목록으로 준비한다.
이 결과 removeFiles 변수에 담아 처리한다. 최종적으론 삭제 대상이되는 파일들을 삭제한다.