게시물 삭제 시 첨부파일 역시 같이 삭제되어야 한다. 단순 데이터베이스 상 삭제가 아닌 실제 폴더 내 파일도 같이 삭제할 필요가 있어서
작업의 순서 역시 신경써야 한다. 폴더 삭제는 위험한 작업이라 뒤쪽으로 미루며 데이터베이스 삭제 작업 처리 후 파일을 삭제한다.


            27.1 첨부파일 삭제 처리

첨부파일과 관련된 SQL 은 BoardAttachMapper 인터페이스와 XML 파일에 작성되어 있어 이를 먼저 처리한다.


    public void deleteAll(Long bno);


실제 SQL 은 XML 매퍼에 작성한다.


    <delete id="deleteAll">
        DELETE FROM tbl_attach WHERE bno = #{bno}
    </delete>


        27.1.1 BoardServiceImpl 의 변경

BoardServiceImpl 은 첨부파일 삭제와 실제 게시물의 삭제가 같이 처리되도록 트랜잭션 하에
BoardAttachMapper 의 deleteAll() 을 호출하도록 수정한다.


    @Transactional
    @Override
    public boolean remove(Long bno) {
        log.info("remove ......" + bno);

        attachMapper.deleteAll(bno);

        return mapper.delete(bno) == 1;
    }


        27.1.2 BoardController 파일 삭제

BoardController 는 데이터베이스 삭제 호출 후 파일을 삭제 해야 한다. 다만 파일 삭제를 위해ㅑ 해당 게시물의
첨부파일 목록이 필요하다.

문제는 첨부파일 목록을 구해도 이미지 파일의 경우 섬네일 파일이 생성되어 있으니 이에 대한 처리가 같이 필요하다.
따라서 작업 순서를 정리하면 다음과 같다.


    - 해당 게시물 첨부파일 정보 미리 준비
    - 데이터베이스 상에 해당 게시물과 첨부파일 데이터 삭제
    - 첨부파일 목록을 이용하여 폴더에서 섬네일이미지(이미지파일 일때)와 일반 파일 삭제


    Criteria 수정

게시물의 삭제 후 페이지 번호나 검색 조건을 유지하며 이동하기 위해 'redirect' 에 필요한 파라미터들을
매번 추가해야 하는 불편함이 있다. 이를 Criteria 에서 처리할 수 있게 수정한다.


    public String getListLink() {
        UriComponentsBuilder builder = UriComponentsBuilder.fromPath("")
                .queryParam("pageNum", this.pageNum)
                .queryParam("amount", this.getAmount())
                .queryParam("type", this.getType())
                .queryParam("keyword", this.getKeyword());

        return builder.toUriString();
    }


UriComponentsBuilder 는 브라우저에 GET 방식의 파라미터 전송에 사용될 문자열을 쉽게 처리할 수 있는 클래스다.


    파일 삭제 처리

파일 삭제는 BoardController 에 deleteFiles() 란 메소드를 추가하여 처리하도록 한다.
deleteFiles() 는 java.nio.file 클래스의 Path 를 이용하여 처리한다.


    private void deleteFiles(List<BoardAttachVO> attachList) {
        if(attachList == null || attachList.size() == 0) {
            return;
        }

        log.info("delete attach files.....");
        log.info(attachList.toString());

        attachList.forEach(attach -> {
            try {
                Path file = Paths.get("C:\\upload\\" + attach.getUploadPath() + "\\" + attach.getUuid()
                        + "_" + attach.getFileName());

                Files.deleteIfExists(file);

                if(Files.probeContentType(file).startsWith("image")) {
                    Path thumbNail = Paths.get("C:\\upload\\" + attach.getUploadPath() + "\\s_"
                            + attach.getUuid() + "_" + attach.getFileName());

                    Files.delete(thumbNail);
                }
            } catch (Exception e) {
                log.info(e.getMessage());
            }
        });
    }


    @PostMapping("/remove")
    public String remove(@RequestParam("bno") Long bno, @ModelAttribute("cri") Criteria cri, RedirectAttributes rttr) {
        log.info("remove ... " + bno);

        List<BoardAttachVO> attachList = service.getAttachList(bno);

        if(service.remove(bno)) {
            // delete Attach Files
            deleteFiles(attachList);

            rttr.addFlashAttribute("result", "success");
        }
        return "redirect:/board/list" + cri.getListLink();
    }


BoardController 의 remove() 는 삭제 전 해당 게시물의 첨부파일 목록을 확보한다.
이후 데이터베이스에 게시물과 첨부파일 데이터를 삭제한다. 만일 삭제에 성공하면 실제 파일의 삭제를 시도한다.

실제 파일 삭제 작업은 원본 파일 삭제 후 이미지는 섬네일파일을 추가로 삭제한다.
삭제 화면은 별다른 처리 없이 기존 게시물 수정/삭제 화면에 동일하게 테스트할 수 있다.