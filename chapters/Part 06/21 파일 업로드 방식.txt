첨푸파일을 서버에 전송하는 방식은 크게 <form> 태그나 Ajax 를 이용한 방식이 있다.

    - <form> 태그를 이용한 방식 : 브라우저의 제한이 없는 경우
        - 일반적으로 페이지 이동과 동시에 첨부파일 업로드
        - <iframe> 를 이용하여 화면 이동 없이 첨부파일을 처리

    - Ajax 를 이용한 방식 : 첨부파일을 별도로 처리
        - <input type='file'> 을 이용하여 Ajax 처리
        - HTML5 의 Drag And Drop 기능이나 jQuery 라이브러리로 처리


응답을 HTML 코드로 할지 JSON 등으로 처리할지만 구분하면 된다. 예제에선 Ajax 위주로 처리한다.

서버에서 주의할 점은 첨부파일의 처리를 어느 종류의 라이브러리나 API 등을 활용 것인지다.
크게 다음과 같은 API 들을 활용한다.


    - cos.jar : 2002년 이후부터 개발 종료되었으며, 더 이상 권장하자 않음
    - commons-fileupload : 가장 일반적으로 활용
    - 서블릿 3.0 이상 : 자체적인 파일 업로드 처리가 API 상에 지원


일반적으로 commons-fileupload 를 이용하지만 톰캣 7.0 이후의 서블릿 3.0 부터는 자체적으로 지원하니 이를 활용할 것이다.
C 드라이브의 upload 폴더와 임시 업로드 파일을 저장할 temp 폴더를 생성한다.


            21.1 스프링의 첨부파일을 위한 설정


        21.1.1 web.xml 을 이용한 경우의 첨부파일 설정

프로젝트을 web.xml 을 이용할 경우 첨부파일 처리에 대한 설정 역시 web.xml 을 이용한다.
서블릿 버전이 2.5 버전이므로 이를 3.1 버전으로 수정한다.


    <web-app
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
            id="WebApp_ID" version="3.1">


web.xml 의 <servlet> 태그 내에 <multipart-config> 태그를 추가한다.


    <multipart-config>
        <location>C:\\upload\\temp</location>
        <max-file-size>20971520</max-file-size>	<!-- 20MB -->
        <max-request-size>41943040</max-request-size> <!-- 40MB -->
        <file-size-threshold>20971520</file-size-threshold> <!-- 20MB -->
    </multipart-config>


<multipart-config> 의 설정은 특정 사이즈 메모리 사용(file-size-threshold), 업로드 파일을 저장할 공간(location)과
업로드되는 파일 최대 크기(max-file-size)와 한번에 올릴 수 있는 최대 크기(max-request-size)를 지정할 수 있다.

web.xml 의 설정은 WAS(Tomcat) 자체의 설정일 뿐이며, 스프링 업로드 처리는 MultipartResolver 란 타입의 객체 빈을 등록해야
가능하다. Web 관련 설정은 servlet-context.xml 을 이용하여 설정한다.


	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.support.
			StandardServletMultipartResolver" />


첨부된 파일을 처리하는 빈을 설정할 때는 id 는 'multipartResolver' 란 이름으로 지정된 이름을 사용한다.


        21.1.2 Java 설정을 이용할 경우

    WebConfig 수정

파일 업로드를 위한 MultipartConfig 설정을 추가한다.
xml 에선 <multipart-config> 태그를, WebConfig 클래스에선 javax.servlet.MultipartConfigElement 란 클래스를 이용한다.


    @Override
    protected void customizeRegistration(ServletRegistration.Dynamic registration) {
        registration.setInitParameter("throwExceptionIfNoHandlerFound", "true");

        MultipartConfigElement multipartConfig = new MultipartConfigElement("C:\\upload\\temp",
                20971520, 41943040, 20971520);
        registration.setMultipartConfig(multipartConfig);
    }


    ServletConfig 수정

servlet-context.xml 을 대신하는 ServletConfig 클래스 파일은 MultipartResolver 를 아래와 같이 스프링의 빈으로 추가해야 한다.


    @Bean
    public MultipartResolver multipartResolver() {
        StandardServletMultipartResolver resolver = new StandardServletMultipartResolver();
        return resolver;
    }


            21.2 <form> 방식의 파일 업로드

서버상에 첨부파일의 처리는 컨트롤러에서 이루어지니 UploadController 를 작성한다.
GET 방식으로 첨부파일을 업로드할 수 있는 화면을 처리하는 메소드와 POST 방식으로 첨부파일 업로드를 처리하는 메소드를 추가한다.


    @Controller
    @Log
    public class UploadController {
        @GetMapping("/uploadForm")
        public void uploadForm() {
            log.info("upload form");
        }
    }


UploadController 에는 클래스 선언부에 @RequestMapping 이 적용되지 않으므로, WEB-INF/views 폴더에 uploadForm.jsp 를 추가한다.


    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html charset=UTF-8">
        <title>Title</title>
    </head>
    <body>
        <form action="uploadFormAction" method="post" enctype="multipart/form-data">
            <input type="file" name="uploadFile" multiple>
            <button>Submit</button>
        </form>
    </body>
    </html>


uploadForm.jsp 는 간단히 <form> 만 생성하고 <input type='file'> 을 추가한다.
실제 전송은 uploadFormAction 경로로 처리하며 파일 업로드에 신경써야하는 부분은 enctype 속성값을 'multipart/form-data' 로
지정하는 것이다. 'multiple' 속성은 여러 파일을 업로드할 수 있다.


        21.1.2.1 MultipartFile 타입

스프링 MVC 엔 MultipartFile 타입을 제공하여 업로드되는 파일 데이터를 쉽게 처리할 수 있다.
위 <input type='file' name='uploadFile'> 의 name 속성을 변수로 지정하여 처리한다.


    @PostMapping("/uploadFormAction")
    public void uploadFormPost(MultipartFile[] uploadFile, Model model) {
        for(MultipartFile multipartFile : uploadFile) {
            log.info("--------------------");
            log.info("Upload File Name: " + multipartFile.getOriginalFilename());
            log.info("Upload File Size: " + multipartFile.getSize());
        }
    }


파일 처리는 스프링의 MultipartFile 이란 타입을 이용한다. 화면에서 여러 파일을 선택할 수 있으니 배열 타입으로 지정하고
업로드를 해보자.


    controller.UploadController.uploadFormPost --------------------
    controller.UploadController.uploadFormPost Upload File Name: newskin.hskin
    controller.UploadController.uploadFormPost Upload File Size: 229834
    controller.UploadController.uploadFormPost --------------------
    controller.UploadController.uploadFormPost Upload File Name: 죤나맨.hskin
    controller.UploadController.uploadFormPost Upload File Size: 76342


UploadController 에 정상적으로 파일 데이터가 감지된 것을 확인할 수 있다.
IE 경우 getOriginalFilename() 의 결과가 조금 다른데 파일 이름이 나오지 않고 전체 경로가 출력된다.

IE 꺼ㅏ지 같이 처리하려면 마지막 경로까지 잘라낸 문자만 취해야 하는데, 이 처리는 Ajax 처리 때 알아본다.

MultipartFile 은 다음 메소드들을 가지고 있다.


    String getName()    :   파라미터 이름 태그의 이름
    String getOriginalFilename()    :   업로드되는 파일의 이름
    boolean isEmpty()   :   파일이 존재하지 않는 경우 true
    long getSize()  :   업로드되는 파일 크기
    byte[] getBytes()   :   byte[] 로 파일 데이터 반환
    InputStream getInputStream()    :   파일데이터와 연결된 InputStream 을 반환
    transferTo(File file)   :   파일의 저장


    파일 저장

업로드되는 파일을 저장하는 방법은 간단히 transferTo() 를 이용하여 처리할 수 있다.


    @PostMapping("/uploadFormAction")
    public void uploadFormPost(MultipartFile[] uploadFile, Model model) {

        String uploadFolder = "C:\\upload";

        for(MultipartFile multipartFile : uploadFile) {
            log.info("--------------------");
            log.info("Upload File Name: " + multipartFile.getOriginalFilename());
            log.info("Upload File Size: " + multipartFile.getSize());

            File saveFile = new File(uploadFolder, multipartFile.getOriginalFilename());

            try {
                multipartFile.transferTo(saveFile);
            } catch (Exception e) {
                log.info(e.getMessage());
            }
        }
    }


transferTo() 파라미터로는 java.io.File 객체를 지정하면 되기 때문에 업로드되는 원래 파일 이름으로
C 드라이브 upload 폴더에 원래 이름으로 저장한다.


            21.3 Ajax 를 이용한 파일 업로드

이번엔 Ajax 로 파일 데이터만 전송하는 방식이다. 첨부파일 처리는 FormData 란 객체로 IE 의 경우
10 버전 이후만 지원되는 제약이 있을 수도 있다.

UploadController 에 GET 방식으로 첨부 파일을 업로드하는 페이지를 제작한다.


    @GetMapping("/uploadAjax")
    public void uploadAjax() {
        log.info("upload ajax");
    }


WEB-INF/views 폴더에 uploadAjax.jsp 페이지를 작성한다.


    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html charset=UTF-8">
        <title>Title</title>
    </head>
    <body>
    <h1>Upload with Ajax</h1>

    <div class="uploadDiv">
        <input type="file" name="uploadFile" multiple>
    </div>

    <button id="uploadBtn">Upload</button>
    </body>
    </html>


uploadAjax.jsp 는 순수 JavaScript 로 처리할 수 있지만 jQuery 를 이용한 것이 편하다.
uploadAjax.jsp 내에 jQuery 라이브러리 경로를 추가한다.


    <script src="${pageContext.request.contextPath}/resources/vendor/jquery/jquery.min.js"></script>
    <script>
        $(document).ready(function() {
            $('#uploadBtn').on("click", function(e) {
                var formData = new FormData();

                var inputFile = $("input[name='uploadFile']");

                var files = inputFile[0].files;

                console.log(files);
            })
        })
    </script>


jQuery 로 이용할 시 파일 업로드는 FormData 란 객체로 이용한다(브라우저 제약 조심).
FormData 는 쉽게 말해 가상의 <form> 태그와 같다 생각하면 되고 Ajax 를 이용한 파일 업로드는 FormData 로 필요한 파라미터를 담아
전송하는 방식이다.

본격적으로 첨부 파일 데이터 전송 전에 여러 파일을 선택할 시 jQuery 로 파일 데이터를 처리가 가능한 브라우전지 확인한다.


        21.3.1 jQuery 를 이용한 첨부파일 전송

Ajax 이용한 경우 중요한 FormData 타입의 객체에 각 파일 데이터를 추가하는 것과 이를 Ajax 로 전송할 때 약간의 옵션이 붙어야 하는 점이다.


    <script>
        $(document).ready(function() {
            $('#uploadBtn').on("click", function(e) {
                var formData = new FormData();

                var inputFile = $("input[name='uploadFile']");

                var files = inputFile[0].files;

                console.log(files);

                // add filedate to formdata
                for(let i = 0; i < files.length; i++) {
                    formData.append("uploadFile", files[i]);
                }

                $.ajax({
                    url: '/uploadAjaxAction',
                    processData: false,
                    contentType: false,
                    data: formData,
                    type: 'POST',
                    success: function(result) {
                        alert("Uploaded")
                    }
                });
            });
        })
    </script>


formData 에 추가한 뒤 Ajax 를 통해 formData 자체를 전송한다.
이때 processData 와 contentType 은 반드시 false 로 지정해야 전송된다.
UploadController 에선 기존과 동일하게 MultipartFile 타입을 이용하여 첨부파일 데이터를 처리한다.


    @PostMapping("/uploadAjaxAction")
    public void uploadAjaxPost(MultipartFile[] uploadFile) {
        log.info("update ajax post...");

        String uploadFolder = "C:\\upload";

        for(MultipartFile multipartFile : uploadFile) {
            log.info("--------------------");
            log.info("Upload File Name: " + multipartFile.getOriginalFilename());
            log.info("Upload File Size: " + multipartFile.getSize());

            String uploadFileName = multipartFile.getOriginalFilename();

            // IE has file path
            uploadFileName = uploadFileName.substring(uploadFileName.lastIndexOf("\\") + 1);

            log.info("only file name: " + uploadFileName);

            File saveFile = new File(uploadFolder, uploadFileName);

            try {
                multipartFile.transferTo(saveFile);
            } catch (Exception e) {
                log.info(e.getMessage());
            }
        }
    }


uploadAjaxPost() 는 기존 <form> 태그를 이용한 방식과 별 차이는 없지만, 조금 뒤 Ajax 방식으로 데이터 전달시에 리턴 타입이 달라지도록
한다. 파라미터는 Ajax 방식을 이용하여 Model 을 사용할 일이 없어 사용하지 않는다.
IE 경우 경우에는 전체 파일 경로가 전송되므로, 마지막 '\' 를 기준으로 잘라낸 문자열이 실제 파일 이름이다.


controller.UploadController.uploadAjaxPost --------------------
controller.UploadController.uploadAjaxPost Upload File Name: 죤나맨.hskin
controller.UploadController.uploadAjaxPost Upload File Size: 76342
controller.UploadController.uploadAjaxPost only file name: 죤나맨.hskin


예제는 첨부 파일 처리를 Ajax 를 이용할 것이므로 지금까지의 문제점 등을 파악하고 해결 나가는 방식으로 진행한다.


        21.3.2 파일 업로드에서 고려해야 할 점

첨부파일을 서버에 전송하고 저장하는 일은 그다지 복잡하진 않지만 생각해야 하는게 많다.


    - 동일한 이름으로 파일 업로드 되었을 때 기존 파일이 사라지는 문제
    - 이미지 파일의 경우 원본 파일의 용량이 큰 경우 섬네일 이미지를 생성해야 하는 문제
    - 이미지 파일과 일반 파일을 구분하여 다운로드 혹은 페이지에서 조회하도록 처리하는 문제
    - 첨부파일 굥격에 대비하기 위한 업로드 파일의 확장자 제한