            22.1 파일 확장자나 크기의 사전 처리

최근 특정 확장자를 제외한 파일 업로드를 제한한 경우가 많은데, 이는 첨부 파일을 이용한 웹 공격을 막기 위한 조치이다.
예제에선 'exe, sh, zip' 등의 업로드를 제한하고, 특정 크기 이상의 파일은 업로드할 수 없도록 제한하는 처리를
JavaScript 로 처리한다. 파일 확장자의 경우 정규 표현식을 이용하여 검사할 수 있다.

uploadAjax.jsp 에 파일의 확장자와 크기를 설정하고, 이를 검수하는 함수 checkExtension() 을 작성하여 적용하면 다음 형태가 된다.


    $(document).ready(function() {

        var regex = new RegExp("(.*?)\.(exe|sh|zip|alz)$");
        var maxSize = 5242880;  // 5MB

        function checkExtension(fileName, fileSize) {

            if(fileSize >= maxSize) {
                alert("파일 사이즈 초과");
                return false;
            }

            if(regex.test(fileName)) {
                alert("해당 종류의 파일은 업로드할 수 없습니다.");
                return false;
            }

            return true;
        }

        $('#uploadBtn').on("click", function(e) {
            var formData = new FormData();

            var inputFile = $("input[name='uploadFile']");

            var files = inputFile[0].files;

            console.log(files);

            // add filedate to formdata
            for(let i = 0; i < files.length; i++) {
                if(!checkExtension(files[i].name, files[i].size)) {
                    return false;
                }

                formData.append("uploadFile", files[i]);
            }

            $.ajax({
                url: '/uploadAjaxAction',
                processData: false,
                contentType: false,
                data: formData,
                type: 'POST',
                success: function(result) {
                    alert("Uploaded")
                }
            });
        });
    });


첨부 파일 업로드하면 for 루프에서 checkExtension() 으로 확장자나 크기를 체크하게 된다.


        22.1.1 중복된 이름의 첨부 파일 처리

첨부파일 저장 시 중복된 이름 처리와 한 폴더에 너무 많은 파일이 생성되는 것이다.

첫 번째의 경우는 현재 시간을 밀리세컨드까지 구분하여 파일 이름을 생성하여 저장하거나 UUID 를 이용하여
중복이 발생할 가능성이 거의 없는 문자열을 생성하여 처리한다.
두 번째의 경우는 한 폴더에 생성될 수 있는 파일 개수의 문제인데, 한 폴더에 너무 많은 파일이 있을 경우
속도 저하와 개수의 제한 문제가 생기는 것을 방지해야 한다. 이 해결책은 '년/월/일' 단위의 폴더를 생성하여 저장하는 것이다.


        22.1.2 년/월/일 폴더의 생성

첨부파일을 보관하는 폴더를 생성하는 작업은 한 번에 폴더를 생성하거나 존재하는 폴더를 이용하는 방식을 이용한다.
java.io.File 에 존재하는 mkdirs() 를 이용하여 필요한 상위 폴더까지 한 번에 생성할 수 있으므로 간단히 처리할 수 있다.

UploadController 에 추가적인 메소드와 수정을 통해 업로드 폴더 등을 처리하자.


    private String getFolder() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        Date date = new Date();

        String str = sdf.format(date);

        return str.replace("-", File.separator);
    }

    @PostMapping("/uploadAjaxAction")
    public void uploadAjaxPost(MultipartFile[] uploadFile) {
        log.info("update ajax post...");

        String uploadFolder = "C:\\upload";

        // make folder -----
        File uploadPath = new File(uploadFolder, getFolder());
        log.info("upload path: " + uploadPath);

        if(uploadPath.exists() == false) {
            uploadPath.mkdirs();
        }
        // make yyyy/MM/dd folder

        for(MultipartFile multipartFile : uploadFile) {
            log.info("--------------------");
            log.info("Upload File Name: " + multipartFile.getOriginalFilename());
            log.info("Upload File Size: " + multipartFile.getSize());

            String uploadFileName = multipartFile.getOriginalFilename();

            // IE has file path
            uploadFileName = uploadFileName.substring(uploadFileName.lastIndexOf("\\") + 1);

            log.info("only file name: " + uploadFileName);

            // File saveFile = new File(uploadFolder, uploadFileName);
            File saveFile = new File(uploadPath, uploadFileName);

            try {
                multipartFile.transferTo(saveFile);
            } catch (Exception e) {
                log.info(e.getMessage());
            }
        }
    }


getFolder() 는 날짜의 경로를 문자열로 생성한다. 생성된 경로는 폴더 경로로 수정된 뒤 반환한다.
uploadAjaxPost() 는 해당 경롤가 있는지 검사하고, 폴더를 생성한다.
이후 생성된 폴더로 파일을 저장한다. 기존과 달리 uploadPath 경로에 파일을 저장하게 되면 자동으로 폴더가 생상되며
파일이 저장되는 것을 볼 수 있다.


        22.1.3 중복 방지를 위한 UUID 적용

파일 이름을 생성할 때 동일한 이름으로 업로드 되며 기존 파일을 지우게 되므로 java.util.UUID 의 값을 이용해서 처리한다.


    @PostMapping("/uploadAjaxAction")
    public void uploadAjaxPost(MultipartFile[] uploadFile) {
        log.info("update ajax post...");

        String uploadFolder = "C:\\upload";

        // make folder -----
        File uploadPath = new File(uploadFolder, getFolder());
        log.info("upload path: " + uploadPath);

        if(uploadPath.exists() == false) {
            uploadPath.mkdirs();
        }
        // make yyyy/MM/dd folder

        for(MultipartFile multipartFile : uploadFile) {
            log.info("--------------------");
            log.info("Upload File Name: " + multipartFile.getOriginalFilename());
            log.info("Upload File Size: " + multipartFile.getSize());

            String uploadFileName = multipartFile.getOriginalFilename();

            // IE has file path
            uploadFileName = uploadFileName.substring(uploadFileName.lastIndexOf("\\") + 1);

            log.info("only file name: " + uploadFileName);

            UUID uuid = UUID.randomUUID();

            uploadFileName = uuid.toString() + "_" + uploadFileName;

            // File saveFile = new File(uploadFolder, uploadFileName);
            File saveFile = new File(uploadPath, uploadFileName);

            try {
                multipartFile.transferTo(saveFile);
            } catch (Exception e) {
                log.info(e.getMessage());
            }
        }
    }


첨부파일은 randomUUID() 를 이용하여 임의의 값을 생성한다. 생성된 값은 원래의 파일과 구분하도록 '_' 를 추가한다.
나중에 앞에서부터 '_' 를 기준으로 분리하면 원래 파일 이름을 파악할 수 있다.

이제 UUID 로 파일이 생기므로 원본 파일 이름이 같아도 다른 파일 이름으로 생성되는 것을 확인할 수 있다.


        22.2 섬네일 이미지 생성성

이미지 경로에 대한 처리와 중복 이름에 대한 처리가 완료되면, 남은 작업은 일반 파일과 이미지 파일을 구분하는 것이다.
이미지는 화면에 보여지는 작은 이미지(섬네일)을 생성하는 추가적인 처리이다. 큰 파일을 섬네일 처리하지 않으면
모바일과 같은 환경에서 많은 데이터를 소비해야만 하므로 이미지 경우 특별하지 않으면 섬네일을 제작해야 한다.

섬네일 제작은 JDK 1.4 부터 ImageIO 를 제공하여 원본 이미지 크기를 줄일 수 있고, ImgScalr 와 같은 별도 라이브러리를 이용할 수 있다.
JDK 에 포함된 API 를 이용한 방식보다 별도의 라이브러리를 사용한 경우가 많은데, 이는 이미지 축소 시 크기나
해상도를 직접 조절하는 하는 작업을 줄이기 위함이다.
예제에선 Thumbnailator 라이브러리를 이용하여 섬네일 이미지를 생성한다.


    <!-- Thumbnail -->
    <dependency>
        <groupId>net.coobird</groupId>
        <artifactId>thumbnailator</artifactId>
        <version>0.4.13</version>
    </dependency>


UploadController 에선 다음 단계로 섬네일을 생성한다.


    - 업로드된 파일이 이미지 종류 파일인지 확인
    - 이미지 파일의 경우 섬네일 이미지 생성 및 저장


        22.2.1 이미지 파일 판단

약간의 검사로 파일 확장자를 검사하기는 하지만, Ajax 호출은 반드시 브라우저만으로 들어오는 것이 아니므로 확인할 필요가 있다.
서버에 업로드된 파일은 조금 시간이 걸려도 파일 자체가 이미지인지를 정확히 체크한 뒤에 저장하는 것이 좋다.

특정한 파일이 이미지 타입인지를 검사하는 별도의 checkImageType() 메소드를 추가한다.


    private boolean checkImageType(File file) {
        try {
            String contentType = Files.probeContentType(file.toPath());

            return contentType.startsWith("image");
        } catch (Exception e) {
            e.printStackTrace();
        }

        return false;
    }


만일 이미지 타입이라면 섬네일을 생성하도록 코드를 수정한다.


    @PostMapping("/uploadAjaxAction")
    public void uploadAjaxPost(MultipartFile[] uploadFile) {
        log.info("update ajax post...");

        String uploadFolder = "C:\\upload";

        // make folder -----
        File uploadPath = new File(uploadFolder, getFolder());
        log.info("upload path: " + uploadPath);

        if(uploadPath.exists() == false) {
            uploadPath.mkdirs();
        }
        // make yyyy/MM/dd folder

        for(MultipartFile multipartFile : uploadFile) {
            log.info("--------------------");
            log.info("Upload File Name: " + multipartFile.getOriginalFilename());
            log.info("Upload File Size: " + multipartFile.getSize());

            String uploadFileName = multipartFile.getOriginalFilename();

            // IE has file path
            uploadFileName = uploadFileName.substring(uploadFileName.lastIndexOf("\\") + 1);

            log.info("only file name: " + uploadFileName);

            UUID uuid = UUID.randomUUID();

            uploadFileName = uuid.toString() + "_" + uploadFileName;

            try {
                File saveFile = new File(uploadPath, uploadFileName);
                multipartFile.transferTo(saveFile);
                // check image type file
                if(checkImageType(saveFile)) {
                    FileOutputStream thumbnail = new FileOutputStream(new File(uploadPath, "s_" + uploadFileName));
                    Thumbnailator.createThumbnail(multipartFile.getInputStream(), thumbnail, 100, 100);
                    thumbnail.close();
                }
            } catch (Exception e) {
                log.info(e.getMessage());
            }
        }
    }


Thumbnailator 는 InputStream 과 java.io.File 객체를 이용해서 파일을 생성할 수 있고, 뒤에 사이즈를 지정할 수 있다.

이제 /uploadAjax 를 이용하여 이미지 파일을 업로드하면 원본 파일은 그대로 저장되고,
파일 이름이 's_' 로 시작하는 섬네일 파일이 생성되는 것을 확인할 수 있다. 반면 일반 파일은 그냥 파일만 업로드된다.


            22.3 업로드된 파일의 데이터 반환

Ajax 를 이용해 파일 업로드했지만, 아직 브라우저엔 아무 데이터가 전달하지 않았다.
서버에서 Ajax 결과로 전달해야 하는 데이터는 업로드된 파일 경로가 포함된 파일의 이름이다.
섬네일의 경우 's_' 로 시작하는 규칙만 알고 있으면 필요할 때 사용할 수 있다.

브라우저로 전송 시 데이터는 다음 정보를 포함하게 설계한다.


    - 업로드된 파일 이름과 원본 파일 이름
    - 파일이 저장된 경로
    - 업로드된 파일이 이미지인지 아닌지 정보


모든 정보 처리 방법은 업로드된 경로가 포함된 파일 이름을 반환하는 방식과 별도 객체를 생성하여 처리하는 방법으 고려할 수 있다.
첫 번째의 경우 브라우저 쪽에서 해야 하는 일이 많아 두 번째 방식을 구성한다.


        22.3.1 AttachFileDTO 클래스 생성

'src/main/java/domain' 패키지에서 첨부파일의 정보들을 저장하는 AttachFileDTO 클래스를 작성한다.


    @Data
    public class AttachFileDTO {
        private String fileName;
        private String uploadPath;
        private String uuid;
        private boolean image;
    }


AttachFileDTO 클래스엔 원본 파일 이름, 업로드 경로, UUID 값, 이미지 여부 정보를 묶어 전달하는 용도로 사용한다.
UploadController 는 AttachFileDTO 리스트를 반환하는 구조로 변경해야 한다.


    @PostMapping(value = "/uploadAjaxAction", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ResponseBody
    public ResponseEntity<List<AttachFileDTO>> uploadAjaxPost(MultipartFile[] uploadFile) {
        log.info("update ajax post...");

        List<AttachFileDTO> list = new ArrayList<>();
        String uploadFolder = "C:\\upload";

        String uploadFolderPath = getFolder();
        // make folder -----
        File uploadPath = new File(uploadFolder, getFolder());
        log.info("upload path: " + uploadPath);

        if(uploadPath.exists() == false) {
            uploadPath.mkdirs();
        }
        // make yyyy/MM/dd folder

        for(MultipartFile multipartFile : uploadFile) {
            log.info("--------------------");
            log.info("Upload File Name: " + multipartFile.getOriginalFilename());
            log.info("Upload File Size: " + multipartFile.getSize());

            AttachFileDTO attachDTO = new AttachFileDTO();

            String uploadFileName = multipartFile.getOriginalFilename();

            // IE has file path
            uploadFileName = uploadFileName.substring(uploadFileName.lastIndexOf("\\") + 1);

            log.info("only file name: " + uploadFileName);
            attachDTO.setFileName(uploadFileName);

            UUID uuid = UUID.randomUUID();

            uploadFileName = uuid.toString() + "_" + uploadFileName;

            try {
                File saveFile = new File(uploadPath, uploadFileName);
                multipartFile.transferTo(saveFile);

                attachDTO.setUuid(uuid.toString());
                attachDTO.setUploadPath(uploadFolderPath);

                // check image type file
                if(checkImageType(saveFile)) {
                    attachDTO.setImage(true);
                    FileOutputStream thumbnail = new FileOutputStream(new File(uploadPath, "s_" + uploadFileName));
                    Thumbnailator.createThumbnail(multipartFile.getInputStream(), thumbnail, 100, 100);
                    thumbnail.close();
                }

                list.add(attachDTO);
            } catch (Exception e) {
                log.info(e.getMessage());
            }
        }
        return new ResponseEntity<>(list, HttpStatus.OK);
    }


uploadAjaxPost() 는 기존과 달리 ResponseEntity<List<AttachFileDTO>> 를 반환하는 형태로 수정하고,
JSON 데이터를 반환하도록 변경된다. 내부에선 각 파일에 맞게 AttachFileDTO 를 생성해서 전달하는 구조로 변경된다.


        22.3.2 브라우저에서 Ajax 처리

/uploadAjax 에선 결과 데이터를 JavaScript 를 이용해 변환된 정보를 처리하도록 수정한다.


    $.ajax({
        url: '/uploadAjaxAction',
        processData: false,
        contentType: false,
        data: formData,
        type: 'POST',
        dataType: 'JSON',
        success: function(result) {
            console.log(result);
        }
    });


Ajax 호출 시 결과타입(dataType)은 'json' 으로 변경하고, 결과를 console.log() 로 찍도록 하였다.
첨부파일을 업로드 한 후 브라우저에서 결과를 아래와 같이 확인할 수 있다.


    fileName: "ㅇㅇㄴ.png"
    image: true
    uploadPath: "2021\01\20"
    uuid: "36598135-36cb-4d94-8250-958fa892d3b5"