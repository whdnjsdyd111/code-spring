비즈니스를 쪼갤 수 없는 단위의 작업을 트랜잭션(Transaction) 이라고 한다.
사전적 의미로 '거래' 지만 현실적으론 '한 번에 이루어지는 작업의 단위' 이다.

트랜잭션 성격을 'ACID 원칙' 이라 설명할 수 있다.


    원자성(Atomicity)      하나의 트랜잭션은 모두 한 단위로 처리되야 한다.
                          A 는 성공해도 B 가 실패한다면 모두 원점으로 되돌아가야 한다.

    일관성(Consistency)    트랜잭션 성공 시 데이터베이스의 모든 데이터는 일관성을 유지해야 한다.

    격리(Isolation)       트랜잭션 처리는 중간에 외부 간섭이 없어야 한다.

    영속성(Durability)     트랜잭션 성공 시 그 결과는 영속적으로 보관되어야 한다.


트랜잭션의 가장 흔한 예는 '계좌 이체' 이며 내부적으로 하나의 출금이 이루어 져야하고
대상 계좌에 입금이 이루어져야만 한다. 엄밀히 보면 '계좌 이체' 는 '출금' 과 '입금' 이 한 단위를 이루게 된다.

비즈니스에서 한 트랜잭션은 데이터베이스 상 여러 개의 작업이 같은 묶음을 이루는 경우가 많다.
예로 비즈니스 계층에서 '계좌 이체' 는 bankTransfer() 란 메소드로 정의되고, 계좌 내 입금과 출금은
deposit() 과 withdraw() 란 메소드로 정의된다 가정하자.

deposit() 과 withdraw() 는 각자 고유히 데이터베이스와 커넥션을 맺고 작업을 처리한다.
문제는 withdraw() 는 정상처리 되는데, deposit() 에서 예외 발생하는 경우다.
이미 계좌에선 돈이 빠져나갔지만, 상대방 계좌엔 돈이 입금되지 않는 상황이 될 수 있다.

'트랜잭션으로 관리' 또는 '묶는다' 는 표현은 프로그래밍에서 'AND' 연산과 유사하다.


    비즈니스 계층             영속 계층

                      ↔      withdraw()

    bankTransfer()    &&

                      ↔      deposit()


영속 계층엔 withdraw() 와 deposit() 은 각각 데이터베이스와 연결을 맺고 처리하는데 한 트랜잭션으로 처리할 경우
한쪽이 잘못된 경우 이미 성공했어도 원상태로 복구되어야 한다. 별도의 패턴이나 프레임워크를 사용하지 않는 순수하게
JDBC 를 이용한 코드라면 withdraw() 와 deposit() 의 내부는 아래와 같이 Connection 을 맺고
처리하도록 작성될 것이다.


    public boolean deposit() {      public boolean withdraw() {
        Connection con = ...            Connection con = ...

        try {                           try {
            con = ...                       con = ...
        } catch(Exception e) {          } catch(Exception e) {

        } finally {                     } finally {
            try { con.close(); }            try { con.close(); }
        }                               }
    }                               }


withdraw() 와 deposit() 이 위와 같이 고유히 연결을 맺고 처리되는 구조라면 bankTransfer() 작성 시
어느 한쪽이 실패할 때를 염두하고 코드를 복잡하게 만들어야 한다.
스프링은 이 트랜잭션 처리를 간단히 XML 설정이나 어노테이션 처리만으로 할 수 있다.


            19.1 데이터베이스 설계와 트랜잭션

데이터베이스 저장 구조를 호율적으로 관리하기 위해 '정규화' 작업을 한다.
가장 기본은 '중복된 데이터를 제거' 해서 데이터 저장 효율을 올리자는 것이다.
정규화 진행 시 테이블이 늘고, 각 테이블 데이터 양이 주는 것이 일반적이다.

정규화 진행 시 컬럼으로 처리되지 않는 데이터는 다음과 같다.


    - 시간이 흐르며 변경되는 데이터를 컬럼으로 기록하지 않는다. - 생년월일은 컬럼에 기록하지만 현재 나이는 컬럼으로 유지하지 않는다.
    - 계산이 가능한 데이터는 컬럼으로 기록하지 않는다. 주문과 주문 상세가 별도의 테이블로 분리되었다면
        사용자가 한 번에 몇 개의 상품을 주문했느지 등은 컬럼으로 기록하지 않음(집합 연산에 영향 주는 컬럼만 고려)
    - 누구에게나 정해진 값을 이용할 경우 취급하지 않는다. (2021-01-20 은 수요일이란 사실은 기록하지 않음)


정규화가 잘됐거나, 위 규칙이 반영된 데이터베이스 설계에 '트랜잭션' 이 많이 일어나진 않는다.
정규화가 진행될수록 테이블은 점점 더 순수한 형태가 되는데, 이 형태는 '트랜잭션' 과 멀어진다.
정규화될수록 테이블은 더 간결해지지만 반대로 쿼리 등은 필요한 데이터를 가져오는 입장에서 점점 불편해진다.
현재 상황을 알기 위해 단순 조회가 아닌 조인이나 서브쿼리로 처리해야 하기 때문이다.

조인이나 서브쿼리는 성능 이슈가 발생할 수 있다. 매번 계산이 발생하게 만들어진 쿼리는 성능 저하되기 때문이다.
많은 양의 처리는 바람직하지 않을 수도 있따. 이런 상황에 흔히 '반 정규화' 를 하게 된다.
중복이나 계산되는 값을 데이터베이스 상에 보관하고, 대신 조인이나 서브쿼리의 사용을 줄이는 방식이다.

반정규화가 흔히 '게시물의 댓글' 의 경우다. 정규화 규칙을 따르면 게시물과 댓글 테이블은 같은 구조를 가지는 것이 일반적이다.

정규화를 했다면 tbl_board 는 게시물 정보만으로 컬럼을 구성하고, tbl_reply 테이블로 댓글들을 보관하게 된다.
문제는 게시물 목록 페이지에서 일반적으로 댓글 숫자도 같이 표시된다는 데 있다. 댓글 추가하고 숫자를 표시하려면
조인하거나 서브쿼리를 이용하여 처리하게 된다. 이 상황에 흔히 tbl_board 테이블에 댓글 숫자를 컬럼으로 처리하는 경우가 많다.
댓글의 숫자를 컬럼으로 처리하면 게시물 목록을 가져올 경우엔 tbl_reply 테이블을 이용하는 일이 없어 성능상 이득을 볼 수 있다.

반정규화는 이처럼 중복이나 계산의 결과를 미리 보관하여 좀 더 빠른 결과를 얻기 위한 노력이다.
반정규화는 쿼리가 단순해지고 성능 이득을 얻을 수 있지만, 대신 댓글이 추가될 때 tbl_reply 에 insert 하고,
댓글 숫자는 tbl_board 테이블에 update 하는 작업이 필요하다. 두 작업은 하나의 트랜잭션으로 관리되어야 하는 작업이다.


            19.2 트랜잭션 설정 실습

스프링 트랜잭션 설정은 AOP 와 같이 XML 을 이용하여 설정하거나 어노테이션을 이용해서 설정이 가능하다.
우선 트랜잭션 이용을 위해선 Transaction Manager 란 존재가 필요하다.

root-context.xml 엔 트랜잭션을 관리하는 빈을 등록하고, 어노테이션 기반으로 트랜잭션을 설정할 수 있도록
<tx:annotation-driven> 태그를 등록한다.


	<!-- Transaction -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven />


<bean> 으로 등록된 transactionManager 와 <tx:annotation-driven> 설정이 추가된 후엔
트랜잭션이 필요한 상황을 만들어서 어노테이션을 추가하는 방식으로 설정하게 된다.


        19.2.1 Java 설정을 이용한 트랜잭션 설정

Java 설정 시 'transactionManager' 를 빈으로 등록 작업을한다.


    @Configuration
    @ComponentScan(basePackages = {"sample", "service", "aop"})
    @EnableAspectJAutoProxy
    @EnableTransactionManagement
    @MapperScan(basePackages = {"mapper"})
    public class RootConfig {

        @Bean
        public DataSource dataSource() {
            ...
        }

        @Bean
        public SqlSessionFactory sqlSessionFactory() throws Exception {
            ...
        }

        @Bean
        public DataSourceTransactionManager txManager() {
            return new DataSourceTransactionManager(dataSource());
        }
    }


위에서 @EnableTransactionManagement 설정은 'aspectj-autoproxy' 설정이고, txManager() 는 빈 설정을 대신한다.


        19.2.2 예제 테이블 생성

트랜잭션 실습을 위해 간단한 2개 테이블을 생성하고, 한 번에 두 개의 테이블에 insert 해야하는 상황을 재현한다.


    CREATE TABLE tbl_sample1( col1 VARCHAR2(500));
    CREATE TABLE tbl_sample2( col2 VARCHAR2(50));


tbl_sample1 은 varchar2(500) 인 반면 tbl_sample2 는 varchar2(50) 으로 설정했다.
50 바이트가 넘으면 tbl_sample1 엔 정상 insert 하지만, tbl_sample2 에는 insert 시 컬럼 최대보다 길어서 문제가 있게 된다.

'src/main/java/mapper' 패키지에 Sample1Mapper 인터페이스와 Sample2Mapper 인터페이스를 추가한다.


    import org.apache.ibatis.annotations.Insert;

    public interface Sample1Mapper {
        @Insert("INSERT INTO tbl_sample1 (col1) VALUES (#{data})")
        public int insertCol1(String data);
    }


    import org.apache.ibatis.annotations.Insert;

    public interface Sample2Mapper {
        @Insert("INSERT INTO tbl_sample2 (col2) VALUES (#{data})")
        public int insertCol2(String data);
    }


        19.2.3 비즈니스 계층과 트랜잭션 설정

트랜잭션은 비즈니스 계층을 이루고, service 계층에서 Sample1Mapper, Sample2Mapper 를 사용하는 SampleTxService 인터페이스,
SampleTxServiceImpl 클레스를 설계한다.
트랜잭션 설정이 안된 상태를 먼저 테스트하기 위해 기존 방식처럼 코드를 작성한다.


    public interface SampleTxService {
        public void addData(String value);
    }


    @Service
    @Log
    public class SampleTxServiceImpl implements SampleTxService {
        @Setter(onMethod_ = @Autowired)
        private Sample1Mapper mapper1;

        @Setter(onMethod_ = @Autowired)
        private Sample2Mapper mapper2;

        @Override
        public void addData(String value) {
            log.info("mapper1...");
            mapper1.insertCol1(value);

            log.info("mapper2...");
            mapper2.insertCol2(value);

            log.info("end...");
        }
    }


SampleTxService 는 addData() 란 메소드를 통해 데이터를 추가한다.
SampleTXServiceImpl 클래스는 Sample1Mapper 와 Sample2Mapper 모두 이용하여 같은 데이터를
tbl_sample1 과 tbl_sample2 테이블에 insert 하도록 작성한다.

'src/test/java/service' 에서 SampleTxService 를 테스트하는 SampleTxServiceTests 클래스를 작성한다.


    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    // @ContextConfiguration(classes = {RootConfig.class})
    @Log4j
    public class SampleTxServiceTests {
        @Setter(onMethod_ = @Autowired)
        private SampleTxService service;

        @Test
        public void testLong() {
            String str = "Starry\r\n" +
                    "Starry night\r\n" +
                    "Paint your palette blue and grey\r\n" +
                    "Look out on a summer's day";

            log.info(str.getBytes().length);

            service.addData(str);
        }
    }


testLong() 은 500bytes 를 넘지 않는 길이의 어떤 문자열을 이용하여 tbl_sample1, tbl_sample2 테이블에 insert 를 시도한다.
testLong() 을 실행하면 tbl_sample1 엔 데이터가 추가되지만, tbl_sample2 엔 길이 제한으로 insert 가 실패하게 된다.


    INFO : jdbc.sqlonly - INSERT INTO tbl_sample1 (col1) VALUES ('Starry Starry night Paint your palette blue and grey
    Look out on a summer''s day')

    INFO : jdbc.sqlonly - INSERT INTO tbl_sample2 (col2) VALUES ('Starry Starry night Paint your palette blue and grey
    Look out on a summer''s day')

    java.sql.SQLException: ORA-12899: value too large for column "BOOK_EX"."TBL_SAMPLE2"."COL2"
        (actual: 82, maximum: 50)


테스트에 사용된 문자열은 82bytes 였으니 tbl_sample1 엔 성공, tbl_sample2 는 실패한다.


        19.2.4 @Transactional 어노테이션

위 결과는 트랜잭션 처리를 하지 않아 하나의 테이블만 insert 에 성공한 것을 볼 수 있다.
만일 트랜잭션 처리가 되었다면 tbl_sample1, tbl_sample2 모두 insert 되지 않았어야 하므로,
트랜잭션 처리가 될 수 있도록 SampleTxSampleImpl 의 addData() 에 @Transactional 을 추가한다.


    @Transactional
    @Override
    public void addData(String value) {
        log.info("mapper1...");
        mapper1.insertCol1(value);

        log.info("mapper2...");
        mapper2.insertCol2(value);

        log.info("end...");
    }


기존 코드에서 @Transactional 만 추가된 것이며 AOP 와 마찬가지로 트랜잭션 처리된 메소드를 구분해준다.
정확한 테스트를 위해 이전에 성공한 tbl_sample1 의 데이터를 삭제하고, commit 한다.


    DELETE tbl_sample1;
    DELETE tbl_sample2;

    commit;


양쪽 테이블의 데이터가 없는 것을 확인 후 테스트 코드를 실행한다.
동일한 코드지만 @Transactional 추가 후 실행 시 rollback() 되는 것을 확인할 수 있다.

데이터베이스도 두 테이블에 아무 데이터가 들어가지 않는 것을 확인할 수 있다.


        19.2.5 @Transactional 어노테이션 속성들

스프링에선 트랜잭션 처리를 @Transactional 로 간단하게 완료할 수 있으며 속성은 다음과 같다.


    전파(Propagation) 속성

        - PROPAGATION_MADATORY : 작업은 반드시 특정 트랜잭션이 존재한 상태에만 가능
        - PROPAGATION_NESTED : 기존 트랜잭션이 있을 경우, 포함되어 실행
        - PROPAGATION_NEVER : 트랜잭션 상황하에 실행되면 예외 발생
        - PROPAGATION_NOT_SUPPORTED : 트랜잭션이 있는 경우 트랜잭션이 끝날 때까지 보류된 후 실행
        - PROPAGATION_REQUIRED : 트랜잭션이 있으면 그 상황에서 실행, 없으면 새로운 트랜잭션 실행(기본 설정)
        - PROPAGATION_REQUIRED_NEW : 대상은 자신만의 고유 트랜잭션으로 실행
        - PROPAGATION_SUPPORTS : 트랜잭션을 필요하지 않지만, 트랜잭션 상황하에 있으면 포함하여 실행

    격리(Isolation) 레벨

        - DEFAULT : DB 설정. 기본 격리 수준(기본 설정)
        - SERIALIZABLE : 가장 높은 격리, 성능 저하의 우려가 있음
        - READ_UNCOMMITED : 커밋되지 않은 데이터에 대한 읽기를 허용
        - READ_COMMITED : 커밋된 데이터에 대해 읽기 허용
        - REPEATABLE_READ : 동일 필드에 다중 접근 시 모두 동일한 결과 보장

    Read-only 속성

        - true 인 경우 insert, delete 실행 시 예외 발생, 기본 설정은 false

    Rollback-for-예외

        - 특정 예외가 발생 시 강제로 Rollback

    No-rollback-for 예외

        - 특정 예외의 발생 시엔 Rollback 처리되지 않음


위 속성들 모두 @Transactional 설정 시 속성으로 지정할 수 있다.


        19.2.6 @Transactional 적용 순서

스프링은 간단한 트랜잭션 매니저 설정과 @Transactional 어노테이션으로 설정만으로 애플리켕션 내에 트랜잭션 설정을 처리할 수 있다.

@Transactional 어노테이션은 메소드 설정도 가능하지만, 클래스나 인터페이스 역시 가능하다.
어노테이션 우선 순위는 다음과 같다.


    - 메소드의 @Transactional 설정 가장 우선시
    - 클래스의 @Transactional 메소드보다 우선 순위 낮음
    - 인터페이스의 @Transactional 설정이 가장 낮음


위 규칙이 적용되어 가장 기준이 되는 @Transactional 설정을 지정하고, 클래스나 메소드에 필요한 어노테이션 처리가 좋다.