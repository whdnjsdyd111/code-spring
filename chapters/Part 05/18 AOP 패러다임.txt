AOP 는 '관점 지향 프로그래밍' 이란 용어로 현실적으로 와닿지 않아 어려울 수 있다.
'관점' 이란 용어는 개발자들에겐 '관심사(concern)' 란 말로 통용되며 개발 시 필요한 고민이나
염두해야 하는 일이라 생각할 수 있으며, 코드를 작성하며 염두에 두는 일들은 다음과 같다.


    - 파라미터가 올바른가?
    - 이 작업을 하는 사용자는 적절한 권한을 가진 사용자인가?
    -  이 작업에서 발생하는 모든 예외는 어떻게 처리하는가?


위 고민은 '핵심 로직' 은 아니지만, 코드를 온전히 만들기 위해 필요한 고민들로 전통 방식에선 반복적인 고민을 코드에 반영한다.
AOP 는 이런 고민에 대해 다른 방식으로 접근하며 AOP 가 추구하는 것은 '관심사 분리(separate concerns)' 이다.
AOP 는 개발자가 염두한 일들은 별도 '관심사' 로 분리하고, 핵심 비즈니스 로직만 작성하는 것을 권장한다.

'관심사는' 쉽게 '주변 로직' 이라 표현하고 싶으며, 나눗셈 구현 시 '핵심 로직' 은 두 숫자를 나누는 것이지만,
'주변 로직' 은 0을 나누는 것이 아닌지 등을 체크하는 것이다. 이렇게 사전 조건과 사후 조건 등으로 간주할 수 있다.

AOP 는 과거에 개발자가 작성한 '관심사 + 비즈니스 로직' 등으로 분리하여 별도 코드로 작성하도록 하고,
실행 시 결합하는 방식으로 접근한다. 과거엔 비즈니스 로직을 작성하며 내부에 필요한 '관심사' 를 처리하던 방식과
정반대의 접근 방식이며, 개발자가 작성한 코드와 관심사를 구현한 코드를 컴파일 혹은 실행 시에 결합시킨다.
실제 실행은 결합된 상태 코드가 실행되어 개발자들은 핵심 비즈니스 로직에만 근거하여 코드를 작성하고,
나머지 관심사들과 결합할 지 설정하는 것만으로 개발을 마칠 수 있게 된다.

예로 AOP 이용 시 모든 메소드 실행 시간이 얼마인지 기록하는 기능은 기존 코드의 수정 없이도 작성할 수 있고,
잘못된 파라미터가 들어와서 예외가 발생하는 상황을 기존 코드 수정 없이 제어할 수 있다ㅓ.
스프링이 AOP 를 지원하는 것은 별도의 복잡한 설정이나 제약 없이 스프링 내에 간편하게 AOP 기능을 구현할 수 있기 때문이다.


            18.1 AOP 용어들

    Proxy
                    JoinPoint
                         ↓
    →   Advice  Advice  →   Target


개발자 입장에서 AOP 적용이 기존 코드를 수정하지 않고 관심사(cross-concern)들을 엮을 수 있다는 점이다.
위에서 Target 에 해당하는 것이 개발자가 작성한 핵심 비즈니스 로직 객체이다.

Target 은 순수 비즈니스 로직을 의미하고, 어떤 관심사들과도 관계를 맺지 않는다.
순수한 코어(core)라고 볼 수 있다. Target 을 전체적으로 감싸고 있는 존재를 Proxy 라고 한다.
Proxy 는 내부적으로 Target 을 모두 호출하지만, 중간에 필요한 관심사를 거치며 Target 을 호출하도록 자동 혹은 수동으로 작성된다.
Proxy 는 직접 코드를 통해 구현하는 경우도 있지만, 대부분 스프링 AOP 기능을 이용하여 자동 생성되는(auto-proxy) 방식을 이용한다.
JoinPoint 는 Target 객체가 가진 메소드이다. 외부 호출은 Proxy 객체를 통해 Target 객체의 JoinPoint 를 호출하는 방식이라
이해할 수 있다.


    Aspect      Advice

    Pointcut        ↓

    JoinPoint   JoinPoint   JoinPoint   →


JoinPoint 는 Target 이 가진 여러 메소드라 볼 수 있다. 여러 메소드가 존재하여 어떤 메소드에 관심사를 결합할 지
결정 해야 하는데 이를 'Pointcut' 이라고 한다.

Pointcut 은 관심사와 비즈니스 로직이 결합되는 지점을 결정하는 것이다. 앞의 Proxy 는 이 결합이 완성된 상태이므로
메소드를 호출하게 되면 자동으로 관심사가 결합된 상태로 동작하게 된다.
관심사는 Aspect 와 Advice 란 용어로 표현되어 있다. Aspect 는 조금 추상적이며 Advice 는 Aspect 를 구현한 코드다.

Advice 는 실제 걱정거리를 분리한 코드를 의미한다. Advice 는 그 동작 위치에 따라 다음과 같이 구분된다.


    구분                          설명

    Before Advice               Target 의 JoinPoint 를 호출하기 전 실행되는 코드이다. 코드 실행 자체엔 관여할 수 없다.

    After Returning Advice      모든 실행이 정상적으로 이루어진 후 동작하는 코드이다.

    After Throwing Advice       예외 발생한 뒤 동작하는 코드다.

    After Advice                정상적으로 실행되거나 예외가 발생했을 때 구분없이 실행되는 코드이다.

    Around Advice               메소드 실행 자체를 제어할 수 있는 강력한 코드이며 직접 대상 메소드를 호출하고 결과나 예외를
                                처리할 수 있다.


Advice 는 과거엔 별도의 인터페이스로 구현되고, 이를 클래스로 구현했으나 스프링 3버전 이후 어노테이션만으로 모든 설정이 가능하다.
Target 에 어떤 Advice 를 적용할 지 XML 을 이용하여 설정할 수 있고, 어노테이션을 이용하는 방식을 이용할 수 있다.

Pointcut 은 Advice 를 어떤 JoinPoint 에 결합할 것인지를 결정하는 설정이다.
AOP 에선 Target 은 결과적으로 Pointcut 에 의해 자신에게 없는 기능들을 가지게 된다. Pointcut 은 다양한 형태로 선언하여
사용할 수 있는데 주로 사용되는 설정은 다음과 같다.


    구분                          설명

    execution(@execution)       메소드를 기준으로 Pointcut 설정

    within(@within)             특정 타입(클래스)를 기준으로 Pointcut 설정

    this                        주어진 인터페이스를 구현한 객체를 대상으로 Pointcut 설정

    args(@args)                 특정 파라미터를 가지는 대상들만을 Pointcut 으로 설정

    @annotation                 특정 어노테이션이 적용된 대상들만을 Pointcut 으로 설정


            18.2 AOP 실습

AOP 기능은 주로 일반 Java API 를 이용한 클래스(POJO)들에 적용한다.
Controller 에 적용이 불가능하진 않지만 후에 인터셉터나 필터 등을 이용한다.
예제에선 서비스 계층에 AOP 를 적용한다. AOP 예제는 서비스 계층의 메소드 호출 시 모든 파라미터들을 로그로 기록하고,
메소드들의 실행 시간을 기록하도록 한다.


        18.2.1 예제 프로젝트 생성

스프링 AOP 는 AspectJ 란 라이브러리 도움을 많이 받아 스프링 버전을 고려하여 AspectJ 버전도 1.9.0 버전으로 높여준다.
프로젝트는 최종적으로  테스트 코드로 동작하게 될 것이다.

AOP 설정과 관련된 라이브러리는 AspectJ Weaver 란 라이브러리다.
AOP 처리는 객체 생성 시 AspectJ Weaver 라이브러리 도움을 받아 동작하니, pom.xml 에 추가한다.


    <dependency>
        <groupId>org.aspectj</groupId>
        <artifactId>aspectjrt</artifactId>
        <version>${org.aspectj-version}</version>
    </dependency>
    <dependency>
        <groupId>org.aspectj</groupId>
        <artifactId>aspectjweaver</artifactId>
        <version>${org.aspectj-version}</version>
    </dependency>


        18.2.2 서비스 계층 설계

프로젝트엔 'src/main/java/service' 패키지에 간단한 기능을 가진 인터페이스와 클래스를 구현한다.


    public interface SampleService {
        public Integer doAdd(String str1, String str2) throws  Exception;
    }


SampleService 인터페이스의 doAdd() 메소드를 대상으로 진행한다. 인터페이스를 구현한 SampleServiceImpl 클래스는
단순 문자열을 변환하여 더하는 연산을 하는 단순한 작업을 작성한다. SampleServiceImpl 작성 시 @Service 어노테이션을 추가하여
스프링에서 빈으로 사용될 수 있게 설정한다.


    import org.springframework.stereotype.Service;

    @Service
    public class SampleServiceImpl implements SampleService {
        @Override
        public Integer doAdd(String str1, String str2) throws Exception {
            return Integer.parseInt(str1) + Integer.parseInt(str2);
        }
    }


        18.2.3 Advice 작성

위 SampleServiceImpl 코드에 기존 작성마다 log.info() 등으로 이용한 로그 기록 부분이 빠져있다.
지금까지 한 수많은 로그 기록은 '반복적이면서 핵심 로직도 아니며, 필요한 기능' 이기 때문에 '관심사' 로 간주할 수 있따.
AOP 개념에서 Advice 는 '관심사' 를 실제로 구현한 코드이므로 지금까지 로그를 기록해주는 LogAdvice 를 설계한다.

AOP 기능의 설정은 XML 방식이 있지만, 이 책에선 어노테이션만 이용하여 AOP 관련 설정을 진행한다.
'src/main/java/aop' 패키지를 생성하고, LogAdvice 라는 클래스를 추가한다.

LogAdvice 는 AOP 에서 사용되는 약간의 어노테이션들을 이용해서 아래와 같이 구성한다.


    import lombok.extern.java.Log;
    import org.aspectj.lang.annotation.Aspect;
    import org.aspectj.lang.annotation.Before;
    import org.springframework.stereotype.Component;

    @Aspect
    @Log
    @Component
    public class LogAdvice {
        @Before("execution(* service.sampleService*.*(..))")
        public void logBefore() {
            log.info("====================");
        }
    }


LogAdvice 클래스의 선언부에 @Aspect 어노테이션이 추가되어 있다. 해당 클래스 객체가 Aspect 를 구현한 것임으로 나타나기 위해 사용한다.
@Component 는 AOP 와 상관없지만 스프링 빈으로 인식하기 위해 사용한다.
logBefore() 는 @Before 어노테이션을 적용하고 있다.  @Before 는 BeforeAdvice 를 구현한 메소드에 추가한다.
@After, @AfterReturning, @AfterThrowing, @Around 역시 동일한 방식이다.

Advice 와 관련된 어노테이션들은 내부적으로 Pointcut 을 지정한다. Pointcut 은 별도의 @Pointcut 으로 지정하여 사용할 수도 있다.
@Before 내부의 'execution...' 문자열은 AspectJ 의 표현식이다. 'execution' 의 경우 특정 클래스의 메소드를 지정할 수 있다.
맨 앞 * 는 제한 접근자를 의미하고, 맨 뒤 * 는 클래스 이름과 메소드 이름이다.


            18.3 AOP 설정

AOP 설정은 스프링 2 버전 후 단단히 자동 Proxy 객체를 만들어주는 설정을 추가하면 된다.
프로젝트에 root-context.xml 의 네임 스페이스에 'aop' 와 'context' 를 추가한다.


    <!-- Aop Scan -->
	<context:annotation-config />
	<context:component-scan base-package="aop" />

	<!-- aspectJ -->
	<aop:aspectj-autoproxy />


<component-scan> 으로 'service, aop' 패키지를 스캔한다. 빈으로 등록된 후 <aop:aspectj-autoproxy /> 를 이용하여
LogAdvice 에 설정한 @Before 가 동작하게 된다.

정상적으로 등록된다면 SampleServiceImpl 클래스에서 AOP 가 적용된 후 아이콘이 추가된 것을 볼 수 있다.


        18.3.1 Java 설정 이용할 경우

스프링 설정을 Java 로 이용할 시 'service, aop' 패키지를 @ComponentScan 을 이용하고
@EnableAspectJAutoProxy 를 추가한다.


    @Configuration
    @ComponentScan(basePackages = {"sample", "service", "aop"})
    @EnableAspectJAutoProxy
    @MapperScan(basePackages = {"mapper"})
    public class RootConfig {...}


            18.4 AOP 테스트

정상적인 상황이면 SampleServiceImpl, LogAdvice 는 같이 묶여서 자동으로 Proxy 객체가 된다.
테스트 관련 폴더에 SampleServiceTests 클래스를 추가한다.


    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    // @ContextConfiguration(classes = {RootConfig.class})
    @Log4j
    public class SampleServiceTests {
        @Setter(onMethod_ = @Autowired)
        private SampleService service;

        @Test
        public void testClass() {
            log.info(service);
            log.info(service.getClass().getName());
        }
    }


AOP 설정을 한 Target 에 대해 Proxy 객체가 정상적으로 만들어 졌는지 확인한다.
<aop:aspectj-autoproxy /> 가 정상 동작하고, LogAdvice 에 설정 문제가 없으면 service 변수의 클래스는
단순히 SampleServiceImpl 의 인스턴스가 아닌 생성된 Proxy 클래스의 인스턴스가 된다.
testClass() 를 실행해 보면 다음과 같다.


    INFO : sample.SampleServiceTests - service.SampleServiceImpl@2ce86164
    INFO : sample.SampleServiceTests - service.SampleServiceImpl


단순히 SampleServiceImpl 클래스의 인스턴스같지만 toString() 결과로 세밀히 파악하려면 getClass() 를 이용하여 파악해야한다.
com.sun.proxy.$Proxy 는 JDK 의 다이나믹 프록시 기법이 사용된 결과이다.
이를 이용해 SampleServiceImpl 에 있는 코드를 실행하는 테스트 코드를 작성한다.


    @Test
    public void testAdd() throws Exception {
        log.info(service.doAdd("123", "456"));
    }


SampleServiceImpl 의 doAdd() 를 실행하면 LogAdvice 의 설정이 같이 작용되어 기록되야 한다.


    INFO : sample.SampleServiceTests - 579
    정보: ====================


        18.4.1 args 를 이용한 파라미터 추적

LogAdvice 가 SampleService 의 doAdd() 를 실행 전 간단한 로그를 기록하지만, 상황에 따라 해당 메소드에 전달되는 파라미터가
무엇인지 기록하거나, 예외가 발생할 시 어떤 파라미터에 문제가 있는지 알고 싶은 경우도 많다.

LogAdvice 에 적용된 @Before("execution(* service.SampleService*.*(..))") 은 어떤 위치에
Advice 를 적용할지 결정하는 Pointcut 인데, 설정 시에 args 를 이용하면 간단히 구할 수 있다.


    @Before("execution(* service.SampleService*.doAdd(String, String)) && args(str1, str2)")
    public void logBeforeWithParam(String str1, String str2) {
        log.info("str1: " + str1);
        log.info("str2: " + str2);
    }


logBeforeWithParam() 에서 'execution' 으로 시작하는 Pointcut 설정에 doAdd() 메소드를 명시하고,
파라미터의 타입을 지정했다. 뒤쪽 '&& args (..' 부분에 변수명을 지정하는데,
이 2 종류의 정보를 이용하여 logBeforeWithParam() 메소드의 파라미터를 설정하게 된다.

기존 테스트 코드 실행하면 단순 로그와 더불어 파라미터 역시 파악할 수 있다.


    1월 19, 2021 11:19:28 오후 aop.LogAdvice logBefore
    정보: ====================
    1월 19, 2021 11:19:28 오후 aop.LogAdvice logBeforeWithParam
    정보: str1: 123
    1월 19, 2021 11:19:28 오후 aop.LogAdvice logBeforeWithParam
    정보: str2: 456
    INFO : sample.SampleServiceTests - 579


'&& args' 는 간단히 파라미터를 찾아 기록하는데 유용하지만 파라미터가 다른 여러 메소드에 적용하는덴 간단하지 않은 단점이 있다.
이에 대한 문제는 조금 뒤 @Around 와 ProceedingJoinPoint 를 이용해 해결할 수 있다.


        18.4.2 @AfterThrowing

코드 실행 시 파라미터 값이 잘못되어 예외가 발생할 때가 있다.
@AfterThrowing 어노테이션은 지정된 대상이 예외를 발생할 때 동작하여 문제를 찾을 수 있도록 도와준다.


    @AfterThrowing(pointcut = "execution(* service.SampleService*.*(..))", throwing = "exception")
    public void logException(Exception exception) {
        log.info("Exception!!!");
        log.info("exception: " +exception);
    }


logException() 에 적용된 @AfterThrowing 은 'pointcut' 과 'throwing' 속성을 지정하고
변수 이름을 'exception' 으로 지정한다. 테스트 코드에 고의로 예외를 발생하여 테스트 해보자.


    @Test
    public void testAddError() throws Exception {
        log.info(service.doAdd("123", "ABC"));
    }


doAdd() 는 숫자로 변환 가능한 문자열을 지정해야 하는데 고의로 'ABC' 같은 문자를 전달한 다음의 로그이다.


    1월 19, 2021 11:26:19 오후 aop.LogAdvice logBefore
    정보: ====================
    1월 19, 2021 11:26:19 오후 aop.LogAdvice logBeforeWithParam
    정보: str1: 123
    1월 19, 2021 11:26:19 오후 aop.LogAdvice logBeforeWithParam
    정보: str2: ABC
    1월 19, 2021 11:26:19 오후 aop.LogAdvice logException
    정보: Exception!!!
    1월 19, 2021 11:26:19 오후 aop.LogAdvice logException
    정보: exception: java.lang.NumberFormatException: For input string: "ABC"


            18.5 @Around 와 ProceedingJoinPoint

AOP 로 구체적인 처리를 하고 싶다면 @Around 와 ProceedingJoinPoint 을 이용해야 한다.
@Around 는 직접 대상 메소드를 실행할 수 있는 권한을 가지고 있고, 메소드 실행 전과 실행 후에 처리가 가능하다.

ProceedingJoinPoint 는 @Around 와 같이 결합하여 파라미터나 예외 등을 처리할 수 있다.


    @Around("execution(* service.SampleService*.*(..))")
    public Object logTime(ProceedingJoinPoint pjp) {
        long start = System.currentTimeMillis();

        log.info("Target: " + pjp.getTarget());
        log.info("Param: " + Arrays.toString(pjp.getArgs()));

        // invoke method
        Object result = null;

        try {
            result = pjp.proceed();
        } catch (Throwable e) {
            // catch block
            e.printStackTrace();
        }

        long end = System.currentTimeMillis();

        log.info("TIME: " + (end - start));

        return result;
    }


logtime() 의 Pointcut 설정은 '...SampleService*.*(..)' 로 지정하여 특별히 ProceedingJoinPoint 라는 파라미터를 지정하는데,
ProceedingJoinPoint 는 AOP 대상이 되는 target 이나 파라미터 등을 파악할 뿐만 아니라 직접 실행을 결정할 수도 있다.
@Before 등과 달리 @Around 가 적용되는 메소드는 리턴 타입이 void 가 아닌 타입으로 지정하고, 실행 결과도 반환하는 형태로
작성해야 한다.


    1월 19, 2021 11:55:00 오후 aop.LogAdvice logTime
    정보: Target: service.SampleServiceImpl@4985cbcb
    1월 19, 2021 11:55:00 오후 aop.LogAdvice logTime
    정보: Param: [123, 456]
    1월 19, 2021 11:55:00 오후 aop.LogAdvice logBefore
    정보: ====================
    1월 19, 2021 11:55:00 오후 aop.LogAdvice logBeforeWithParam
    정보: str1: 123
    1월 19, 2021 11:55:00 오후 aop.LogAdvice logBeforeWithParam
    정보: str2: 456
    1월 19, 2021 11:55:00 오후 aop.LogAdvice logTime
    정보: TIME: 21
    INFO : sample.SampleServiceTests - 579


결과를 보면 @Around 가 먼저 동작하고 @Before 등이 실행된 후 메소드가 실행되는데 걸린 시간을 로그로 기록되는 것을 볼 수 있다.