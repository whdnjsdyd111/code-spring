스프링 MVC 의 Controller 의 특징은 다음과 같다.


    - HttpServletRequest, HttpServletResponse 를 거의 필요로 하지 않는 기능 구현

    - 다양한 타입의 파라미터, 리턴 타입 처리 및 사용 가능

    - GET 방식, POST 방식 등 전송 방식에 대한 처리 어노테이션으로 처리 가능

    - 상속/인터페이스 방식 대신 어노테이션만으로 설정 가능


            6.1 @Controller, @RequestMapping

프로젝트 내에 controller 패키지에 SampleController 클래스를 작성한다.


    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;

    @Controller
    @RequestMapping("/sample/*")
    public class SampleController {

    }


SampleController 클래스 선운부에 @Controller 라는 스프링 MVC 어노테이션을 적용.
작성된 SampleController 는 스프링 빈에 등록되는데 servlet-context.xml 에


    <context:component-scan base-package="controller" />


<context:component-scan> 태그를 이용해서 패키지를 조사하도록 설정함.
스프링 빈 설정이 된 어노테이션을 가진 클래스들을 파악하고 이를 객체로 생성하고 관리한다.
(이클립스에서는 작게 's' 표시가 나타남)

@RequestMapping 은 현재 클래스의 모든 메소드에 기본적인 URL 경로가 됨.
예로 '/sample/*' 경로로 지정하면 다음 URL 은 모두 SampleController 에서 처리힘


    - /sample/aaa
    - /sample/bbb


@RequestMapping 어노테이션은 클래스 선언과 메소드 선언에 사용할 수 있음.


    import lombok.extern.java.Log;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;

    @Controller
    @RequestMapping("/sample/*")
    @Log
    public class SampleController {

        @RequestMapping("")
        public void basic() {
            log.info("basic..................");
        }
    }


Lombok 의 로그 어노테이션을 이용하여 스프링이 인식하는 정보를 출력할 수 있다.
로그를 살펴보면 위의 경우는 '/' 와 '/sample/*' 로 호출 가능한 경로라는 것을 확인할 수 있다.


            6.2 @RequestMapping 변화

@Controller 어노테이션은 추가적인 속성을 지정할 수 없지만, @RequestMapping 은 여러 속성 지정이 가능.
많이 사용하는 방식은 method 속성으로, GET 방식과 POSt 방식으로 구분하여 사용 가능하다.

스프링 4.3 부터 @RequestMapping 을 줄여 @GetMapping, @PostMapping 으로 축약형이 사용 가능하다.


    @RequestMapping(value = "/basic", method = {RequestMethod.GET, RequestMethod.POST})
    public void basicGet() {
        log.info("basic get..............");
    }

    @GetMapping("/basicOnlyGet")
    public void basicGet2() {
        log.info("basic get only get.....");
    }


@RequestMapping 은 GET, POST 방식을 모두 지원하면 배열로 처리할 수 있다.
최근 PUT, DELETE 등 방식도 점점 많이 사용되며 @GetMapping 의 경우는 GET 방식만 사용할 수 있어 간편하면서도 제한이 있다.


            6.3 Controller 파라미터 수집

Controller 작성 시 편리한 기능은 파라미터가 자동 수집되며 매번 request.getParameter() 을 사용하지 않아도 된다.

예제를 위해 'src/main/java' 에 domain 패키지를 작성하여 SampleDTO 클래스를 작성한다.


    import lombok.Data;

    @Data
    public class SampleDTO {

        private String name;
        private int age;
    }


SampleController 메소드가 SampleDTO 를 파라미터로 사용 시 자동으로 setter 메소드가 동작하여 파라미터를 수집.
(확인하고 싶다면 직접 SET 메소드를 제작하여 간단한 로그를 출력하여 확인할 수 있음)


    @Controller
    @RequestMapping("/sample/*")
    @Log
    public class SampleController {

        ...

        @GetMapping("/ex01")
        public String ex01(SampleDTO dto) {
            log.info("" + dto);
            return "ex01";
        }
    }


SampleController 경로가 '/sample/*' 이므로 ex01() 메소드를 호출하는 경로는 '/sample/ex01' 이 된다.
@GetMapping 이 사용되어 필요에 따라 파라미터를 URL 뒤에 '?name=AAA&age-10' 와 같이 호출할 수도 있다.


    controller.SampleController.ex01 SampleDTO(name=AAA, age=10)


        6.3.1 파라미터 수집과 변환

Controller 가 파라미터를 수집하는 방식은 파라미터 타입에 따라 자동 변환하는 방식을 이용함.
예로 int 타입의 age 가 자동으로 숫자로 변환된 것을 볼 수 있다.
만일 기본 자료형이나 문자열 등을 이용하면 파라미터 타입을 맞게 선언해주는 방식을 사용할 수 있다.


    @GetMapping("/ex02")
    public String ex02(@RequestParam("name") String name, @RequestParam("age") int age) {
        log.info("name" + name);
        log.info("age" + age);

        return "ex02";
    }


ex02() 메소드에 @RequestParam 으로 파라미터 이름과 변수 이름을 동일하게 사용했는데 사실 동일할 필요는 없다.

브라우저에서 파라미터 ?name=AAA&age=10 을 호출하면 이전과 동일한 결과를 얻을 수 있다.


    controller.SampleController.ex02 nameAAA
    controller.SampleController.ex02 age10


        6.3.2 리스트, 배열 처리

동일한 이름의 파라미터가 여러 개일 경우 ArrayList<> 를 이용해 처리가 가능.


    @GetMapping("/ex02List")
    public String ex02List(@RequestParam("ids") ArrayList<String> ids) {
        log.info("ids" + ids);

        return "ex02List";
    }


파라미터 타입을 보고 객체를 생성하니 파라미터의 타입은 List<> 와 같은 인터페이스 타입이 아닌 실제적인 클래스를 지정한다.
위 경우 'ids' 파라미터가 여러개 전달되도 ArrayList<String> 이 생성되어 자동으로 수집된다.
'?ids=111&ids=222&ids=333' 와 같이 호출해보자.


    controller.SampleController.ex02List ids[111, 222, 333]


배열의 경우도 동일하게 처리할 수 있다.


    @GetMapping("/ex02Array")
    public String ex02Array(@RequestParam("ids") String[] ids) {
        log.info("array ids" + Arrays.toString(ids));

        return "ex02Array";
    }


        6.3.3 객체 리스트

제대로 데이터를 처리하기 위해 SampleDTO 와 같은 객체를 여러 개 처리해야 한다면 SampleDTO 를 여러 개 처리하는 SampleDTO 의 리스트를
포함하는 SampleDTOList 클래스를 설계한다.


    import lombok.Data;

    import java.util.ArrayList;
    import java.util.List;

    @Data
    public class SampleDTOList {
        private List<SampleDTO> list;

        public SampleDTOList() {
            list = new ArrayList<>();
        }
    }


SampleController 에서 SampleDTOList 타입을 파라미터로 사용하는 메소드를 작성.


    @GetMapping("/ex02Bean")
    public String ex02Bean(SampleDTOList list) {
        log.info("list dtos: " + list);

        return "ex02Bean";
    }


파라미터는 '[인덱스]' 형식으로 처리할 수 있다.


    '?list[0].name=aaa&list[2].name=bbb'


톰캣 버전에 따라 [] 문자는 허용되지 않을 수 있기 때문에 JavaScript 를 이용할 경우 encodeURIComponent() 방법으로
해결할 수 있거나 '[' 는 '%5B' 로, ']' 는 '%5D' 로 변경하여 처리할 수 있다.


    '?list%5B0%5D.name=aaa&list%5B1%5D.name=bbb&list%5B2%5D.name=CCC'


위 URL 을 호출하면 다음 객체가 생성되는 것을 볼 수 있다.


    list dtos: SampleDTOList(list=[SampleDTO(name=aaa, age=0), SampleDTO(name=bbb, age=0), SampleDTO(name=CCC, age=0)])


        6.3.4 @InitBinder

파라미터 수집을 'binding(바인딩)' 이라 한다.
변환 가능한 데이터는 자동 변환되지만 경우에 따라 파라미터를 변환 처리해야 할 경우도 생긴다.
예를 들면 '2018-01-01' 을 java.util.Date 타입으로 변환하는 예이다.
스프링 Controller 는 파라미터 바인딩 시 @InitBinder 를 이용해 변환 처리를 할 수 있다.

'src/main/java/domain' 패키지에 TodoDTO 클래스를 작성한다.


    import lombok.Data;

    import java.util.Date;

    @Data
    public class TodoDTO {
        private String title;
        private Date dueDate;
    }


TodoDTO 의 dueDate 는 Date 타입으로 '2018-01-01' 데이터가 들어오면 에러가 생길 것이다. 이것을 @InitBinder 로 해결한다.


    @InitBinder
    public void initBinder(WebDataBinder binder) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        binder.registerCustomEditor(java.util.Date.class, new CustomDateEditor(dateFormat, false));
    }

    ...

    @GetMapping("/ex03")
    public String ex03(TodoDTO todo) {
        log.info("todo: " + todo);
        return "ex03";
    }


'?title=test&dueDate=2018-01-01' 와 같이 호출하면 서버는 정상 처리한다.


    TodoDTO(title=test, dueDate=Mon Jan 01 00:00:00 KST 2018)


반면 @InitBinder 처리가 안되면 400 에러가 발생할 수 있다.(요청 구문이 잘못된 경우)


        6.3.5 @DateTimeFormat

@InitBinder 로 날짜 변환이 가능하지만, @DateTimeFormat 을 적용해도 변환할 수 있다.
(@DateTimeFormat 이용 시 @InitBinder 는 필요 없음)


    @DateTimeFormat(pattern = "yyyy/MM/dd")
    private Date dueDate;


문자열 'yyyy/MM/dd' 형식에 맞게 요청 시 자동으로 날짜 타입으로 변환 된다.


            6.4 Model 데이터 전달자

Controller 는 Model 이란 타입을 파라미터로 지정할 수 있다.
Model 은 컨트롤러에 데이터를 담아 JSP 에 전달하는 존재이다. 이를 이용해 JSP 와 같은 뷰(View)로 데이터를 보낼 수 있다.

Model 은 모델 2 방식에서 사용하는 request.setAttribute() 와 유사한 역할을 한다.
Servlet 코드로 다음과 비슷하다.


    Servlet 에서 모델 2 방식으로 데이터 전달하는 방법

    request.setAttribute("servletTime", new java.util.Date());

    RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/jsp/home.jsp");
    dispatcher.forward(request, response);


    스프링 MVC 에서 Model 로 데이터 전달

    public String home(Model model) {
        model.addAttribute("serverTime", new java.util.Date());

        return "home";
    }


스프링 MVC 가 Model 객체에 데이터를 담아 보내주기 때문에 개발자는 데이터를 담는 작업만 완료하면 된다.

Model 을 사용해야 하는 경우 주로 Controller 에 전달된 데이터로 추가적인 데이터를 가져와야하는 상황이다.
예로 다음과 같다.


    - 리스트 페이지 번호를 파라미터로 전달받고, 실제 데이터를 View 로 전달해야 하는 경우
    - 파라미터들에 대한 처리 후 결과를 전달해야 하는 경우


        6.4.1 @ModelAttribute 어노테이션

웹페이지 구조는 Request 에 전달된 데이터를 가지고 필요할 때 추가 데이터를 생성해 전달하는 방식이다.
Model 은 파라미터로 전달된 데이터는 존재하지 않지만 화면에 필요한 데이터를 전송한다.
예로 페이지 번호는 파라미터지만 결과 데이터는 Model 로 담아 전달한다.

스프링 MVC Controller 는 Java Beans 규칙인 생성자가 없거나 빈 생성자를 가지며, getter/setter 를 가진 클래스로 전달한다.
반면 기본 자료형은 파라미터로 선언해도 기본적으로 화면까진 전달되지 않는다.


    @GetMapping("/ex04")
    public String ex04(SampleDTO dto, int page) {
        log.info("dto: " + dto);
        log.info("page: " + page);

        return "/sample/ex04";
    }


'/WEB-INF/views/sample' 폴더에 ex04.jsp 를 작성하고 실행해보자.


    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <title>Title</title>
    </head>
    <body>
        <h2>SAMPLEDTO ${sampleDTO}</h2>
        <h2>PAGE ${page}</h2>
    </body>
    </html>


서버를 실행하고 '?name=aaa&age=11&page=9' 와 같이 호출하면 화면에 SampleDTO 만 전달되고 int 타입인 page 는 전달되지 않았다.

@ModelAttribute 는 받은 파라미터를 강제로 Model 에 담아 전달하는 어노테이션이다.
기존 코드를 다음 형태로 수정해보자.


    @GetMapping("/ex04")
    public String ex04(SampleDTO dto, @ModelAttribute("page") int page) {
        log.info("dto: " + dto);
        log.info("page: " + page);

        return "/sample/ex04";
    }


@ModelAttribute 가 붙은 파라미터는 브라우저를 통해 호출되면 ${page} 가 출력되는 것을 볼 수 있다.


        6.4.2 RedirectAttributes

Model 타입과 스프링 MVC 가 자동 전달해 주는 타입 중 RedirectAttributes 타입이 존재한다.
RedirectAttributes 는 특별하게 일회성 데이터를 전달하는 용도이다.
RedirectAttributes 는 기존에 Servlet 에선 response.sendRedirect() 를 사용할 때와 동일한 용도로 사용된다.


    response.sendRedirect("/home?name=aaa&age=10");


스프링 MVC 를 이용할  경우 다음과 같이 변경된다.


    rttr.addFlashAttribute("name", "AAA");
    rttr.addFlashAttribute("age", 10);

    return "redirect:/";


RedirectAttributes 는 Model 과 같이 파라미터로 선언하여 사용하고, addFlashAttributes(이름.값) 메소드를 이용해서 화면에
한 번만 사용하고 다음엔 사용되지 않는 데이터를 전달하기 위해 사용한다.
RedirectAttributes 는 PART 3 에서 자세히 알아본다.


            6.5 Controller 리턴 타입

스프링 MVC 는 기존 상속이나 인터페이스 방식에서 어노테이션으로 바뀐 후 리턴 타입이 자유로워 졌다.

    - String : jsp 이용할 경우 jsp 파일 경로와 이름을 나타낸다.
    - void : 호출하는 URL 와 동일한 이름의 jsp 를 의미
    - VO, DTO 타입 : 주로 JSON 타비의 데이터를 만들어 반환하는 용도
    - ResponseEntity 타입 : response 할 때 Http 헤더 정보와 내용을 가공하는 용도로 사용
    - Model, ModelAndView - Model 로 데이터 반환이나 화면까지 같이 지정할 때 사용
    - HttpHeaders : 응답에 내용 없이 Http 헤더 메시지만 전달하는 용도로 사용


        6.5.1 void 타입

메소드 리턴 타입을 void 로 지정하는 경우 일반적인 경우엔 해당 URL 경로를 그대로 jsp 파일 이름으로 사용하게 된다.


    @GetMapping("/ex05")
    public void ex05() {
        log.info("/ex05..............");
    }

브라우저에 SampleController 경로에 ex05() 의 경로를 합쳐 '/sample/ex05' 를 호출하면
페이지가 존재하지 않아 에러가 나지만 '/WEB-INF/views/sample/ex05.jsp' 를 호출한다.


        6.5.2 String 타입

String 타입은 다른 화면을 보여줄 필요가 있을 때 사용한다. (if ~ else 같은 처리가 필요)
일반적으로 String 타입은 JSP 파일의 이름을 의미한다. HomeController 를 보면 String 타입으로 반환하는 것을 볼 수 있다.


    @RequestMapping(value = "/", method = RequestMethod.GET)
    public String home(Locale locale, Model model) {
        logger.info("Welcome home! The client locale is {}.", locale);

        Date date = new Date();
        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);

        String formattedDate = dateFormat.format(date);

        model.addAttribute("serverTime", formattedDate );

        return "home";
    }


home() 메소드는 'home' 문자열을 리턴하여 '/WEB-INF/views/home.jsp' 경로가 된다.
String 타입엔 다음 키워드를 붙일 수 있다.


    - redirect : 리다이렉트 방식으로 처리
    - forward : 포워드 방식으로 처리


        6.5.3 객체 타입

Controller 메소드 리턴 타입을 VO(Value Object) 나 DTO(Date Transfer Object) 등의 객체 타입을 지정할 수 있는데
이 경우 주로 JSON 데이터로 사용한다.

우선 이를 위해 jackson-databind 라이브러리를 pom.xml 에 추가한다.


        <!-- JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.11.3</version>
        </dependency>


SampleController 에 아래 메소드를 추가한다.


    @GetMapping("/ex06")
    public @ResponseBody SampleDTO ex06() {
        log.info("/ex06 ................");

        SampleDTO dto = new SampleDTO();
        dto.setAge(10);
        dto.setName("홍길동");

        return dto;
    }


스프링 MVC 는 자동으로 브라우저에 JSON 타입으로 객체를 변환하여 처리된다.
스프링 MVC 는 자동으로 JSON 타입으로 객체를 변환하여 전달하게 된다.


    { "name": "홍길동", "age": 10 }


개발자 도구를 보면 MIME 타입이 'application/json' 으로 처리되는 것을 볼 수 있다.
만일 Jackson-databind 라이브러리가 포함되지 않으면 에러가 발생할 것이다.
스프링 MVC 가 알맞게 변환하여 전송하며 별도의 JSON 설정이 필요없다.


        6.5.4 ResponseEntity 타입

Web 을 다루면 HTTP 프로토콜 헤더를 다룰 경우가 생긴다.
스프링 MVC 는 Http 를 직접 핸들링하지 않아도 가능하도록 설정되어 ResponseEntity 를 통해 원하는 헤더 정보나 데이터를 전송할 수 있다.


    @GetMapping("/ex07")
    public ResponseEntity<String> ex07() {
        log.info("/ex07 ...................");

        // { "name": "홍길동" }
        String msg = "{\"name\": \"홍길동\"}";

        HttpHeaders header = new HttpHeaders();
        header.add("Content-type", "application/json;charset=UTF-8");

        return new ResponseEntity<>(msg, header, HttpStatus.OK);
    }


ResponseEntity 는 HttpHeaders 객체를 같이 전달할 수 있다. 이를 통해 원하는 HTTP 헤더 메시지를 가공하는 것이 가능하다.
ex07() 의 경우 브라우저에 JSON 타입과 200 OK 상태 코드를 전송한다.


        6.5.5 파일 업로드 처리

Servlet 3.0 전까진 commons 업로드나 cos.jar 로 처리해왔다.
이후에는 톰캣에 업로드 파일 처리 기능이 추가되어 별도의 라이브러리가 필요하진 않다.

하지만 3.0 이상의 파일 업로드 방식은 후에 배우고 지금은 commons-fileupload 를 이용한다.


    <dependency>
        <groupId>commons-fileupload</groupId>
        <artifactId>commons-fileupload</artifactId>
        <version>1.3.1</version>
    </dependency>


라이브러리 추가 후 C 드라이브에 업로드될 폴더 upload/tmp 를 생성한다.


    servlet-context.xml 설정

servlet-context.xml 의 파일 업로드 빈 설정의 경우 'multipartResolver' 로 정확히 지정해야 한다.


	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="utf-8" />
		<!-- 1024 * 1024 * 10 bytes 10MB -->
		<beans:property name="maxUploadSize" value="104857560" />
		<!-- 1024 * 1024 * 2 bytes 2MB -->
		<beans:property name="maxUploadSizePerFile" value="2097152" />
		<beans:property name="uploadTempDir" value="file:/C:upload/tmp" />
		<beans:property name="maxInMemorySize" value="10485756" />
	</beans:bean>


maxUploadSize 는 한 번의 Request 로 전달될 수 있는 최대 크기이고,
maxUploadSizePerFile 은 하나의 파일 최대 크기,
maxInMemorySize 는 메모리 상에 유지하는 최대 크기를 의미한다.
이 크기 이상의 데이터는 uploadTempDir 에 임시 파일의 형태로 보관된다.
uploadTempDir 에서 절대 경로를 이용하려면 URI 형태로 제공해야 하기 때문에 'file:/' 로 시작한다.
defaultEncoding 은 업로드 하는 파일의 이림이 한글일 경우 깨지는 문제를 처리한다.

SampleController 에서 다음과 같이 get 방식으로 파일을 업로드할 화면을 처리한다.


    @GetMapping("/exUpload")
    public void exUpload() {
        log.info("/exUpload ..................");
    }


파일 업로드 해 볼 /WEB-INF/views/sample/exUpload.jsp 파일을 작성한다.


    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <title>Title</title>
    </head>
    <body>
    <form action="/sample/exUploadPost" method="post" enctype="multipart/form-data" >
        <div>
            <input type="file" name="files">
        </div>
        <div>
            <input type="file" name="files">
        </div>
        <div>
            <input type="file" name="files">
        </div>
        <div>
            <input type="file" name="files">
        </div>
        <div>
            <input type="file" name="files">
        </div>
        <div>
            <input type="submit" >
        </div>
    </form>
    </body>
    </html>


exUpload.jsp 는 여러 파일을 업로드하는 예제로 <form> 태그의 action, method, enctype 속성에 주의해야 한다.

exUpload.jsp 이후 SampleController 에 메소드를 추가한다.


    @PostMapping("/exUploadPost")
    public void exUploadPost(ArrayList<MultipartFile> files) {
        files.forEach(file -> {
            log.info("--------------------------------");
            log.info("name: " + file.getOriginalFilename());
            log.info("size: " + file.getSize());
        });
    }


스프링 MVC 가 전달되는 파라미터가 동일한 이름으로 여러 개 존재하면 배열로 처리가 가능하므로 MultipartFile 배열 타입으로 작성한다.


    Java 설정 이용할 경우

Java 설정일 경우 @Bean 에다가 id 속성을 같이 부여한다.


    @Bean(name = "multipartResolver")
    public CommonsMultipartResolver getResolver() throws IOException {
        CommonsMultipartResolver resolver = new CommonsMultipartResolver();

        // 10MB
        resolver.setMaxUploadSize(1024 * 1024 * 10);

        // 2MB
        resolver.setMaxUploadSizePerFile(1024 * 1024 * 2);

        // 1MB
        resolver.setMaxInMemorySize(1024 * 1024);

        // temp upload
        resolver.setUploadTempDir(new FileSystemResource("C:\\upload\\tmp"));

        resolver.setDefaultEncoding("UTF-8");

        return resolver;
    }


            6.6 Controller 의 Exception 처리

Controller 예외 상황을 고려하면 처리할 작업량이 상당히 늘어난다.
스프링 MVC 는 이 작업을 다음 방식으로 처리할 수 있다.


    - @ExceptionHandler 와 @ControllerAdvice 를 이용한 처리
    - @ResponseEntity 를 이용한 예외 메시지 구성


        6.6.1 @ControllerAdvice

@ControllerAdvice 는 후에 배울 AOP(Aspect-Oriented-Programming) 를 이용하는 방식이다.
AOP 에 대해 별도의 파트에 설명하겠지만, 간단히 언급하면 핵심 로직은 아니지만 프로그램에 필요한 '공통 관심사(cross concern)'는
분리하자는 개념이다. Controller 작성 시 모든 예외사항을 전부 핸들링해야 하면 중복적인 많은 코드를 작성해야 하지만,
AOP 방식을 이용하면 공통 예외사항에 별도로 @ControllerAdvice 를 이용해 분리하는 방식이다.

예제를 위해 'src/main/java/exception' 패키지를 생성하고, CommonExceptionAdvice 클래스를 생성한다.


    import lombok.extern.java.Log;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    @ControllerAdvice
    @Log
    public class CommonExceptionAdvice {
        @ExceptionHandler(Exception.class)
        public String except(Exception ex, Model model) {
            log.info("Exception ..." + ex.getMessage());
            model.addAttribute("exception", ex);
            log.info(model.toString());
            return "error_page";
        }
    }


위 클래스는 @ControllerAdvice 어노테이션과 @ExceptionHandler 어노테이션을 사용한다.
@ControllerAdvice 는 객체가 스프링 컨트롤러에 발생하는 예외를 처리하는 존재임을 명시하는 용도고,
@ExceptionHandler 는 메소드가 들어가는 예외 타입을 처리한다.
@ExceptionHandler 어노테이션은 속성에 Exception 클래스를 지정할 수 있고 위의 경우 Exception.class 를 지정하여
모든 예외 처리가 except() 만으로 처리할 수 있다.

특정 타입의 예외를 다룰 시 Exception.class 대신 구체적인 예외 클래스를 지정해야 한다.
JSP 화면에서도 구체적 메시지를 보고 싶을 시 Model 을 이용하여 전달하는 것이 좋다.
exception 패지키는 servlet-context.xml 에 인식하지 않아 <component-scan> 으로 패키지 내용을 조사하게 해야한다.


	<context:component-scan base-package="controller" />
	<context:component-scan base-package="exception" />


CommonExceptionAdvice 의 except() 리턴값은 JSP 경로가 된다.
error_page.jsp 이므로 /WEB-INF/views 폴더에 작성한다.


    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <title>Title</title>
    </head>
    <body>
        <h4><c:out value="${exception.getMessage()}" /></h4>

        <ul>
            <c:forEach items="${exception.getStackTrace()}" var="stack">
                <li><c:out value="${stack}" /></li>
            </c:forEach>
        </ul>
    </body>
    </html>


'?name=aaa&age=bbb&page=9' 와 같이 age 값을 고의로 문자로 전송해보자.


    java.lang.NumberFormatException: For input string: "bbb"

    org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(...)
    org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(...)


    Java 설정 이용할 경우

ServletConfig 클래스에 "exception" 패키지를 인식해야 하므로 아래와 같이 추가한다.



    @EnableWebMvc
    @ComponentScan(basePackages = {"controller", "exception"})
    public class ServletConfig implements WebMvcConfigurer {...}


        6.6.2 404 에러 페이지

WAS 구동 중 흔한 에러는 '404' 와 '500' 에러 코드이다. 500 는 'Internal Server Error' 이므로 @ExceptionHandler 로
이용하여 처리 가능하지만, 잘못된 URL 를 호출하여 404 에러 메시지일 경우 다르게 처리하는 것이 좋다.

서블릿이나 JSP 이용한 개발 시 web.xml 을 이용해 별도의 에러 페이지를 지정할 수 있다.
에러 발생 시 추가 작업을 하긴 어렵기 때문에 스프링을 이용하여 404 같은 WAS 내부 에러를 처리하는 것을 알아두자.

스프링 MVC 의 모든 요청은 DispatcherServlet 을 이용해서 처리되므로 404 에러도 같이 처리할 수 있도록 web.xml 을 수정한다.


	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>


CommonExceptionAdvice 에는 다음 메소드를 추가한다.


    @ExceptionHandler(NoHandlerFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public String handler404(NoHandlerFoundException ex) {
        return "custom404";
    }


에러 메시지는 custom404.jsp 를 작성하여 처리한다.


    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <title>Title</title>
    </head>
    <body>
        <h1>해당 URL은 존재하지 않습니다.</h1>
    </body>
    </html>


브라우저에 존재하지 않는 URL 을 호출하여 custom404.jsp 페이지가 보이게 해보자.


    Java 설정 이용할 경우

web.xml 에서 throwExceptionIfNoHandlerFound 을 설정하기 위해선 서블릿 3.0 이상만 이용하고
WebConfig 클래스는 다음과 같이 추가한다.


    @Override
    protected void customizeRegistration(ServletRegistration.Dynamic registration) {
        registration.setInitParameter("throwExceptionIfNoHandlerFound", "true");
    }


