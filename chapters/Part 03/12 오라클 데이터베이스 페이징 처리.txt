목록 페이지에 모든 데이터를 한 페이지에 보여주면 성능이 좋지 않으니 페이징 처리가 필요하다.

일반적으로 번호로 이용하거나 계속 보기 형태로 구현된다.
번호 페이징은 과거 웹 초기부터 이어온 방식이고 '계속 보기' 는 Ajax 와 앱이 등장한 이후
'무한 스크롤' 이나 '더 보기' 같은 형태로 구현된다. 예제에선 번호 페이징으로 실습한다.


            12.1 order by 의 문제

데이터베이스 이용 시 빠른 처리, 필요한 만큼의 데이터를 가져오는 것이다.
모든 웹 페이지는 최소한의 필요한 데이터를 가져오기 위해 페이징을 사용한다.

수백 만개의 데이터를 매번 정렬하면 오래 걸리면서 성능 부하가 일어나기 때문에 빠른 동작이 필요한 SQL 은 order by 를 이용하는 작업을
가능하면 하지말아야 한다. order by 는 데이터가 많을 시 성능 저하가 일어나 데이터가 적은 경우와 정렬을 빠르게 할 수 있는 방법이 아니면
order by 는 주의한다.


        12.1.1 실행 계획과 order by

오라클 페이징 처리를 제대로 이해하기 위해 반드시 알아 두어야하는 것은 실행 계획(execution plan) 이다.
말 그대로 'SQL 데이터베이스에서 어떻게 처리할 것인가?' 이다.
여러 단계를 거쳐 SQL 을 어떤 순서와 방식으로 처리할 지 계획을 세우게 된다.

데이터베이스에 전달된 SQL 문은 아래 과정을 거친다.


    SQL 파싱
        ↓
    SQL 최적화
        ↓
    SQL 실행


SQL 파싱 단계는 오류가 있는지 실행 대상 객체가 존재하는지 검사한다.

SQL 최적화 단계에선 SQL 실행되는 비용을 계산한다. 이때 실행 계획을 세우게 된다.

SQL 실행 단계에선 세워진 실행 계획으로 메모리상 데이터를 읽거나 물리적인 공간에 데이터를 로딩하는 작업을 하게 된다.
개발자 도구나 SQL Plus 등으로 특정 SQL 실행 계획을 알아 볼 수 있다.
SQL Developer 에선 간단히 실행 계획을 확인할 수 있다.

좌측 상단에 SQl 에 대해 '실행 계획' 을 쉽게 볼 수 있는 버튼이 있다.
실행 계획을 보면 트리 구조로 방금 실행한 SQL 이 어떻게 처리된 것인지 알려준다.
흔히 SQL 튜닝한 작업을 보며 효과적으로 판단할 수 있다.

간단히 실행 계획을 보는 방법은 '안쪽에서 바깥으로, 위에서 아래로' 보면 된다.
'SELECT * FROM tbl_board WHERE bno > 0' 로 실행 하면 'FULL' 로 접근하고 정렬했다는 것을 확인할 수 있다.
이는 모든 테이블을 스캔했다는 의미가 된다. 실행 계획을 세우는 것은 데이터 양이나 제약 조건 등에 따라
데이터베이스 실행 계획을 다르게 작성하기 위함이다.

테스트를 위해 데이터가 많아지기 위해 아래 SQL 을 여러번 실행하여 데이터를 수백만 개로 만든 후 커밋한다.


    -- 재귀 복사를 통해 데이터 개수를 늘린다. 반복하여 여러 번 실행
    INSERT INTO tbl_board (bno, title, content, writer)
    (SELECT seq_board.NEXTVAL, title, content, writer FROM tbl_board);


위 insert 문을 여러 번 실행하여 현재 tbl_board 테이블에 데이터 수만큼 다시 INSERT 가 진행된다.
이를 통해 약 50만건의 데이터를 넣어준다.

commit 후 'SELECT COUNT(*) FROM tbl_board' 를 실행해 보면 데이터 수가 엄청 나게 늘어난 것을 확인할 수 있다.

데이터가 많아지면 그만큼 시간을 소모하게 되며 고의로 bno 란 컬럼에 1 을 추가한 값을 역순으로 정렬하는 SQL 을 만든다면
다음과 같다.


    SELECT * FROM tbl_board ORDER BY bno + 1 DESC; (약 3초)


연산 차이가 있지만 실행 시간이 많이 차이나게 된다.


    SELECT * FROM tbl_board WHERE bno > 0; (약 0.004초)


기존 SQL 이 tbl_board 테이블 전체를 스캔했지만 이번엔 PK_BOARD 라는 것으로 접근하고 기존과 달리
맨위의 SORT 과정이 없는 것을 볼 수 있다.

이것을 이해하기 위해선 인덱스(index) 를 알아둘 필요가 있다.


            12.2 order by 보다는 인덱스

데이터가 많을 때 정렬한다면 문제가 된다는 사실을 알았고, 이를 해결하기 위해 '인덱스(index)' 를 이용하여 정렬을 생략하는 방법이다.
'인덱스' 라는 이미 정렬된 구조를 이용하여 정렬을 하지 않아도 되는 방법이다.


    SELECT
        /*+ INDEX_DESC(tbl_board pk_board) */
        *
    FROM tbl_board WHERE bno > 0;


위 SQL 실행 결과는 테이블 전체 조회하고 정렬된 결과를 가져와 실행 시간에 엄청나게 차이가 나게 된다.

SQL 실행 계획에서 주의깊게 볼 부분은 SORT 를 하지 않았고, tbl_board 바로 접근이 아닌 pk_board 로 접근한점,
RANGE SCAN DESCENDING, BY INDEX ROWID 로 접근한 점이다.


        12.2.1 PK_BOARD 인덱스

tbl_board 테이블을 생성할 때 SQL 을 살펴 보자.


    CREATE TABLE tbl_board (
      bno NUMBER(10, 0),
      title VARCHAR2(200) NOT NULL,
      content VARCHAR2(2000) NOT NULL,
      writer VARCHAR2(50) NOT NULL,
      regdate DATE DEFAULT SYSDATE,
      updatedate DATE DEFAULT SYSDATE
    );

    ALTER TABLE tbl_board ADD CONSTRAINT pk_board PRIMARY KEY(bno);


제약조건으로 PK 를 지정 후 'pk_board' 라고 지정했다. 이는 '식별자' 와 '인덱스' 의 의미를 가진다.

'인덱스' 는 말 그대로 '색인' 이다. 도서로 예를 들면 모든 도서를 찾을 필요 없이 색인을 통해 바로 찾는 식이다.
이를 통해 내용을 위 혹은 반대로 찾아나가는데 이를 '스캔' 이라고 표현한다.
그리고 '인덱스' 와 ROWID 라는 연결 고리와 함께 존재하며 모든 데이터는 자신만의 주소를 가지고 있다.

SQL 을 통해 100번 데이터를 찾고자 하면 'WHERE bno = 100' 라는 조건을 주어 해당 색인에서 주소를 찾아 접근하는 방식을 이용하게 된다.
실행 계획을 살펴보면 인덱스로 100번 데이터의 ROWID 를 찾고 'BY INDEX ROWID' 로 되어 있는 말 그대로 ROWID 로 접근하게 된다.


            12.3 인덱스를 이용한 정렬

인덱스는 '정렬되어 있다는 점' 이 중요하다. 정렬이 이미되어 SORT 를 생략할 수 있다.

'bno 역순 정렬' 이 원한다면 이미 정렬된 인덱스로 뒤에서 부터 찾아 올라가는 방식이다.
'뒤에서 올라간다' 는 개념은 'DESCENDING' 이다. 실행한 bno 의 역순으로 데이터를 가져올 때 실행 계획을 다시 살펴본다.
PK_BOARD 인덱스에 DESCENDING 을 하고 있는데 역순으로 찾아 가장 큰 값을 가진 bno 부터 찾는다.

예를 더 들어 'bno 순서로 정렬해 달라' 고 요구 할 시 PK_BOARD 인덱스가 앞에서부터 찾아서 내려가는 구조를 이용하는 것이 효율적이다.
PK_BOARD 인덱스를 먼저 접근하고, tbl_board 를 이용하는 것을 볼 수 있는데, SORT 가 없어 거의 0초에 가까운 성능을 보여준다.
실무에서도 우선적으로 '인덱스' 를 작성하여 고민해야 한다.


        12.3.1 인덱스와 오라클 힌트(hint)

오라클은 select 문을 전달 시 '힌트(hint)' 라는 것을 사용할 수 있다. 말그대로 '지금 내가 전달한 select 문을 이렇게 실행해 줘'
라는 힌트이다. 특이하게 힌트 구문은 에러가 나도 SQL 실행에 지장을 주지 않는다. 따라서 힌트를 이용할 경우
실행 계획을 통해 원하는 대로 SQl 이 실행되는지 확인하는 습관을 가져야 한다.

게시물 목록은 시간 역순으로 나와야 하므로 'ORDER BY bno DESC' 같은 구문을 추가할 수 있다.
문제는 데이터베이스에 위 조건은 상황에 따라 모든 데이터를 정렬하는 방식으로 사용될 수 있다.

반면 힌트는 개발자가 어떤 방식으로 실행해 줘야 하는지를 명시하여 강제성이 부여되는 방식이다.


    SELECT * FROM tbl_board ORDER BY bno DESC;

    SELECT /*+INDEX_DESC (tbl_board pk_board) */*
    FROM tbl_board;


위 두 SQL 은 동일한 결과를 생성한다.

두 번째 select 문은 order by 없이 동일한 결과가 나온 것을 주목해보자.
힌트를 부여하여 tbl_board 테이블에 pk_board 인덱스를 역순으로 이용할 것을 실행 계획으로 확인할 수 있다.

오라클 데이터베이스에 사용하는 힌트는 여러 종류가 있으며 몇 가지만 언급하겠다.


        12.3.2 힌트 사용 문법

select 문 작성 시 힌트가 잘못 작성되도 실행 시엔 무시되기만 하고 별도 에러가 발생하지 않는다.
힌트 사용할 때 다음과 같은 문법을 사용한다.


    SELECT
        /*+ HINT name (param...) */ column_name, ...
    FROM table_name ...


힌트 구문은 '/*+' 로 시작하고 '*/' 로 마무리 된다.
힌트 자체는 SQL 로 처리되지 않아 컬럼명 뒤에 나와도 별도의 ',' 처리되지 않는다.


        13.3.3 FULL 힌트

힌트 중 select 문 실행 시 테이블 전체를 스캔할지 명시하는 FULL 힌트가 있다.
FULL 힌트는 모든 테이블을 스캔하여 상당히 느리게 실행된다. 예로 tbl_board 테이블을 FULL 스캔하도록 하고,
이 상태에서 정렬을 하려면 다음과 같이 작성할 수 있다.


    SELECT /*+ FULL(tbl_board) */ * FROM tbl_board ORDER BY bno DESC;


실행 계획을 보면 tbl_board 를 FULL 로 접근하고, 다시 SORT 가 적용된 것을 볼 수 있다.
실행 시간 역시 1 초 정도로 오래 걸린다.


        12.3.4 INDEX_ASC, INDEX_DESC 힌트

흔히 목록 페이지에서 많이 사용하는 힌트는 인덱스와 관련된 'INDEX_ASC, INDEX_DESC' 힌트이다.
ASC/DESC 에서 알 수 있듯, 순서대로 할지 역순으로 할지 지정하는 것이다.
INDEX_ASC/DESC 힌트는 주로 'ORDER BY' 를 위해 사용한다고 생각하면 된다.
인덱스 자체가 정렬 해둔 상태라서 SORT 과정을 생략하기 위한 용도이다.

INDEX_ASC/DESC 힌트는 테이블 이름과 인덱스 이름을 같이 파라미터로 사용한다.


    SELECT /*+ INDEX_ASC(tbl_board pk_board) */ * FROM tbl_board WHERE bno > 0;


INDEX_ASC/DESC 를 이용할 경우 동일한 조건의 order by 구문을 작성하지 않아도 된다.
예로 SQL 에 아무런 ORDER BY 조건 없이 bno 순번으로 접근하기 때문에 'ORDER BY bno ASC' 구문이 필요가 없다.


            12.4 ROWNUM 과 인라인 뷰

페이징 처리 시 역순으로 게시물 목록 조회에 성공했다면 이제 필요한 만큼의 데이터를 가져오는 방식에 대해 학습한다.
페이징 처리를 위해 ROWNUM 이란 특별 키워드를 사용하여 데이터에 순번을 붙여 사용한다.
쉽게 넘버링을 해준다고 생각하면 되는데 SELECT 문에 ROWNUM 변수로 데이터가 몇 번째인지 알 수 있다.
ROWNUM 은 실제 데이터가 아닌 추출 후에 처리되는 변수이기 때문에 그 값이 매번 달라질 수 있다.

아무 조건 없이 적용할 시 데이터들이 섞인 상태로(FULL 스캔과 동일) 그대로 나오게 된다.


    SELECT ROWNUM rn, bno, title FROM tbl_board;


위 결과는 데이터를 꺼내서 가장 먼저 올 수 있는 데이터를 번호를 붙여주고 있어서 순서는 무작위이며 순번을 매기고 있다.
그리고 bno 가 10인 데이터는 1번째로 가져왔다는 사실을 알 수 있다.


    SELECT /*+ FULL(tbl_board) */
    ROWNUM rn, bno, title
    FROM tbl_board WHERE bno > 0
    ORDER BY bno;


위 SQL 은 FULL 힌트로 전체 조회 후 다시 정렬한 방식이다. 결과에서 bno 10번은 뒤쪽으로 밀렸지만
여전히 ROWNUM 이 1번인 것으로 보아 ROWNUM 이 변경되지 않는다는 점을 알 수 있다. 다른 말로 정렬은 나중에 처리된다는 의미이다.


        12.4.1 인덱스를 이용한 접근 시 ROWNUM

테이블에 접근하는 순서에 따라 ROWNUM 값은 바뀔 수 있다. 다시 말하면 FULL 로 접근한 bno 10번 데이터를 찾고
정렬 후에 가져온 데이터는 ROWNUM 에 아무 영향을 주지 않는다.

만일 PK_BOARD 인덱스로 접근하면 다음 과정으로 접근한다.


    - PK_BOARD 인덱스를 통해 테이블에 접근
    - 접근한 데이터에 ROWNUM 부여


첫 과정에서 이미 정렬되어 bno 10번 데이터 순서는 1번째가 아니라 한참 뒤일 것이다.


    SELECT /*+ INDEX_ASC(tbl_board pk_board) */
    ROWNUM rn, bno, title, content
    FROM tbl_board;


위 SQL 은 인덱스를 찾는 순서가 달라 순서대로 찾는 방식으로 실행되게 된다.
힌트를 이용하여 tbl_board 테이블을 pk_board 순번으로 접근하여 ROWNUM 은 인덱스와 동일하게 나타난다.
ROWNUM 은 데이터 접근 순서이기 때문에 반대로 bno 가 가장 큰 데이터가 ROWNUM 값이 1이 되게 작성할 수도 있다.


    SELECT /*+ INDEX_DESC(tbl_board pk_board) */
    ROWNUM rn, bno, title, content
    FROM tbl_board
    WHERE bno > 0;


위 SQL 은 PK_BOARD 인덱스 역으로 타면서 테이블에 접근하여 bno 값이 가장 높은 데이터가 먼저 나온다.
게시물 정렬 시 1페이지의 경우 순번을 매겨 1 부터 10번에 해당한다고 볼 수 있다.


        12.4.2 페이지 번호 1, 2 의 데이터

한 페이지당 10개의 데이터를 출력할 때 ROWNUM 조건을 WHERE 구문에 추가하여 다음과 같이 작성할 수 있다.


    SELECT /*+ INDEX_DESC(tbl_board pk_board) */
    ROWNUM rn, bno, title, content
    FROM tbl_board
    WHERE ROWNUM <= 10;


WHERE 절엔 ROWNUM 조건을 줄 수 있다.
SQL 실행 결과는 가장 높은 번호 게시물 10개만 출력되며 PK_BOARD 인덱스를 역순하여 접근한 것을 볼 수 있다.

1 페이지 데이터 구한 후 흔히 2페이지에 대한 데이터는 다음과 같다고 생각할 수 있다.


    SELECT /*+ INDEX_DESC(tbl_board pk_board) */
    ROWNUM rn, bno, title, content
    FROM tbl_board
    WHERE ROWNUM > 10 AND ROWNUM <= 20;


하지만 실제로는 아무 결과가 나오지 않는다. 이유를 알기 위해선 실행 계획을 유심히 봐야한다.
위에서 아래로 살펴보면 우선 'ROWNUM > 10' 데이터들을 찾게 된다.
문제는 tbl_board 에 처음 나오는 ROWNUM 의 값이 1 이라는 것이다. tbl_board 에서 데이터를 찾고 ROWNUM 값이 1이 된ㄷ 데이터는
WHERE 절에서 무효화된다. 이후 다른 데이터를 가져오면 새로운 데이터로 첫 번째 데이터가 되어 다시 ROWNUM 은 1이 된다.
이 과정을 반복하면 결과는 아무것도 나오지 않게 된다. 그래서 SQL 작성 시 ROWNUM 조건은 반드시 1이 포함되어야 한다.

SQL 에 ROWNUM 조건이 1이 포함되도록 수정하면 결과가 나오는 것을 볼 수 있다.


    -- ROWNUM 은 반드시 1이 퐇함
    SELECT /*+ INDEX_DESC(tbl_board pk_board) */
    ROWNUM rn, bno, title, content
    FROM tbl_board
    WHERE ROWNUM <= 20;


달라진 점은 ROWNUM 조건이 1을 포함하게 변경한 것 뿐이다. 위 결과는 역순으로 데이터 20개 가져오게 된다.


        12.4.3 인라인뷰(in-line-view) 처리

10개 씩 출력할 경우 2 페이지의 20개 데이터 가져오는 데는 성공했지만, 1 페이지 내용도 같이 출력되어 이 문제를 수정해야 한다.
이를 해결하기 위해 '인라인 뷰' 를 이용할 것이며 'SELECT 문 안쪽 FROM 에 다시 SELECT 문' 으로 이해할 수 있다.
논리적으로 SELECT 문이 있고, 그 결과 다시 대상으로 삼아 SELECT 하는 것이다.

데이터베이스엔 인덱스와 같이 뷰라는 개념이 있는데 일종의 '창문' 이란 개념으로 복잡한 SELECT 처리를 하나의 뷰로 생성하여,
뷰를 통해 복잡하게 만들어진 결과를 하나의 테이블처럼 쉽게 조회하는 개념이다.

인라인뷰는 이런 뷰 작성 없이 FROM 안에 바로 작성하는 형태이다.


    SELECT ...
    FROM (
        SELECT ...
        FROM ...
    )


외부에 SELECT 문은 인라인뷰로 작성된 결과를 하나의 테이블처럼 사용한다.
인라인 뷰를 적용한 2 페이지 데이터는 아래와 같이 처리할 수 있다.


    SELECT
    bno, title, content
    FROM
        (
            SELECT /*+ INDEX_DESC(tbl_board pk_board) */
            ROWNUM rn, bno, title, content
            FROM tbl_board
            WHERE ROWNUM <= 20
        )
    WHERE rn > 10;


기존 SQL 과 비교하여 20개 데이터 중 2 페에지에 해당하는 10개만 추출하였다.
이 과정은 다음과 같은 순서이다.


    - 필요한 순서로 정렬된 데이터 ROWNUM
    - 처음부터 해당 페이지의 데이터 'ROWNUM <= 30' 같은 조건으로 구함
    - 구한 데이터를 하나의 테이블처럼 간주하여 인라인뷰 처리
    - 인라인뷰에서 필요한 데이터만 남김