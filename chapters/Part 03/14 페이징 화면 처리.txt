페이지를 보여주는 작업은 다음 과정과 같다.


    - 브라우저 주소창에 페이지 번호를 전달하여 결과를 확인
    - JSP 에서 페이지 번호를 출력
    - 각 페이지 번호에 클릭 이벤트 처리
    - 전체 데이터 개수를 반영하여 페이지 번호 조절


            14.1 페이징 처리 시 필요한 정보들

페이징 처리에 필요한 정보들은 다음과 같다.


    - 현재 페이지 번호(page)
    - 이전과 다음으로 이동 가능한 링크 표시 여부(prev, next)
    - 화면에 보이는 페이지 시작 번호와 끝 번호(startPage, endPage)


        14.1.1 끝 페이지 번호와 시작 페이지 번호

페이징 처리를 위해 우선적으로 필요한 정보는 사용자가 보고 있는 페이지 정보이다. 예로 1 페이지라면 1부터 시작 하지만 2 페이지라면
11 부터 시작해야한다. 흔히 페이지 계산 시 시작 번호를 먼저 하려고 하지만, 끝 번호를 먼저 계산해두는 것이 수월하다.
끝 번호는 다음 공식으로 구할 수 있다.(페이지 번호가 10개 씩 가정)


    this.endPage = (int) (Math.ceil(페이지 번호 / 10.0)) * 10;


Math.ceil() 은 소수점 올림을 처리하여 다음 상황이 가능하다.


    - 1 페이지 : Math.ceil(0.1) * 10 = 10
    - 10 페이지 : Math.ceil(1) * 10 = 10
    - 11 페이지 : Math.ceil(1.1) * 10 = 20


끝 번호(endPage) 아직 개선을 해야하는데, 데이터 수가 적다면 10페이지로 끝나면 안되는 상황이 생길 수도 있다.
그래도 끝번호를 계산하면 시작 번호를 계산하기 수월할 것이다.

만일 10개씩 보여준다면 시작 번호는 무조건 끝 번호에서 9를 뺀 값이 된다.


    this.startPage = this.endPage - 9;


끝 번호(endPage)는 전체 데이터 수에 의해 영향을 받는다.
예로 10개씩 보여줄 경우 전체 데이터가 80개라면  끝 번호는 10이 아닌 8이 되어야 한다.

만일 끝 번호(endPage)와 한 페이지에 출력되는 데이터 수(amount)의 곱이 전체 데이터 수(total) 보다 크다면
끝 번호(endPage) 는 다시 total 을 이용하여 다시 계산되어야 한다.


    readEnd = (int) (Math.ceil( (total * 1.0) / amount) );

    if(realEnd < this.endPage) {
        this.endPage = readEnd;
    }


먼저 전체 데이터 수(total) 에서 진짜 끝 페이지(realEnd)가 몇 번까지 되는지를 계산한다.
만일 진짜 끝 페이지(realEnd)가 구해둔 끝 번호(endPage) 보다 작다면 끝 번호는 작은 값이 되어야만 한다.


    이전(prev)과 다음(next)

이전(prev) 은 간단하게 구할 수 있다. 이전(prev)의 경우는 시작 번호(startPage)가 1보다 큰 경우라면 존재하게 된다.


    this.prev = this.startPage > 1;


다음(next)으로 가는 링크의 경우 realEnd 가 끝 번호(endPage) 보다 큰 경우에만 존재하게 된다.


    this.next = this.endPage < realEnd;


            14.2 페이징 처리를 위한 클래스 설계

화면에 페이지 처리를 위해 여러 정보가 필요하면 클래스 구성으로 처리하는 방식이 편할 수 있다.
클래스 구성 시 Controller 계층에서 JSP 에 전달할 때도 객체로 Model 에 담아 보내는 과정이 단순한 점도 있다.

'src/main/java/domain' 패키지에 PagePTO 클래스를 설계한다.


    import lombok.Getter;
    import lombok.ToString;

    @Getter
    @ToString
    public class PageDTO {
        private int startPage;
        private int endPage;
        private boolean prev, next;

        private int total;
        private Criteria cri;

        public PageDTO(Criteria cri, int total) {
            this.cri = cri;
            this.total = total;

            this.endPage = (int) (Math.ceil(cri.getPageNum() / 10.0)) * 10;
            this.startPage = this.endPage - 9;

            int realEnd = (int) (Math.ceil((total * 1.0) / cri.getAmount()));

            if(realEnd < this.endPage) {
                this.endPage = realEnd;
            }

            this.prev = this.startPage > 1;
            this.next = this.endPage < realEnd;
        }
    }


PageDTO 는 생성자 정의 후 Criteria 와 전체 데이터 수(total)를 파라미터로 지정한다.
Criteria 안엔 페이지를 보여주는 데이터 수(amount)와 페이지 번호(pageNum) 을 가지고 있어 이를 이용하여 모든 내용을 계산할 수 있다.

BoardController 에선 PageDTO 를 사용할 수 있게 Model 에 담아 화면에 전달해 줄 필요가 있다.
메소드를 다음과 같이 수정한다.


    @GetMapping("/list")
    public void list(Criteria cri, Model model) {
        log.info("list: " + cri);

        model.addAttribute("list", service.getList(cri));
        model.addAttribute("pageMaker", new PageDTO(cri, 123));
    }


'pageMaker' 란 이름으로 PageDTO 클래스에서 객체를 만들어 Model 에 담아 준다.
PageDTO 을 구성하기 위해 전체 데이터 수가 필요한데, 아직 처리하지 않았으므로 123 으로 임시 지정하였다.


            14.3 JSP 페이지 번호 출력

JSP 에서 페이지 번호 출력 부분은 JSTL 로 처리할 수 있다.
SB Admin2 는 부트스트랩 기반으로 구성되어 https://v4-alpha.getbootstrap.com/components/pagination 같은 예제들이 존재한다.

예제는 list.jsp 에서 페이지 처리를 추가한다.


    </table>
    <div class="float-right">
        <ul class="pagination">

            <c:if test="${pageMaker.prev}">
                <li class="paginate_button page-item previous"><a href="#" class="page-link">Previous</a></li>
            </c:if>

            <c:forEach var="num" begin="${pageMaker.startPage}" end="${pageMaker.endPage}">
                <li class="paginate_button page-item"><a href="#" class="page-link">${num}</a></li>
            </c:forEach>

            <c:if test="${pageMaker.next}">
                <li class="paginate_button page-item next"><a href="#" class="page-link">next</a></li>
            </c:if>
        </ul>
    </div>


Modal 창을 별도의 <div class="row"> 를 구성하고 페이지 번호를 출력한다.
pageMaker 란 이름으로 전달된 PageDTO 를 이용하여 페이지 번호들을 출력한다.

예로, 현재 total 은 123 숫자로 지정되어 5 페이지 조회 시 next 값은 true 가 되어야 한다.
반면 amount 값이 20인 경우 7페이지까지만 출력되어야 한다.


        14.3.1 페이지 번호 이벤트 처리

화면에 페이지 번호가 보이지만 아직 이벤트 처리가 남았다. 일반적으로 <a> 태그의 href 속성을 사용하지만,
직접 링크를 처리하는 방식의 경우 검색 조건이 붙고 난 후에 처리가 복잡하게 되므로 JavaScript 를 통해 처리하는 방식을 이용한다.

우선 <a> 태그의 href 속성에 페이지 번호를 가지도록 수정한다.


    <c:if test="${pageMaker.prev}">
        <li class="paginate_button page-item previous">
            <a href="${pageMaker.startPage - 1}" class="page-link">Previous</a></li>
    </c:if>

    <c:forEach var="num" begin="${pageMaker.startPage}" end="${pageMaker.endPage}">
        <li class="paginate_button page-item ${pageMaker.cri.pageNum == num ? "active" : ""}">
            <a href="${num}" class="page-link">${num}</a></li>
    </c:forEach>

    <c:if test="${pageMaker.next}">
        <li class="paginate_button page-item next">
            <a href="${pageMaker.endPage + 1}" class="page-link">next</a></li>
    </c:if>


<a> 태그의 href 속성값은 단순 번호만 가져서 해당 URL 이 존재하지 않는 문제가 생길 것이다.
<a> 태그가 원래 동작을 못하도록 JavaScript 처리하여 실제 페이지를 클릭했을 때 동작하는 부분은 별도로
<form> 태그를 이용하여 처리한다.


    <form id="actionForm" action="/board/list" method="get">
        <input type="hidden" name="pageNum" value="${pageMaker.cir.pageNum}">
        <input type="hidden" name="amount" value="${pageMaker.cir.amount}">
    </form>


기존 동작을 하던 JavaScript 부분은 기존 코드에 페이지 번호를 클릭하면 처리하는 부분이 추가된다.


    var actionForm = $('#actionForm');

    $('.paginate_button a').on("click", function(e) {
        e.preventDefault();

        console.log('click');

        actionForm.find("input[name='pageNum']").val($(this).attr("href"));
    });


<form> 태그로 URL 이동 처리하도록 변경했다. JavaScript 로 <a> 태그를 클릭해도 페이지 이동 없도록 preventDefault() 처리를 하고,
<form> 태그 내 pageNum 값은 href 속성값으로 변경한다. 이 처리를 하고 난 후 번호를 클릭했을 때 <form> 태그 내에 페이지 번호가
바뀌는 것을 개발자 도구에서 볼 수 있다.

마지막 처리는 actionForm 자체를 submit() 시켜야 한다.


    $('.paginate_button a').on("click", function(e) {
        e.preventDefault();

        console.log('click');

        actionForm.find("input[name='pageNum']").val($(this).attr("href"));
        actionForm.submit();
    });


이제 페이지 번호를 클릭하였을 때 화면에 제대로 이동되는지 확인하자.


            14.4 조회 페이지로 이동

페이지 번호를 클릭하면 원하는 것으로 이동하는 것을 볼 수 있지만, 몇 가지 문제가 있다.
사용자가 3 페이지의 게시글을 클릭하고 다시 목록 이동으로 가면 무조건 1 페이지 목록으로 이동하는 증상이 일어난다.
조회 페이지에 'List' 선택하면 다시 1 페이지로 돌아가는 문제가 발생한다.
이를 해결하기 위해 조회 페이지에 갈 때 현재 목록 페이지에 pageNum 과 amount 가 같이 전달해야 한다.
이 경우 <form> 태그에 추가로 게시물의 번호를 같이 전송하고, action 값을 조정하여 처리할 수 있따.

원래 게시물에 제목은 '/board/get?bno=xxx' 로 이동할 수 있는 링크가 직접 처리되어 있었다.


    <a href='/board/get?bno=<c:out value="${board.bno}"/>'>
        <c:out value="${board.title}"/>
    </a>


페이지 번호가 전달되지 않아 아무 정보 없이 '/board/list' 를 호출하게 된다. 간단히 '&pageNum=xxx' 같이 처리할 수 있지만
나중에 여러 조건이 추가되는 복잡한 링크를 생성해야만 한다.

<a> 태그로 복잡한 링크를 생성하는 방식이 나쁘지는 않지만 대표 검색 엔진이다.
출력되는 정보와 링크를 저장하여 <a> 태그에 완전 URL 이 노출되는데 유리하여 노출이 필요한 경우라면 모든 문자열을 구성하면 좋은 방식이다.

직접 링크로 연결된 경로를 페이지 이동과 마찬가지로 <form> 태그로 처리할 것이니 <a> 태그는 이동할 게시물 번호만 가지게 수정한다.
(이벤트 처리에 수월하기 위해 <a> 태그에 class 속성을 하나 부여 한다.)


    <a class="move" href='${board.bno}'>
        <c:out value="${board.title}"/>
    </a>


실제 클릭은 JavaScript 로 게시물 제목 클릭 시의 이벤트 처리를 새로 작성한다.


    $('.move').on("click", function(e) {
        e.preventDefault();

        actionForm.append("<input type='hidden' name='bno' value='" + $(this).attr("href") +"'>");
        actionForm.attr("action", "/board/get");
        actionForm.submit();
    });


게시물 클릭 시 <form> 태그에 추가로 bno 값을 전송하기 위해 <input> 태그를 추가하였고
<form> 태그의 action 은 '/board/get' 으로 변경한다. 위 처리가 정상 작동되면 게시물 클릭 시
pageNum 과 amount 파라미터가 추가로 전달되는 것을 볼 수 있다.


        14.4.1 조회 페이지에 다시 목록 페이지로 이동 - 페이지 번호 유지

이제 목록 페이지로 돌아갈 시 전송된 파라미터들로 이동하기 위한 이벤트를 처리해야 한다.
BoardController 의 get() 메소드는 원래 게시물의 번호만 받도록 처리되야 하지만,
추가 파라미터가 붙어 Criteria 로 추가해서 받고 전달한다.


    @GetMapping({"/get", "/modify"})
    public void get(@RequestParam("bno") Long bno, @ModelAttribute("cri") Criteria cri, Model model) {
        log.info("/get or modify");
        model.addAttribute("board", service.get(bno));
    }


@ModelAttribute 는 자동으로 Model 의 데이터를 지정한 이름으로 담아 준다.
이 어노테이션을 사용하지 않아도 Controller 에서 화면으로 파라미터가 전달되지만 좀 더 명시적으로 이름을 지정하기 위해 사용한다.

기존 get.jsp 에서 버튼 클릭 시 <form> 태그를 이용한 방식이었으니 필요한 데이터를 추가하여 이동하도록 수정한다.


    <form id="operForm" action="/board/modify" method="get">
        <input type="hidden" id="bno" name="bno" value='<c:out value="${board.bno}"/>'>
        <input type="hidden" id="pageNum" value='<c:out value="${cri.pageNum}"/>'>
        <input type="hidden" id="amount" value='<c:out value="${cri.amount}"/>'>
    </form>


get.jsp 는 operForm 을 이용했기 때문에 cri 란 이름의 Criteria 객체로 pageNum 과 amount 값을 태그로 구성하고,
버튼을 클릭 시 정상적으로 목록 페이지로 이동하게 처리한다.


        14.4.2 조회 페이지에서 수정/삭제 페이지로 이동

조회 페이지에서 'Modify' 버튼으로 수정/삭제 페이지로 이동한다.
수정/삭제 페이진 다시 목록으로 가는 버튼이 있어 동일하게 목록 페이지에 필요한 파라미터들을 처리해야 한다.
BoardController 에서 get() 메소드에 '/get' 과 '/modify' 같이 처리하여 별도 처리 없이 Criteria 를 Model 에 cri 로 담아 전달한다.


            14.5 수정과 삭제 처리

modify.jsp 에 <form> 태그로 데이터를 처리한다. 거의 입력과 비슷한 방식으로 구현되는데,
이제 pageNum 과 amount 란 값이 존재하니 <form> 태그 내에서 같이 전송할 수 있게 수정한다.


    <form role="form" action="/board/modify" method="post">
        <!-- 추가 -->
        <input type="hidden" name="pageNum" value='<c:out value="${cri.pageNum}"/>'>
        <input type="hidden" name="pageNum" value='<c:out value="${cri.amount}"/>'>


modify 역시 Criteria 를 Model 에서 사용하기 때문에 위 태그를 만들어 <form> 태그 전송에 포함한다.


        14.5.1 수정/삭제 처리 후 이동

POST 방식으로 진행하는 수정과 삭제 처리는 BoardController 에서 각각의 메소드 형태로 구현되어 있으므로
페이지 관련 파라미터들을 처리하기 위해선 변경해줄 필요가 있다.


    @PostMapping("/modify")
    public String modify(BoardVO board, @ModelAttribute("cri") Criteria cri, RedirectAttributes rttr) {
        log.info("modify: " +board);

        if(service.modify(board)) {
            rttr.addFlashAttribute("result", "success");
        }
        rttr.addAttribute("pageNum", cri.getPageNum());
        rttr.addAttribute("amount", cri.getAmount());
        return "redirect:/board/list";
    }


변경된 메소드엔 Criteria 추가되었고 RedirectAttributes 역시 URL 뒤에 pageNum 과 amount 값을 가지고 이동하게 수정한다.
삭제 처리 역시 동일하게 Criteria 를 받아들이는 방식으로 수정한다.


    @PostMapping("/remove")
    public String remove(@RequestParam("bno") Long bno, @ModelAttribute("cri") Criteria cri, RedirectAttributes rttr) {
        log.info("remove ..." + bno);
        if(service.remove(bno)) {
            rttr.addFlashAttribute("result", "success");
        }

        rttr.addAttribute("pageNum", cri.getPageNum());
        rttr.addAttribute("amount", cri.getAmount());
        return "redirect:/board/list";
    }


위 방식으로 수정/삭제 후 기존 사용자가 본 페이지로 이동할 수 있다.

수정과 달리 삭제는 처리 후에 1 페이지로 이동해도 무방하지만, 이왕 사용자가 보던 정보를 이어 볼 수 있게 처리하는 방식은 어렵지 않다.


        14.5.2 수정/삭제 페이지에 목록 페이지로 이동

페이지 이동의 마지막은 수정/삭제를 취소하고 다시 목록 페이지로 이동하는 것이다.
목록 페이지는 오직 pageNum 과 amount 만을 사용하여 <form> 태그의 다른 내용들은 삭제하고 필요한 내용만 추가하는 형태가 편리하다.


    <script type="text/javascript">
        $(document).ready(function() {
            var formObj = $('form');

            $('button').on('click', function(e) {
                e.preventDefault();

                var operation = $(this).data("oper");

                console.log(operation);

                if(operation === 'remove') {
                    formObj.attr("action", "/board/remove");
                } else if(operation === 'list') {
                    // move to list
                    formObj.attr("action", "/board/list").attr("method", "get");
                    var pageNumTag = $("input[name='pageNum']").clone();
                    var amountTag = $("input[name='amount']").clone();

                    formObj.empty();
                    formObj.append(pageNumTag);
                    formObj.append(amountTag);
                }
                formObj.submit();
            });
        });
    </script>


사용자가 'List' 버튼 누를 시 <form> 태그에서 필요한 부분만 잠시 복사(clone)하여 보관하고,
<form> 태그 내용을 지워버린다.(empty) 이후 다시 필요한 태그들만 추가해서 '/board/list' 를 호출하는 형태를 이용한다.


            14.6 MyBatis 에서 전체 데이터의 개수 처리

페이지 이동 작업이 모두 정상 처리되면 최종적으로 실제 모든 게시물 수(total)를 구해서 PageDTO 를 구성할 때 달아주어야 한다.
전체 개수를 구하는 SQL 은 복잡하지는 않아 어노테이션 처리도 무방하지만 BoardMapper 인터페이스에 getTotalCount() 메소드를 정의하고
XML 로 SQL 을 처리한다.


    public int getTotalCount(Criteria cri);


getTotalCount() 는 Criteria 를 파라미터를 전달받도록 설계하지 않아도 문제되지 않지만, 게시물 목록과 전체 데이터 수를 구하는 작업은
일관성 있게 Criteria 를 받는 것이 좋다.


    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*) FROM tbl_board WHERE bno > 0
    </select>


BoardService 와 BoardServiceImpl 에서 별도의 메소드로 BoardMapper 의 getTotalCount() 를 호출한다.


    public int getTotal(Criteria cri);


BoardService 의 getTotal() 에 굳이 Criteria 파라미터를 전달할 필요는 없지만, 목록과 전체 데이터 개수는 항상
같이 동작하는 경우가 많아 지정하였다. BoardServiceImpl 클래스는 getTotal() 메소드를 구현한다.


    @Override
    public int getTotal(Criteria cri) {
        log.info("get total count");

        return mapper.getTotalCount(cri);
    }


BoardController 에선 BoardService 인터페이스로 getTotal() 을 호출하도록 변경한다.


    @GetMapping("/list")
    public void list(Criteria cri, Model model) {
        log.info("list: " + cri);

        model.addAttribute("list", service.getList(cri));
        // model.addAttribute("pageMaker", new PageDTO(cri, 123));

        int total = service.getTotal(cri);

        log.info("total: " + total);

        model.addAttribute("pageMaker", new PageDTO(cri, total));
    }

