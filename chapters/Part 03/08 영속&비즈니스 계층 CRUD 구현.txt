            8.1 영속 계층의 구현 준비

거의 모든 웹 애플리케이션이 최종 목적이 데이터베이스에 데이터를 기록하거나, 원하는 데이터를 가져오는 것이 목적이라
개발할 때 어느 정도 설계가 진행되면 데이터 관련 작업을 하게 된다.


        8.1.1 VO 클래스의 작성

VO 클래스를 생성하는 작업은 테이블 설계를 기준으로 작성하면 된다. tbl_board 테이블 구성을 숙지하자.

프로젝트에 domain 패키지를 생성하여 BoardVO 클래스를 작성한다.


    import lombok.Data;

    import java.util.Date;

    @Data
    public class BoardVO {
        private Long bno;
        private String title;
        private String content;
        private String writer;
        private Date regdate;
        private Date updateDate;
    }


Lombok 을 이용하여 생성자, getter/setter, toString() 등을 만들기 위해 @Date 어노테이션을 적용한다.


        8.1.2 Mapper 인터페이스와 Mappter XML

PART 01 에서 봤지만 MyBatis 는 SQL 을 처리하기 위해 어노테이션이나 XML 을 사용했다.
간단하면 어노테이션 처리가 무난하지만 점점 복잡해지거나 검색 같이 상황에 따라 다른 SQL 문 처리는 어노테이션이 유용하지 못하다.
XML 경우 단순 텍스트를 수정하는 과정만으로 처리가 끝나지만 어노테이션은 코드 수정 후 다시 빌드하는 유지 보수성이 떨어져서
기피하는 경우가 종종 있다.


    Mapper 인터페이스

root-context.xml 은 PART 01 과 같이 mapper 패키지를 스캔하도록 설정한다.


    <mybatis-spring:scan base-package="mapper" />


Mapper 인터페이스 작성 시 리스트(select)와 등록(insert) 작업을 우선하여 작성한다.
mapper 패키지에 BoardMapper 인터페이스를 추가한다.


    import domain.BoardVO;
    import org.apache.ibatis.annotations.Select;

    import java.util.List;

    public interface BoardMapper {
        @Select("SELECT * FROM tbl_board WHERE bno > 0")
        public List<BoardVO> getList();
    }


BoardMapper 인터페이스 작성 시 이미 작성된 BoardVO 클래스를 적극 활용해서 SQL 어노테이션의 속성값을 처리할 수 있다.
(SQL 작성 시 ';' 없도록 작성). 'SELECT * FROM tbl_board WHERE bno > 0' 쿼리를 Developer 에서 결과를 확인해보자.

SQL Developer 에서 먼저 확인하는 이유는 SQL 문제 없이 가능한지, 데이터 commit 을 하지 않았는지 등 결과가 다를 수 있어
먼저 비교하기 위함이다.

작성된 BoardMapper 인터페이스를 테스트 하기 위해 'src/test/java/mapper' 패키지에 BoardMapperTests 클래스를 추가한다.


    import lombok.Setter;
    import lombok.extern.log4j.Log4j;
    import org.junit.Test;
    import org.junit.runner.RunWith;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.test.context.ContextConfiguration;
    import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    // @ContextConfiguration(classes = {RootConfig.class})
    @Log4j
    public class BoardMapperTests {
        @Setter(onMethod_ = @Autowired)
        private BoardMapper mapper;

        @Test
        public void testGetList() {
            mapper.getList().forEach(board -> log.info(board));
        }
    }


BoardMapperTests 클래스는 스프링을 이용하여 BoardMapper 인터페이스의 구현체를 주입 받아 동작한다.
Java 설정 시엔 RootConfig 클래스를 이용해서 스프링의 설정을 이용하고 있음을 명시한다.
testGetList() 결과는 SQL Developer 에서의 결과와 동일하게 동작할 것이다.


|----|-------|--------|-------|----------------------|----------------------|
|bno |title  |content |writer |regdate               |updatedate            |
|----|-------|--------|-------|----------------------|----------------------|
|1   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:32:46.0 |2021-01-11 13:32:46.0 |
|2   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:48:54.0 |2021-01-11 13:48:54.0 |
|3   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:48:54.0 |2021-01-11 13:48:54.0 |
|4   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:48:55.0 |2021-01-11 13:48:55.0 |
|5   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:48:56.0 |2021-01-11 13:48:56.0 |
|----|-------|--------|-------|----------------------|----------------------|


    Mapper XML 파일

BoardMapperTests 로 테스트 후 src/main/resources 내에 mapper 폴더에 BoardMapper.xml 파일을 작성한다.
패키지와 클래스 이름을 동일하게 해주면 나중에 혼란스러운 상황은 피할 수 있다.


    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE mapper
            PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/schema/mybatis-3-mapper.dtd">
    <mapper namespace="mapper.BoardMapper">

        <select id="getList" resultType="domain.BoardVO">
            <![CDATA[
                SELECT * FROM tbl_board WHERE bno > 0
            ]]>
        </select>
    </mapper>


XML 작성 시 namespace 값을 Mapper 인터페이스와 동일한 이름을 주는 것에 주의하고,
<select> 태그의 id 속성 값은 메소드의 이름과 일치하게 작성한다.
resultType 속성 값은 select 쿼리 결과를 특정 클래스 객체로 만들기 위해 설정한다.
CDATA 부분은 XML 부등호를 사용하기 위함이다.

XML 에 SQL 문이 처리되었으니 BoardMapper 인터페이스에 SQL 어노테이션은 주석처리한다.


    // @Select("SELECT * FROM tbl_board WHERE bno > 0")
    public List<BoardVO> getList();


인터페이스 수정 후 반드시 기존 테스트 코드를 통해 동작되는지 확인해본다.


|----|-------|--------|-------|----------------------|----------------------|
|bno |title  |content |writer |regdate               |updatedate            |
|----|-------|--------|-------|----------------------|----------------------|
|1   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:32:46.0 |2021-01-11 13:32:46.0 |
|2   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:48:54.0 |2021-01-11 13:48:54.0 |
|3   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:48:54.0 |2021-01-11 13:48:54.0 |
|4   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:48:55.0 |2021-01-11 13:48:55.0 |
|5   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:48:56.0 |2021-01-11 13:48:56.0 |
|----|-------|--------|-------|----------------------|----------------------|


            8.2 영속 영역의 CRUD 구현

웹 프로젝트 구조에 마지막 영역 이지만, 실제 구현 시 먼저 할 수도 있는 영역이 영속 영역이다.
이는 기본적으로 CRUD 작업을 하기 위해 테이블과 VO(DTO) 등 약간의 준비만으로 비즈니스 로직과 무관하게 CRUD 작업을 작성할 수 있다.
MyBatis 는 내부적으로 JDBC 에 PreparedStatement 를 활용하고 필요한 파라미터를 처리하는 '?' 에 대한 치환은
'#{속성}' 을 이용해 처리한다.


        8.2.1 create(insert) 처리

tbl_board 테이블은 PK 컬럼으로 bno 을 이용하고, 시퀀스로 자동으로 고유 번호를 부여한다.
이처럼 자동으로 PK 값이 정해지는 경우 다음 2 가지 방식으로 처리할 수 있다.


    - insert 만 처리되고 생성된 PK 값을 알 필요 없는 경우
    - insert 문이 실행되고 생성된 PK 값을 알아야 하는 경우


BoardMapper 인터페이스엔 위 상황을 고려하여 다음 메소드를 추가 선언한다.


    public void insert(BoardVO board);

    public void insertSelectKey(BoardVO board);


BoardMapper.xml 은 다음과 같이 내용을 추가가한다.


    <select id="insert">
        INSERT INTO tbl_board (bno, title, content, writer)
        VALUES (seq_board.NEXTVAL, #{title}, #{content}, #{writer})
    </select>

    <insert id="insertSelectKey">

        <selectKey keyProperty="bno" order="BEFORE"
                   resultType="long">
            SELECT seq_board.NEXTVAL FROM dual
        </selectKey>

        INSERT INTO tbl_board (bno, title, content, writer)
        VALUES (#{bno}, #{title}, #{content}, #{writer})
    </insert>


insert() 는 단순히 시퀀스로 다음 값을 구해 insert 하여 PK 값은 알 수 없지만 1번의 SQL 처리만으로 작업이 완료되는 장점이 있다.

insertSelectKey() 는 @SelectKey 라는 MyBatis 어노테이션을 이용한다.
PK 값을 미리(before) SQL 을 통해 처리하므로 특정 이름으로 결과를 보관하는 방식이다.
@Insert 할 때 SQL 문을 보면 #{bno} 와 같이 이미 처리된 결과를 이용하는 것을 볼 수 있다.

우선 insert() 에 대한 테스트 코드를 BoardMapperTests 클래스에 새로운 메소드를 추가 작성한다.


    @Test
    public void testInsert() {
        BoardVO board = new BoardVO();
        board.setTitle("새로 작성하는 글");
        board.setContent("새로 작성하는 내용");
        board.setWriter("newbie");

        mapper.insert(board);

        log.info(board);
    }


테스트 코드 마지막에 log.info(board) 를 통해 해당 변수를 알아본다. 실행 결과는 다음과 같다.


    INFO : jdbc.sqlonly - INSERT INTO tbl_board (bno, title, content, writer) VALUES (seq_board.NEXTVAL,
     '새로 작성하는 글', '새로 작성하는 내용', 'newbie')

    INFO : jdbc.sqltiming - INSERT INTO tbl_board (bno, title, content, writer) VALUES (seq_board.NEXTVAL,
     '새로 작성하는 글', '새로 작성하는 내용', 'newbie')
     {executed in 17 msec}

    INFO : mapper.BoardMapperTests - BoardVO(bno=null, title=새로 작성하는 글, content=새로 작성하는 내용,
    writer=newbie, regdate=null, updateDate=null)


결과는 BoardVO 클래스로 toString() 결과가 출력되는데, bno 값이 null 로 비어있는 것을 볼 수 있다.
@SelectKey 를 이용하는 경우 테스트 코드는 다음과 같다.


    @Test
    public void testInsertSelectKey() {
        BoardVO board = new BoardVO();
        board.setTitle("새로 작성하는 글 select key");
        board.setContent("새로 작성하는 내용 select key");
        board.setWriter("newbie");

        mapper.insertSelectKey(board);

        log.info(board);
    }


testInsertSelectKey() 테스트 결과는 다음과 같다.


    INFO : jdbc.resultsettable -
    |--------|
    |nextval |
    |--------|
    |7       |
    |--------|

    INFO : jdbc.sqlonly - INSERT INTO tbl_board (bno, title, content, writer) VALUES (7, '새로 작성하는 글 select key',
    '새로 작성하는 내용 select key', 'newbie')

    INFO : jdbc.sqltiming - INSERT INTO tbl_board (bno, title, content, writer) VALUES (7, '새로 작성하는 글 select key',
    '새로 작성하는 내용 select key', 'newbie')
     {executed in 16 msec}

    INFO : mapper.BoardMapperTests - BoardVO(bno=7, title=새로 작성하는 글 select key,
    content=새로 작성하는 내용 select key, writer=newbie, regdate=null, updateDate=null)


실행 결과는 'select seq_board.nextval from dual' 쿼리가 먼저 처리되고 여기서 생성된 결과로
bno 값으로 처리되는 것을 볼 수 있다.
insertSelectKey() 의 @Insert 문의 SQL 을 보면 #{bno} 파라미터에 전달되어 사용하게 되어 있다.

마지막 부분의 BoardVO 객체에도 bno 값이 지정되어 있다. @SelectKey 를 이용하는 방식으로
SQL 을 한 번 더 실행하는 부담이 있지만 자동 추가가 되는 PK 값을 확인하는 상황에 유용하게 사용될 수 있다.


        8.2.2 read(select) 처리

insert 된 데이터를 조회하는 작업은 PK 를 이용해 처리하니 BoardMapper 의 파라미터 역시 BoardVO 클래스의 bno 타입 정보로 처리한다.


    BoardMapper 인터페이스

    public BoardVO read(Long bno);


    BoardMapper.xml

    <select id="read" resultType="domain.BoardVO">
        SELECT * FROM tbl_board WHERE bno = #{bno}
    </select>


MyBatis 는 모든 파라미터와 리턴 타입 처리를 get 파라미터명(), set 컬럼명() 의 규칙으로 호출되어 설정된다.
다만 위와 같이 #{속성} 이 1개만 존재할 경우 별도 get 파라미터명() 을 사용하지 않고 처리된다.

현재 테이블에 존재하는 데이터 bno 컬럼의 값을 이용해 테스트 코드를 통해 확인한다.


    @Test
    public void testRead() {
        // 존재하는 게시물 번호로 테스트
        BoardVO board = mapper.read(5L);
        log.info(board);
    }


mapper.read() 호출 시 bno 값이 존재하는지 여부를 반드시 확인하자.
결과는 다음과 같다.


    INFO : mapper.BoardMapperTests - BoardVO(bno=5, title=테스트 제목, content=테스트 내용, writer=user00,
    regdate=Mon Jan 11 13:48:56 KST 2021, updateDate=Mon Jan 11 13:48:56 KST 2021)


        8.2.3 delete 처리

특정 데이터 삭제는 PK 를 이용하므로 조회 작업과 유사하게 처리한다.
등록, 삭제, 수정과 같은 DML 작업은 '몇 건의 데이터가 삭제(또는 수정) 되었는지' 를 반환할 수 있다.


    BoardMapper 인터페이스

    public int delete(Long bno);


    BoardMapper.xml

    <delete id="delete">
        DELETE tbl_board WHERE bno = #{bno}
    </delete>


delete() 메소드 리턴 타입은 int 로 지정하여 정상 처리 된다면 1 이상의 값을 가지도록 작성한다.
테스트 코드는 현 테이블에 존재하는 번호의 데이터를 삭제해보고 '1' 이란 값이 출력되는지 확인한다.
해당 번호의 게시물이 없으면 '0' 이 출력된다.


    @Test
    public void testDelete() {
        log.info("DELETE COUNT: " + mapper.delete(3L));
    }


testDelete() 의 경우 3번 데이터가 존재하면 다음 로그가 기록된다.


    INFO : jdbc.sqltiming - DELETE tbl_board WHERE bno = 3
     {executed in 29 msec}
    INFO : mapper.BoardMapperTests - DELETE COUNT: 1


        8.2.4 update 처리

마지막으로 update 처리는 제목, 내용, 작성자 등을 수정한다고 가정한다. 최종 수정 시간을 데이터베이스 내에 현재 시간으로 수정한다.
update 도 delete 와 마찬가지로 '몇 개의 데이터가 수정 되었는지' 를 처리하여 int 타입으로 메소드를 설계할 수 있다.


    BoardMapper 인터페이스

    public int update(BoardVO board);


    BoardMapper.xml

    <update id="update">
        UPDATE tbl_board
        SET title = #{title},
        content = #{content},
        writer = #{writer},
        updateDate = SYSDATE
        WHERE bno = #{bno}
    </update>


위 사항에선 봐야할 부분은 regdate 는 건드리지 않고, updateDate 만 현재 시간으로 변경해준다는 점이다.
#{title} 과 같은 부분은 BoardVO 에서 getTitle() 메소드를 호출하여 파라미터를 처리하는 방식이다.

테스트 코드에서 read() 로 가져온 BoardVO 객체 일부를 수정하는 방식이나 직접 BoardVO 객체를 생성하여 처리할 수 있다.


    @Test
    public void testUpdate() {
        BoardVO board = new BoardVO();
        // 실행 전 존재하는 번호인지 확인할 것
        board.setBno(5L);
        board.setTitle("수정된 제목");
        board.setContent("수정된 내용");
        board.setWriter("user00");

        int count = mapper.update(board);
        log.info("UPDATE COUNT: " + count);
    }


데이터베이스에 5번 글이 존재한다면 다음 로그들이 출력될 것이다.


    INFO : jdbc.sqltiming - UPDATE tbl_board SET title = '수정된 제목', content = '수정된 내용', writer = 'user00',
     updateDate = SYSDATE WHERE bno = 5
     {executed in 20 msec}
    INFO : mapper.BoardMapperTests - UPDATE COUNT: 1


