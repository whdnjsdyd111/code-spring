MyBatis 는 SQL 그대로 사용할 수 있어 인라인뷰를 사용하는 SQL 를 작성하고 파라미터를 지정하는 방식으로 페이징 처리를 한다.
SQL 실행 시 몇 가지 파라미터가 필요한데 페이지 번호, 페이지당 데이터 개수를 결정해야 한다.

페이지 번호와 데이터 개수를 파라미터로 전달하는 방식도 나쁘진 않지만, 이 데이터들을 하나의 객체로 묶어서 전달하는 방식이
확장성이 더 좋다.

'src/main/java/domain' 패키지에 Criteria 클래스를 작성한다. 이는 '검색의 기준' 을 의미한다.


    import lombok.Getter;
    import lombok.Setter;
    import lombok.ToString;

    @Getter
    @Setter
    @ToString
    public class Criteria {
        private int pageNum;
        private int amount;

        public Criteria() {
            this(1, 10);
        }

        public Criteria(int pageNum, int amount) {
            this.pageNum = pageNum;
            this.amount = amount;
        }
    }


Criteria 클래스 용도는 pageNum 과 amount 값을 같이 전달하는 용도지만 생성자로 1페이지, 10개로 지정한다.


            13.1 MyBatis 처리와 테스트

BoardMapper 는 인터페이스와 어노테이션으로 페이징처리할 경우 필요에 따라 SQL 구문 처리가 복잡해질 수 있다.
(SQL 문 길어지면 복잡해지고 XML 처리가 더 쉬울 수 있음)

'src/main/java/mapper' 패키지의 BoardMapper 에 Criteria 타입을 파라미터로 사용하는 getListWithPaging() 메소드를 작성한다.


    public List<BoardVO> getListWithPaging(Criteria cri);


기존 'src/main/resources/mapper' 의 BoardMapper.xml 에 getListWithPaging 에 해당하는 태그를 추가한다.


    <select id="getListWithPaging" resultType="domain.BoardVO">
        <![CDATA[
            SELECT bno, title, content, writer, regdate, updatedate
            FROM (
                SELECT /*+ INDEX_DESC(tbl_board pk_board) */
                ROWNUM rn, bno, title, content, writer, regdate, updatedate
                FROM tbl_board
                WHERE ROWNUM <= 20
            )
            WHERE rn > 10
        ]]>
    </select>


        13.1.1 페이징 테스트와 수정

MyBatis 의 '#{}' 를 적용하기 전 XML 설정이 잘 작동되는지 테스트 해보자.
'src/test/java/mapper' 패키지의 BoardMapperTests 클래스에 메소드를 추가하여 테스트를 진행한다.


    @Test
    public void testPaging() {
        Criteria cri = new Criteria();

        List<BoardVO> list = mapper.getListWithPaging(cri);

        list.forEach(board -> log.info(board));
    }


Criteria 클래스의 pageNum 은 1, amount 는 10 으로 기본값을 가지어 별도 파라미터 없이 생성되고,
현재 파라미터를 적용하지 않아 2 페이지의 내용이 나오는지 확인한다.


    BoardVO(bno=983033, title=새새로로운운글글, content=새글, writer=whdnjsdyd111111,
    regdate=Thu Jan 14 17:16:53 KST 2021, updateDate=Thu Jan 14 17:16:53 KST 2021)
    ...


SQL 문제가 없으니 Criteria 객체 내부 값으로 SQL 이 동작하도록 수정한다.
20 과 10 이 결국 pageNum 과 amount 를 이용하여 조절된다. 위 사항을 XML 파일에 적용하자.


    <select id="getListWithPaging" resultType="domain.BoardVO">
        <![CDATA[
            SELECT bno, title, content, writer, regdate, updatedate
            FROM (
                SELECT /*+ INDEX_DESC(tbl_board pk_board) */
                ROWNUM rn, bno, title, content, writer, regdate, updatedate
                FROM tbl_board
                WHERE ROWNUM <= #{pageNum} * #{amount}
            )
            WHERE rn > (#{pageNum} - 1) * #{amount}
        ]]>
    </select>


SQL 동작에 문제없는지 확인을 위해 testPaging() 을 조금 수정하여 확인한다.


    BoardVO(bno=983023, title=수정된wdd, content=수정된wdd, writer=user00, regdate=Thu Jan 14 17:16:53 KST 2021,
    updateDate=Thu Jan 14 17:16:53 KST 2021)
    ...


추가 확인을 위해 페이지와 출력할 양의 파라미터를 다르게 수정하면서 확인해보자.
그리고 SQL Developer 의 실행 결과와 동일하게 나타나는지 매치한다.


            13.2 BoardController 와 BoardService 수정


        13.2.1 BoardService 수정

Criteria 를 파라미터로 처리하므로 BoardService 인터페이스와 BoardServiceImpl 클래스를 수정한다.


    BoardService

    public List<BoardVO> getList(Criteria cri);


    BoardServiceImpl

    @Override
    public List<BoardVO> getList(Criteria cri) {
        log.info("get list with criteria: " + cri);

        return mapper.getListWithPaging(cri);
    }


BoardServiceTests 를 통해 테스트를 진행해보자.


    @Test
    public void testGetListPaging() {
        service.getList(new Criteria(2, 10)).forEach(board -> log.info(board));
    }


        13.2.2 BoardController 수정

기존 BoardController 의 list() 엔 파라미터가 없이 처리되어 다음과 같이 수정한다.


    @GetMapping("/list")
    public void list(Criteria cri, Model model) {
        log.info("list: " + cri);

        model.addAttribute("list", service.getList(cri));
    }


Criteria 클래스로 편하게 한 타입만 파라미터로 리턴 타입을 사용하여 편하다.
BoardController 를 pageNum 과 amount 파라미터로 테스트를 진행해보자.


    @Test
    public void testListPaging() throws Exception {
        log.info(mockMvc.perform(
                MockMvcRequestBuilders.get("/board/list")
                        .param("pageNum", "2")
                        .param("amount", "50"))
                .andReturn().getModelAndView().getModelMap());
    }