비즈니스 계층은 프레젠테이션 계층과 영속 계층 중간 다리 역할로 요구사항을 반영한다.
영속 계층은 데이터베이스 기준으로 설계를 나누지만 비즈니스 계층은 로직을 기준으로 처리한다.

'쇼핑몰 구매' 로 가정한다면 로직이 '물건을 구매한 회원에게 포인트 부여' 라면 영속 계층에선 '상품', '회원' 을 나누어 설계한다.
비즈니스 계층은 위 로직대로 구조를 만든다.


    Business        Persistence tier

                    ┌   상품 처리 객체
    구매 서비스   →   │
                    └   회원 처리 객체


            9.1 비즈니스 계층의 설정

비즈니스 계층을 위해 service 패키지를 작성한다.

설계 시 각 계층 간 연결은 인터페이스로 느슨한(loose) 연결(결합)을 한다.
게시물은 BoardService 인터페이스와 인터페이스를 구현한 BoardServiceImpl 클래스를 선언한다.


    import domain.BoardVO;

    import java.util.List;

    public interface BoardService {
        public void register(BoardVO board);

        public BoardVO get(Long bno);

        public boolean modify(BoardVO board);

        public boolean remove(Long bno);

        public List<BoardVO> getList();
    }


BoardService 메소드 설계 시 메소드 이름은 현실적으로 붙이는 것이 관례이다.
특정 게시물 가져올 때는 get(), 전체 리스트 가져올 시엔 getList() 와 같이 결정하여 진행한다.

BoardService 인터페이스를 구현하는 BoardServiceImpl 클래스를 작성한다.


    import domain.BoardVO;
    import lombok.AllArgsConstructor;
    import lombok.extern.java.Log;
    import mapper.BoardMapper;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @Log4j
    @Service
    @AllArgsConstructor
    public class BoardServiceImpl implements BoardService {
        // spring 4.3 이상에서 자동 처리
        private BoardMapper mapper;

        @Override
        public void register(BoardVO board) {

        }

        ...
    }


BoardServiceImpl 클래스에서 중요한 부분은 @Service 어노테이션이다.
@Service 는 계층 구조상 주로 비즈니스 영역을 담당하는 객체임을 표시하기 위함이다. 작성된 어노테이션은 패키지를 읽어 들이는 동안 처리된다.
BoardServiceImpl 가 정상 동작 하기 위해 BoardMapper 객체가 필요하다.

이는 @Autowired 와 같이 직접 설정해 줄 수 있고, Setter 로 처리할 수도 있다.
Lombok 으로 같은 방식을 만들 수도 있다.


    public class BoardServiceImpl implements BoardService {
        @Setter(onMethod_ = @Autowired)
        private BoardMapper mapper;


스프링 4.3 부턴 단일 파라미터를 받는 생성자에 자동으로 파라미터를 주입할 수 있다.
@AllArgsConstructor 는 모든 파라미터를 이용하는 생성자를 만들기 때문에 주입받는 생성자가 만들어진다.


        9.1.1 스프링의 서비스 객체 설정(root-context.xml)

이 인터페이스와 구현 클래스를 스프링 빈으로 인식하기 위해 root-context.xml 에 @Service 어노테이션이 있는
service 패키지를 스캔하도록 추가한다.


	<!-- Service Scan -->
	<context:component-scan base-package="service" />


    Java 설정의 경우

root-context.xml 을 대신하는 RootConfig 에 @ComponentScan 을 추가한다.


    @ComponentScan(basePackages = {"sample", "service"})


            9.2 비즈니스 계층의 구현 테스트

'src/test/java/service' 패키지를 추가하여 BoardServiceTests 클래스를 작성하여 테스트 작업을 진행하자.


    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    // @ContextConfiguration(classes = {RootConfig.class})
    @Log4j
    public class BoardServiceTests {
        @Setter(onMethod_ = @Autowired)
        private BoardService service;

        @Test
        public void testExist() {
            log.info(service);
            assertNotNull(service);
        }
    }


BoardServiceTests 첫 테스트는 주입이 가능한지 확인하는 작업으로 시작한다.
주입이 성공하면 데이터베이스 관련 로그가 출력된다.


    INFO : service.BoardServiceTests - service.BoardServiceImpl@52d239ba
    ...
    INFO : com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.


        9.2.1 등록 작업의 구현 테스트

등록 작업은 BoardServiceImpl 에서 파라미터로 전달되는 BoardVO 타입 객체를 BoardMapper 로 처리한다.
구현 코드는 다음과 같다.


    @Override
    public void register(BoardVO board) {
        log.info("register ..." + board);

        mapper.insertSelectKey(board);
    }


위 메소드는 void 타입이지만 mapper.insertSelectKey() 의 반환 값인 int 를 사용하지 않지만,
필요하다면 예외 처리나 void 대신 int 타입을 사용할 수도 있다.

mapper 의 insertSelectKey() 를 이용하여 게시물 번호를 확인할 수 있게 작성했다.
이에 대한 테스트 코드는 아래와 같다.


    @Test
    public void testRegister() {
        BoardVO board = new BoardVO();
        board.setTitle("새로 작성하는 글");
        board.setContent("새로 작성하는 내용");
        board.setWriter("newbie");

        service.register(board);

        log.info("생성된 게시물 번호: " + board.getBno());
    }


testRegister() 테스트 결과는 다음과 같이 생성된 게시물 번호를 확인할 수 있다.


    INFO : jdbc.sqltiming - INSERT INTO tbl_board (bno, title, content, writer) VALUES (8, '새로 작성하는 글',
    '새로 작성하는 내용', 'newbie') {executed in 13 msec}
    INFO : service.BoardServiceTests - 생성된 게시물 번호: 8


        9.2.2 목록(리스트) 작업의 구현과 테스트

BoardServiceImpl 클래스에 현 테이블에 저장된 모든 데이터를 가져오는 getList() 는 아래와 같이 구현한다.


    @Override
    public List<BoardVO> getList() {
        log.info("getList.............");

        return mapper.getList();
    }


테스트 코드는 아래와 같이 작성할 수 있다.


    @Test
    public void testGetList() {
        service.getList().forEach(board -> log.info(board));
    }


테스트 실행 결과로 등록한 작업들이 나타나는지 확인하자.


|----|---------------------|----------------------|-------|----------------------|----------------------|
|bno |title                |content               |writer |regdate               |updatedate            |
|----|---------------------|----------------------|-------|----------------------|----------------------|
|1   |테스트 제목               |테스트 내용                |user00 |2021-01-11 13:32:46.0 |2021-01-11 13:32:46.0 |
|2   |테스트 제목               |테스트 내용                |user00 |2021-01-11 13:48:54.0 |2021-01-11 13:48:54.0 |
|4   |테스트 제목               |테스트 내용                |user00 |2021-01-11 13:48:55.0 |2021-01-11 13:48:55.0 |
|5   |수정된 제목               |수정된 내용                |user00 |2021-01-11 13:48:56.0 |2021-01-11 16:18:39.0 |
|6   |새로 작성하는 글            |새로 작성하는 내용            |newbie |2021-01-11 15:32:17.0 |2021-01-11 15:32:17.0 |
|7   |새로 작성하는 글 select key |새로 작성하는 내용 select key |newbie |2021-01-11 15:38:43.0 |2021-01-11 15:38:43.0 |
|8   |새로 작성하는 글            |새로 작성하는 내용            |newbie |2021-01-12 00:17:48.0 |2021-01-12 00:17:48.0 |
|----|---------------------|----------------------|-------|----------------------|----------------------|


        9.2.3 조회 작업의 구현과 테스트

조회는 게시물 번호가 파라미터고 BoardVO 의 인스턴스가 리턴된다.


    @Override
    public BoardVO get(Long bno) {
        log.info("get......" + bno);

        return mapper.read(bno);
    }


테스트 코드는 다음과 같이 작성할 수 있다.


    @Test
    public void testGet() {
        log.info(service.get(1L));
    }


테스트 결과는 다음과 같다.


INFO : jdbc.resultsettable -
|----|-------|--------|-------|----------------------|----------------------|
|bno |title  |content |writer |regdate               |updatedate            |
|----|-------|--------|-------|----------------------|----------------------|
|1   |테스트 제목 |테스트 내용  |user00 |2021-01-11 13:32:46.0 |2021-01-11 13:32:46.0 |
|----|-------|--------|-------|----------------------|----------------------|


        9.2.4 삭제/수정 구현과 테스트

삭제/수정은 메소드 리턴 타입을 void 로 설계할 수도 있지만 엄격한 처리를 위해 Boolean 타입을 처리한다.


    @Override
    public boolean modify(BoardVO board) {
        log.info("modify ......" + board);

        return mapper.update(board) == 1;
    }

    @Override
    public boolean remove(Long bno) {
        log.info("remove ......" + bno);

        return mapper.delete(bno) == 1;
    }


정상적인 수정과 삭제가 이루어지면 1 이란 값이 반환되어 '==' 연산자로 true/false 를 처리할 수 있다.
테스트 코드는 다음과 같다.


    @Test
    public void testDelete() {
        // 게시물 번호 존재 여부 확인하고 테스트
        log.info("REMOVE RESULT: " + service.remove(2L));
    }

    @Test
    public void testUpdate() {
        BoardVO board = service.get(1L);

        if(board == null) {
            return;
        }

        board.setTitle("제목 수정합니다.");
        log.info("MODIFY RESULT: " + service.modify(board));
    }


testDelete() 의 경우 해당 게시물 존재 시 true 반환하고, testUpdate() 경우 게시물 조회 후 title 값을 수정한 후 업데이트 한다.