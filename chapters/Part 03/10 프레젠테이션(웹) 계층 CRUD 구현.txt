            10.1 Controller 작성

과거엔 톰캣(WAS)으로 결과를 확인하며 작성하여 시간이 오래 걸리거나 테스트 자동화에 어려움이 있었다.
따라서 WAS 를 실행하지 않고 Controller 를 테스트 하는 방법을 학습하자.


        10.1.1 BoardController 분석

작성 전에 원하는 기능을 호출하는 방식을 테이블로 정리 후 작성하자.


    Task        URL             Method  Parameter       From            URL 이동

    전체목록    /board/list     GET

    등록처리    /board/register POST        모든 항목     입력화면 필요      이동

    조회       /board/read     GET        bno=123

    삭제처리    /board/modify   POST        bno          입력화면 필요      이동

    수정처리    /board/remove   POST        모든 항목      입력화면 필요     이동


테이블에서 From 항목은 해당 URL 을 호출하기 위해 별도의 입력 화면이 필요하다는 의미.


            10.2 BoardController 작성

BoardController 느 controller 패키지에 선언하며 URL 분석된 내용들을 반영하는 메소드 설계.


    import lombok.extern.log4j.Log4j;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;

    @Controller
    @Log4j
    @RequestMapping("/board/*")
    public class BoardController {

    }


BoardController 는 @Controller 어노테이션을 추가하여 빈으로 인식하게 했고,
@RequestMapping 을 통해 "/board" 로 시작하는 모든 처리를 BoardController 가 하도록 지정했다.


        10.2.1 목록에 대한 처리와 테스트

BoardController 에서 전체 목록을 가져오는 처리를 먼저 작성한다.
BoardController 는 BoardService 타입 객체와 연동해야 하여 다음과 같이 진행한다.


    @Controller
    @Log
    @RequestMapping("/board/*")
    @AllArgsConstructor
    public class BoardController {
        private BoardService service;

        @GetMapping("/list")
        public void list(Model model) {
            log.info("list");

            model.addAttribute("list", service.getList());
        }
    }


BoardController 는 BoardService 에 의존하여 @AllArgsConstructor 로 생성자를 자동으로 만들고 주입한다.
(생성자로 만들지 않을 시 @Setter(onMethod_ @Autowired) 를 이용하여 처리한다.

list() 는 나중에 게시물 목록을 전달하기 위한 Model 파라미터로 지정하고 이를 통해 BoardServiceImpl 객체의
getList() 결과를 담아 전달한다(addAttribute). BoardController 테스트는 스프링 테스트로 확인해 본다.

'src/test/java/controller' 패키지에 BoardControllerTests 클래스를 선언한다.

URL 을 테스트 하기 위해 톰캣같은 WAS 를 실행하는 불편한 단계를 생략하기 위한 테스트 코드이다.
이는 스프링과 웹 URL 을 테스트 할 수 있고 서버를 실행하고 화면을 입력하고 오류를 수정하는 단계를 줄여줄 수 있다.


    @RunWith(SpringJUnit4ClassRunner.class)

    // Test for Controller
    @WebAppConfiguration

    @ContextConfiguration({
            "file:src/main/webapp/WEB-INF/spring/root-context.xml",
            "file:src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml"
    })
    // @ContextConfiguration(classes = {RootConfig.class, ServletConfig.class})
    @Log4j
    public class BoardControllerTests {
        @Setter(onMethod_ = @Autowired)
        private WebApplicationContext ctx;

        private MockMvc mockMvc;

        @Before
        public void setup() {
            this.mockMvc = MockMvcBuilders.webAppContextSetup(ctx).build();
        }

        @Test
        public void testList() throws Exception {
            log.info(mockMvc.perform(MockMvcRequestBuilders.get("/board/list"))
                    .andReturn().getModelAndView().getModelMap());
        }
    }


테스트 클래스 선언부에 @WebAppConfiguration 어노테이션을 적용한다.
@WebAppConfiguration 은 Servlet 의 ServletContext 를 적용하기 위해서 사용한다.

@Before 어노테이션이 적용된 setup() 메소드에선 import 할 때 JUnit 을 이용해야 한다.
@Before 가 적용된 메소드는 모든 테스트 전에 매번 실행되는 메소드가 된다.

MockMvc 는 말그대로 '가짜 mvc' 라고 생각하면 된다. 가짜로 URL 과 파라미터 등을 브라우저에서 사용하는 것처럼
만들어 Controller 를 실행해 볼 수 있다. testList() 는 MockMvcRequestBuilders 란 존재를 이용하여 GET 방식의 호출을 한다.
이후 BoardController 의 getList() 에 반환된 결과를 이용하여 Model 에 데이터를 확인한다.
톰캣으로 실행되는 방식이 아니라서 기존 테스트 코드 실행과 동일하다.

testList() 를 실행한 결과는 데이터베이스의 게시물들을 볼 수 있다.


    list=[BoardVO(bno=1, title=테스트 제목, content=테스트 내용, writer=user00, regdate=Mon Jan 11 13:32:46 KST 2021,
    updateDate=Mon Jan 11 13:32:46 KST 2021), ...


        10.2.2 등록 처리와 테스트

BoardController 에 POST 방식으로 처리되는 register() 를 작성하면 아래와 같다.


    @PostMapping("/register")
    public String register(BoardVO board, RedirectAttributes rttr) {
        log.info("register: " + board);

        service.register(board);

        rttr.addFlashAttribute("result", board.getBno());

        return "redirect:/board/list";
    }


register() 메소드는 조금 다르게 String 을 리턴 타입으로 지정하고, RedirectAttributes 를 파라미터로 지정한다.
이는 다시 목록 화면으로 이동하기 위함이고, 추가 게시물의 번호를 전달하기 위해 RedirectAttributes 를 이용한다.
리턴 시엔 'redirect:' 접두어를 사용하는데 이로 스프링 MVC 가 내부적으로 response.sendRedirect() 를 처리해 주기 때문에 편하다.

테스트 코드는 아래와 같이 작성한다.

    @Test
    public void testRegister() throws Exception {
        String resultPage = mockMvc.perform(MockMvcRequestBuilders.post("/board/register")
                .param("title", "테스트 새글 제목")
                .param("content", "테스트 새글 내용")
                .param("writer", "user00")
        ).andReturn().getModelAndView().getViewName();

        log.info(resultPage);
    }


테스트할 시 MockMvcRequestBuilders 의 post() 이용하면 POST 방식으로 데이터를 전달할 수 있고,
param() 을 이용하여 전달해야 하는 파라미터들을 지정할 수 있다.(<input> 태그 유사)
이런 방식으로 코드 작성 시 최초 작성엔 일이 많다고 느낄 수 있지만 매번 입력할 필요가 없어 수정할 경우 반복적인 테스트가 수월해진다.

테스트 실행 로그를 보면 다음과 같다.


    INFO : jdbc.sqltiming - INSERT INTO tbl_board (bno, title, content, writer) VALUES (9, '테스트 새글 제목',
     '테스트 새글 내용', 'user00') {executed in 21 msec}


로그를 보면 BoardVO 객체로 올바르게 바인딩된 결과를 볼 수 있고, 중간에 SQL 실행 결과가 보인다.
마지막엔 최종 반환 문자열을 확인할 수 있다.


        10.2.3 조회 처리와 테스트

등록 처리와 유사히 조회 처리도 BoardController 를 이용해서 처리할 수 있다.
특별한 경우 아니면 GET 방식으로 처리하니, @GetMapping 을 이용한다.


    @GetMapping("/get")
    public void get(@RequestParam("bno") Long bno, Model model) {
        log.info("/get");
        model.addAttribute("board", service.get(bno));
    }


BoardController 의 get() 메소드는 bno 값을 더 명시적으로 처리하는 @RequestParam 을 이용하여 지정한다(파라미터 이름, 변수 기준으로
동작하여 생략해도 무방). 또한 화면 쪽에 해당 번호의 게시물을 전달해야 하므로 Model 을 파라미터로 지정한다.

조회 테스트 코드는 아래와 같다.


    @Test
    public void testGet() throws Exception {
        log.info(mockMvc.perform(MockMvcRequestBuilders
                .get("/board/get")
                .param("bno", "2"))
                .andReturn()
                .getModelAndView().getModelMap());
    }


특정 게시물 조회 시 'bno' 란 파라미터가 필요하니 param() 을 통해 추가하고 실행한다.
로그는 아래와 같다.


    controller.BoardControllerTests - {board=BoardVO(bno=2, title=테스트 제목, content=테스트 내용, writer=user00,
     regdate=Mon Jan 11 13:48:54 KST 2021, updateDate=Mon Jan 11 13:48:54 KST 2021)


파라미터가 수집되었는지 확인하고 SQL 처리 결과를 확인하자. 마지막엔 Model 에 담긴 BoardVO 인스턴스 내용을 살펴볼 수 있다.


        10.2.4 수정 처리와 테스트

수정 작업은 등록과 유사하며 변경된 내용을 수집해 BoardVO 파라미터로 처리하고 BoardService 를 호출한다.
수정 작업을 시작하는 화면은 GET 방식으로 접근하는데 실제 작업은 POST 방식으로 동작하니 @PostMapping 로 처리한다.


    @PostMapping("/modify")
    public String modify(BoardVO board, RedirectAttributes rttr) {
        log.info("modify: " +board);

        if(service.modify(board)) {
            rttr.addFlashAttribute("result", "success");
        }
        return "redirect:/board/list";
    }


service.modify() 는 수정 여부를 boolean 으로 처리하므로 이를 이용해 성공한 경우엔 RedirectAttributes 에 추가한다.
테스트 코드는 다음과 같이 작성한다.


    @Test
    public void testModify() throws Exception {
        String resultPage = mockMvc
                .perform(MockMvcRequestBuilders.post("/board/modify")
                        .param("bno", "1")
                        .param("title", "수정된 테스트 새글 제목")
                        .param("content", "수정된 테스트 새글 내용")
                        .param("writer", "user00"))
                .andReturn().getModelAndView().getViewName();

        log.info(resultPage);
    }


테스트 로그는 기존과 유사하다.


    jdbc.sqltiming - UPDATE tbl_board SET title = '수정된 테스트 새글 제목', content = '수정된 테스트 새글 내용',
     writer = 'user00', updateDate = SYSDATE WHERE bno = 1


        10.2.5 삭제 처리와 테스트

삭제 처리도 조회와 유사하게 boardController 와 테스트 코드를 작성한다.
삭제는 반드시 POST 로 처리한다.


    @PostMapping("/remove")
    public String remove(@RequestParam("bno") Long bno, RedirectAttributes rttr) {
        log.info("remove ..." + bno);
        if(service.remove(bno)) {
            rttr.addFlashAttribute("result", "success");
        }
        return "redirect:/board/list";
    }


BoardController 의 remove() 는 삭제 후 페이지 이동이 필요하여 RedirectAttributes 를 파라미터로 하였고
'redirect' 로 삭제 처리 후 목록 페이지로 이동한다.

테스트 코드는 기존 등록 처리와 유사하다.


    @Test
    public void testRemove() throws Exception {
        // 삭제전 데이터베이스 게시물 번호 확인할 것
        String resultPage = mockMvc.perform(MockMvcRequestBuilders.post("/board/remove")
                .param("bno", "9"))
                .andReturn().getModelAndView().getViewName();

        log.info(resultPage);
    }


MockMvc 로 파라미터 전달 시 문자열로만 처리하며 테스트 게시물이 존재하는지 확인하고 테스트한다.
로그는 아래와 같다.


    INFO : jdbc.sqltiming - DELETE tbl_board WHERE bno = 9
     {executed in 31 msec}


대부분 일정이 없어 테스트를 작성하지 않는 경우가 많은데 팀원 경험치가 낮을 수록 테스트를 먼저 진행해보자.
반복적인 입력, 수정, WAS 재시작 시간 등을 고려한다.