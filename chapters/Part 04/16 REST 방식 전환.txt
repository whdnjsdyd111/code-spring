시대가 바뀌며 URI 의미가 조금씩 변했는데 과거에 제작된 웹 페이지들의 경우 페이지를 이동하더라도
브라우저의 주소는 변화하지 않는 방식을 선호했다(네이버 카페 등). 최근에는 대부분 페이지를 이동하면
브라우저 내의 주소 역시 같이 이동하는 방식을 사용한다.

REST 는 'Representational State Transfer' 의 약어로 URI 는 한 고유 리소스를 대표하게 설계되는 개념에
전송방식을 결합하여 원하는 작업을 지정한다. 예로 'board/123' 게시물은 123번 고슈 의미를 가지도록 설계하고,
이에 대한 처리는 GET, POST 방식을 추가 정보로 결정한다.


    URI + GET/POST/PUT/DELETE ...


스프링 @RequestMapping 이나 @ResponseBody 와 같이 REST 방식의 데이터 처리를 위한 여러 종류의 어노테이션과 기능이 있다.
REST 와 관련하여 알아둘 어노테이션은 다음과 같다.


    어노테이션           기능

    @RestController     Controller 가 REST 방식 처리를 위한 것임을 명시

    @ResponseBody       일반적인 JSP 같은 뷰로 전달이 아닌 데이터 자체를 전달하기 위한 용도

    @PathVariable       URL 경로의 값을 파라미터로 추출할 때 사용

    @CrossOrigin        Ajax 의 크로스 도메인 문제를 해결해주는 어노테이션

    @RequestBody        JSON 데이터를 원하는 타입으로 바인딩


            16.1 @RestController

REST 방식은 서버에서 전송하는 것이 순수 데이터라는 점이다. 기존 Controller 에서 Model 에 데이터를 담아 JSP 등의 뷰(View)로
전달하는 방식이 아니라 기존 Controller 와 다르게 동작한다.

스프링 4부터 @Controller 외에 @RestController 란 어노테이션이 추가되었는데 Controller 의 모든 메소드 리턴 타입을 기존과
다르게 처리한다는 것을 명시한다.
@RestController 이전엔 @Controller 선언부에 @ResponseBody 를 이용하여 동일한 결과를 만들 수 있다.
@RestController 메소드의 리턴 타입으로 사용자가 정의한 클래스 타입을 사용할 수 있고, 이를 JSON 이나 XML 로 자동 처리 가능하다.


        16.1.1 예제 준비

JSON 데이터 처리를 위해 jackson-databind 라이브러리를 pom.xml 에 추가한다.
jackson-databind 라이브러리는 브라우저에 객체를 JSON 이란 포맷의 문자열로 변환하여 전송할 때 필요하다.
XML 처리는 jackson-dataformat-xml 라이브러리를 이용한다.


    <!-- JSON -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.11.3</version>
    </dependency>

    <!-- XML -->
    <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-xml</artifactId>
        <version>2.11.3</version>
    </dependency>


테스트 시 직접 Java 인스턴스를 JSON 타입 문자열로 변환해야 할 일도 있으니 gson 라이브러리도 추가한다.


    <dependency>
        <groupId>com.google.code.gson</groupId>
        <artifactId>gson</artifactId>
        <version>2.8.6</version>
    </dependency>


            16.2 @RestController 의 반환 타입

스프링 @RestController 는 기존 @Controller 와 크게 다른점은 없다.
'src/main/java/controller' 패키지에 SampleController2 클래스를 생성한다.


    import lombok.extern.java.Log;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    @RequestMapping("/sample2")
    @Log
    public class SampleController2 {

    }


        16.2.1 단순 문자열 반환

@RestController 는 JSP 와 달리 순수 데이터를 반환하여 다양한 포맷 데이터를 전송할 수 있다.
주로 일반 문자열이나 JSON, XML 등을 사용한다.

SampleController2 에 문자열을 반환하기 위해 다음 형태로 작성한다.


    @RestController
    @RequestMapping("/sample2")
    @Log
    public class SampleController2 {

        @GetMapping(value = "/getText", produces = "text/plain; charset=UTF-8")
        public String getText() {
            log.info("MIME TYPE: " + MediaType.TEXT_PLAIN_VALUE);

            return "안녕하세요";
        }
    }


기존 @Controller 문자열을 반환할 경우 JSP 파일 이름으로 처리하지만, @RestController 경우 순수 데이터가 된다.
@GetMapping 에 사용된 produces 속성은 해당 메소드가 생산하는 MIME 타입을 의미한다.
예제와 같이 문자열로 직접 지정할 수도 있고, 메소드 내에 MediaType 클래스를 이용할 수도 있다.

프로젝트 실행 후 '/sample2/getText' 를 호출한다.

브라우저에 전송된 실제 데이터는 개발조 도구에서 확인할 수 있다.

결과를 보면 produces 속성값으로 지정된 'text/plain' 결과가 나오는 것을 확인할 수 있다.


        16.2.2 객체의 반환

객체 반환 작업은 JSON 이나 XML 을 이용한다. 전달된 객체를 생산하기 위해 'src/main/java/domain' 패키지에
Sample2VO 클래스를 작성한다.


    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class Sample2VO {
        private Integer mno;
        private String firstName;
        private String lastName;
    }


Sample2VO 클래스는 비어 있는 생성자를 만들기 위해 @NoArgsConstructor 와 모든 속성을 사용하는 생성자를 위해
@AllArgsConstructor 어노테이션을 이용했다.

SampleController2 에선 Sample2VO 를 리턴하는 메소드는 다음과 같다.


    @GetMapping(value = "/getSample", produces = { MediaType.APPLICATION_JSON_UTF8_VALUE,
            MediaType.APPLICATION_XML_VALUE })
    public Sample2VO getSample() {
        return new Sample2VO(112, "스타", "로드");
    }


getSample2()는 XML 과 JSON 방식 데이터를 생성할 수 있도록 작성됐는데, 브라우저에서 '/sample2/getSample2' 를 호출하면
확인할 수 있다.

결과를 확인하면 XML 데이터가 보이며 개발자 도구를 통해 보아도 XML 데이터라는 것을 확인할 수 있다.

동일한 메소드를 '/sample/getSample2.json' 을 호출하면 기존과 달리 JSON 타입의 데이터가 전달되는 것을 확인할 수 있다.

@GetMapping 이나 @RequestMapping 의 produces 속성은 반드시 지정해야 하는 것은 아니므로 생략하는 것도 가능하다.


    @GetMapping(value = "/getSample")
    public Sample2VO getSample() {
        return new Sample2VO(112, "스타", "로드");
    }


        16.2.3 컬렉션 타입의 객체 반환

경우에 따라 여러 데이터를 한 번에 전송하기 위해 배열이나 리스트, 맵 타입의 객체들을 전송하는 경우도 발생한다.


    @GetMapping(value = "/getList")
    public List<Sample2VO> getList() {
        return IntStream.range(1, 10).mapToObj(i -> new Sample2VO(i, i + "First", i + " Last"))
                .collect(Collectors.toList());
    }


getList() 는 내부적으로 1 부터 10 미만까지의 루프를 처리하면서 Sample2VO 객체를 만들어 List<Sample2VO> 로 만들어 낸다.

브라우저에 'sample2/getList' 를 호출하여 기본적으로 XML 데이터를 전송하는 것을 볼 수 있다.
확장자 '.json' 으로 처리하면 '[]' 로 싸여진 JSON 형태의 배열 데이터를 볼 수 있다.

맵의 경우는 '키' 와 '값' 을 가지는 하나의 객체로 간주된다.


    @GetMapping(value = "/getMap")
    public Map<String, Sample2VO> getMap() {
        Map<String ,Sample2VO> map = new HashMap<>();
        map.put("First", new Sample2VO(111, "그루트", "주니어"));

        return map;
    }


브라우저에 '/sample2/getMap' 을 호출하면 결과를 확인할 수 있다.

Map 을 이용한 경우 '키(key)' 에 속하는 데이터는 XML 로 변환되는 경우 태그의 이름이 되어 문자열을 지정한다.


        16.2.4 ResponseEntity 타입

REST 방식 호출의 경우 화면 자체가 아닌 데이터 자체를 전송하는 방식으로 처리되기 때문에 데이터를 요청한 쪽에서는 정상적인
데이터인지 비정상적인 데이터인지를 구분할 수 있는 확실한 방법을 제공해야만 한다.

ResponseEntity 는 데이터와 함께 HTTP 헤더 상태 메시지 등을 같이 전달하는 용도로 사용한다.
HTTP 상태 코드와 에러 메시지 등을 함께 전달할 수 있어 받는 입장에선 확실한 결과를 알 수 있다.


    @GetMapping(value = "/check", params = {"height", "weight"})
    public ResponseEntity<Sample2VO> check(Double height, Double weight) {
        Sample2VO vo = new Sample2VO(0, "" + height, "" + weight);

        ResponseEntity<Sample2VO> result = null;

        if(height < 150) {
            result = ResponseEntity.status(HttpStatus.BAD_GATEWAY).body(vo);
        } else {
            result = ResponseEntity.status(HttpStatus.OK).body(vo);
        }

        return result;
    }


check() 는 반드시 'height' 와 'weight' 파라미터로 전달받는다.
이때 만일 'height' 값이 150 보다 작으면 502(bad gateway) 상태 코드를 전송하고, 그렇지 않으면 200(ok) 코드와 데이터를 전송한다.

'/sample2/check.json?height=140&weight=60' 과 같이 JSON 타입의 데이터를 요구하고,
height 값을 150 보다 작을 경우 502 메시지와 데이터를 전달된다.


            16.3 @RestController 파라미터

@RestController 는 기존 @Controller 에서 사용한 일반적 타입이나 사용자가 정의한 타입(클래스)를 사용한다.
여기에 추가로 몇 어노테이션을 이용하는 경우가 있다.


    - @PathVariable : 일반 컨트롤러에서도 사용 가능하지만 REST 방식에서 자주 사용된다. URL 경로의 일부 파라미터로 사용할 때 이용
    - @RequestBody  : JSON 데이터를 원하는 타입의 객체로 변환해야 하는 경우 주로 사용


        16.3.1 @PathVariable

REST 방식에서 URL 내에 최대한 많은 정보를 담으려고 노력한다.
예전엔 '?' 뒤에 쿼리 스트링을 추가하여 파라미터로 전달했는데 REST 방식에선 경로의 일부로 차용되는 경우가 많다.

스프링 MVC 에선 @PathVariable 어노테이션으로 URL 상 경로의 일부 파라미터로 사용할 수 있다.


    http://localhost:8000/sample2/{sno}
    http://localhost:8000/sample2/{sno}/page/{pno}


위 URL 에 '{}' 로 처리된 부분은 컨트롤러의 메소드에서 변수로 처리 가능하다.
@PathVariable 은 '{}' 의 이름을 처리할 때 사용한다.

REST 방식에선 URL 자체에 데이터를 식별할 수 있는 정보들을 표현하는 경우가 많으므로 다양한 방시으로
@PathVariable 이 사용된다.


    @GetMapping("/product/{cat}/{pid}")
    public String[] getPath(
            @PathVariable("cat") String cat,
            @PathVariable("pid") Integer pid) {
        return new String[] { "category: " + cat, "productid: " + pid };
    }


@PathVariable 을 적용하고 싶을 때 '{}' 를 이용하여 변수명을 지정하고, @PathVariable 을 이용해 지정된 이름의 변숫값을 얻을 수 있다.
값을 얻을 때엔 int, double 같은 기본 자료형은 사용할 수 없다.

브라우저에 '/sample2/product/bags/1234' 로 호출하면 cat 과 pid 변수의 값으로 처리되는 것을 확인할 수 있다.


        16.3.2 @RequestBody

@RequestBody 는 전달된 요청(request)의 내용(body)를 이용하여 해당 파라미터의 타입으로 변환을 요구한다.
내부적으로 HttpMessageConverter 타입의 객체로 다양한 포맷의 입력 데이터를 변환할 수 있다.
대부분 JSON 데이터를 서버에 보내 원하는 타입의 객체로 변환하는 용도지만, 경우에 따라 원하는 포맷의 데이터를 보내고,
이를 해석하여 원하는 타입으로 사용하기도 한다.

변환을 위한 예제로 'src/main/java/domain' 패키지에 Ticket 클래스를 정의한다.


    @Data
    public class Ticket {
        private int tno;
        private String owner;
        private String grade;
    }


Ticket 클래스는 번호(tno), 소유주(owner), 등급(grade)을 지정한다.

Ticket 사용 예제는 SampleController2 에 추가한다.


    @PostMapping("/ticket")
    public Ticket convert(@RequestBody Ticket ticket) {
        log.info("convert ... ticket " + ticket);

        return ticket;
    }


SampleController2 의 다른 메소드와 달리 @PostMapping 을 적용하느데, @RequestBody 가 말그대로 요청(request)한 내용(body)를
처리하기 때문에 일반적인 파라미터 전달방식을 사용할 수 없다.


            16.4 REST 방식 테스트

위 GET 방식이나 POST 방식은 JSON 형태의 데이터 처리를 하는데 많은 시간과 노력이 들어간다.
@RestController 를 쉽게 테스트하는 방법은 주로 REST 방식의 데이터를 전송하는 툴이나 JUnit 과 spring-test 테스트 방식을
고려할 수 있다.


        16.4.1 JUnit 기반 테스트

JUnit 방식은 PART 3 방식 그대로 이용한다. REST 방식은 JSON 데이터를 테스트해야 하므로 차이점 위주로 알아두자.

'src/test/java/sample' 패키지에 SampleController2Tests 클래스를 작성한다.


    import com.google.gson.Gson;
    import domain.Ticket;
    import lombok.Setter;
    import lombok.extern.log4j.Log4j;
    import org.junit.Before;
    import org.junit.Test;
    import org.junit.runner.RunWith;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.MediaType;
    import org.springframework.test.context.ContextConfiguration;
    import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
    import org.springframework.test.context.web.WebAppConfiguration;
    import org.springframework.test.web.servlet.MockMvc;
    import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
    import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
    import org.springframework.test.web.servlet.setup.MockMvcBuilders;
    import org.springframework.web.context.WebApplicationContext;

    @RunWith(SpringJUnit4ClassRunner.class)
    // Test for controller
    @WebAppConfiguration

    @ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml",
            "file:src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml"})
    // Java Config
    // @ContextConfiguration(classes = {RootConfig.class, ServletConfig.class})
    @Log4j
    public class SampleController2Tests {
        @Setter(onMethod_ = @Autowired)
        private WebApplicationContext ctx;

        private MockMvc mockMvc;

        @Before
        public void setup() {
            this.mockMvc = MockMvcBuilders.webAppContextSetup(ctx).build();
        }

        @Test
        public void testConvert() throws Exception {
            Ticket ticket = new Ticket();
            ticket.setTno(123);
            ticket.setOwner("Admin");
            ticket.setGrade("AAA");

            String jsonStr = new Gson().toJson(ticket);

            log.info(jsonStr);

            mockMvc.perform(MockMvcRequestBuilders.post("/sample2/ticket")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(jsonStr))
                    .andExpect(MockMvcResultMatchers.status().is(200));
        }
    }


testConvert() 는 SampleController2 에 작성해 둔 convert() 메소드를 테스트하기 위해 작성했다.
SampleController2 의 convert() 는 JSON 으로 전달되는 데이터를 받아 Ticket 타입으로 변환한다.
이를 위해 데이터가 JSON 이란 명시를 해주어야 한다. MockMvc 는 contentType() 으로 데이터가 무엇인지 알려줄 수 있다.
코드 내에 Gson 라이브러리는 Java 객체를 JSON 문자열로 변환하기 위해 사용한다.

위 코드는 실행하면 다음과 같이 JSON 문자열이 Ticket 타입으로 변환된 것을 볼 수 있다.


    INFO : sample.SampleController2Tests - {"tno":123,"owner":"Admin","grade":"AAA"}
    1월 17, 2021 12:55:03 오전 controller.SampleController2 convert
    정보: convert ... ticket Ticket(tno=123, owner=Admin, grade=AAA)


JUnit 장점은 역시 톰캣을 구동하지 않고 컨트롤러를 구동해 볼 수 있다는 점이다.


        16.4.2 기타 도구

JUnit 방식 외에 Tomcat 을 이용한다면 REST 방식을 테스트할 수 있는 여러 도구가 있다.
Mac, 리눅스라면 curl 도구를 이용하거나 Java 나 각종 라이브러리가 존재한다.

최근 브라우저에서 직접 REST 방식을 테스트하는 도구가 많으며 Chrome 브라우저 앱스토어(chrome://apps/)로 이동하여
'REST client' 로 검색하면 꽤 많은 크롬 확장 프로그램을 볼 수 있다.

여러 확장자 중 'Restlet Client' 로 테스트 진행을 할 수 있다.
설치 후 주소창 옆 아이콘으로 실행하여 POST 방식 'http://localhost:8000/sample2/ticket' 으로 접근하여 처리할 수 있다.


            16.5 다양한 전송방식

REST 방식엔 데이터 교환에 특이한 점은 GET/POST 외에 다양한 방식이 존재한다.
HTTP 전송 방식은 다음 형태가 있다.


    작업      전송방식

    Create      POST

    Read        GET

    Update      PUT

    Delete      DELETE


REST 방식은 URI 와 같이 결합하여 회원(member)라는 자원을 대상으로 전송방식을 결합하면 다음 형태가 된다.


    작업  전송방식    URI

    등록  POST    /members/new

    조회  GET     /members/{id}

    수정  PUT     /member/{id} + body (json 데이터 등)

    삭제  DELETE  /member/{id}


위 방식들도 마찬가지로 테스트가 쉽지 않아 JUnit 이나 'Restlet Client' 등 도구로 테스트하고 개발한다.