            4.1 MyBatis

MyBatis 는 'SQL 매핑 프레임워크' 로 분류된다.
개발자들은 JDBC 코드의 복잡하고 지루한 작업을 피하는 용도로 사용한다.


    전통 JDBC 프로그램                                MyBatis

    직접 Connection 하고 close()                     자동 Connection close()
    PreparedStatement 직접 생성 및 처리               MyBatis 내부적으로 PreparedStatement 처리
    PreparedStatement 의 setXXX() 등 모두            #{prop} 와 같이 속성을 지정하면 내부적으로 자동 처리
    개발자가 처리
    SELECT 경우 직접 ResultSet 처리                   ResultSet 처리


MyBatis 는 기존 SQL 그대로 활용할 수 있고 낮은 진입장벽이 큰 장점이다.
그리고 mybatis-spring 이라는 라이브러리를 통해 쉽게 연동 작업을 처리할 수 있다.


    Spring

    Mybatis-Spring  ↔   MyBatis ↔   DB


        4.1.1 MyBatis 관련 라이브러리 추가

    - spring-jdbc/spring-tx : 스프링에서 데이터 베이스 처리와 트랜잭션 처리
    - mybatis/mybatis-spring : MyBatis 와 스프링 연동 라이브러리


    <dependency>
        <groupId>org.mybatis</groupId>
        <artifactId>mybatis</artifactId>
        <version>3.5.6</version>
    </dependency>
    <dependency>
        <groupId>org.mybatis</groupId>
        <artifactId>mybatis-spring</artifactId>
        <version>2.0.6</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
        <version>${org.springframework-version}</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-tx</artifactId>
        <version>${org.springframework-version}</version>
    </dependency>


        4.1.2 SQLSessionFactory

MyBatis 의 핵심 객체는 SQLSession 과 SQLSessionFactory 이다.

SQSessionFactory 은 내부적으로 SQLSession 을 만들어내는 객체이다.
개발에서는 SQLSession 을 통해 Connection 을 생성하거나 SQL 을 전달하고 결과를 받는 구조로 작성한다.

root-context.xml 은 아래와 같이 작성한다.


	<!-- DataSource -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		  destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<!-- SQLSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>


스프링 SqlSessionFactory 등록 작업은 SqlSessionFactoryBean 을 이용한다.
패키지명을 보면 MyBatis 가 아닌 스프링 연동 작업 처리인 mybatis-spring 라이브러리의 클래스임을 알 수 있다.


    Java 설정 이용할 경우

RootConfig 클래스에 @Bean 으로 설정한다.


    @Bean
    public SqlSessionFactory sqlSessionFactory() throws Exception {
        SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
        sqlSessionFactory.setDataSource(dataSource());
        return sqlSessionFactory.getObject();
    }


SqlSessionFactoryBean 을 이용해서 SqlSession 을 사용해 보는 테스트를 기존 DataSourceTests 클래스에 추가한다.


    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    // @ContextConfiguration(classes = {RootConfig.class})
    @Log4j
    public class DataSourceTests {

        @Setter(onMethod_ = @Autowired)
        private DataSource dataSource;

        @Setter(onMethod_ = @Autowired)
        private SqlSessionFactory sqlSessionFactory;

        @Test
        public void testConnection() {
            try(Connection con = dataSource.getConnection()) {
                log.info(con);
            } catch (Exception e) {
                fail(e.getMessage());
            }
        }

        @Test
        public void testMyBatis() {
            try(SqlSession session = sqlSessionFactory.openSession();
                Connection con = session.getConnection();) {
                log.info(session);
                log.info(con);
            } catch (Exception e) {
                fail(e.getMessage());
            }
        }
    }


testMyBatis() 는 설정된 SqlSessionFactory 인터페이스 타입의 SqlSessionFactoryBean 을 이용해 생성하고,
이를 이용해 Connection 까지 테스트 한다.
정상적으로 실행된다면 다음 로그가 출력된다.


    INFO : persistence.DataSourceTests - org.apache.ibatis.session.defaults.DefaultSqlSession@55322aab
    INFO : persistence.DataSourceTests - HikariProxyConnection@726408598 wrapping oracle.jdbc.driver.T4CConnection@13d9cbf5


            4.2 스프링과의 연동 처리

SQLSessionFactory 를 이용해 코드를 작성해도 직접 Connection 을 얻어 JDBC 코딩이 가능하지만,
SQL 설정을 분리하고, 자동 처리되는 방식도 좋다. 이를 위해 MyBatis 에 Mapper 라는 존재가 있다.

Mapper 는 SQL 과 그에 대한 처리를 지정하는 역할을 한다.
MyBatis-Spring 을 이용한 경우 Mapper 는 XML 과 인터페이스 + 어노테이션 형태로 작성할 수 있다.


        4.2.1 Mapper 인터페이스

Mapper 작업은 XML 과 인터페이스를 이용해 작성할 수 있다.
우선 인터페이스를 'src/main/java/mapper' 패키지에 TimeMapper 인터페이스를 추가한다.

TimeMapper 인터페이스에 MyBatis 어노테이션으로 SQL 메소드를 추가한다.


    import org.apache.ibatis.annotations.Select;

    public interface TimeMapper {
        @Select("SELECT sysdate FROM dual")
        public String getTime();
    }


    Mapper 설정

Mapper 를 작성해 주었다면 MyBatis 동작 시 Mapper 를 인식할 수 있도록 root-context.xml 에 추가 설정이 필요하다.
간단히 <mybatis:scan> 태그를 이용한다.


	<!-- Mapper Interface Scan -->
	<mybatis-spring:scan base-package="mapper" />


<mybatis-spring:scan> 태그는 base-package 에 지정된 모든 MyBatis 관련 어노테이션을 찾아 처리한다.
Mapper 는 XML, 인터페이스로 설정할 수 있지만, 번잡할 수 있어 패키지를 인식하는 방법이 가장 편하다.


    Java 설정 이용할 경우

Java 설정을 이용할 경우 클래스 선언부 mybatis-spring 에서 사용하는 @MapperScan 을 이용해 처리한다.


    @Configuration
    @ComponentScan(basePackages = {"sample"})
    @MapperScan(basePackages = {"mapper"})
    public class RootConfig {...}


        4.2.2 Mapper 테스트

MyBatis-Spring 은 Mapper 인터페이스로 실제 SQL 처리가 되는 클래스를 자동 처리한다.
개발자는 인터페이스와 SQL 작성만으로 JDBC 처리를 끝낼 수 있다.

'src/test/persistence' 에 TimeMapperTests 클래스를 생성해서 처리한다.


    import lombok.Setter;
    import lombok.extern.log4j.Log4j;
    import mapper.TimeMapper;
    import org.junit.Test;
    import org.junit.runner.RunWith;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.test.context.ContextConfiguration;
    import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    // @ContextConfiguration(classes = {RootConfig.class})
    @Log4j
    public class TimeMapperTests {
        @Setter(onMethod_ = @Autowired)
        private TimeMapper timeMapper;

        @Test
        public void testGetTime() {
            log.info(timeMapper.getClass().getName());
            log.info(timeMapper.getTime());
        }
    }


위 코드에 timeMapper.getClass().getName() 으로 내부적으로 클래스가 만들어 진 것을 확인할 수 있다.
실행을 하면 다음과 같은 로그를 확인할 수 있다.


    INFO : persistence.TimeMapperTests - com.sun.proxy.$Proxy20
    INFO : persistence.TimeMapperTests - 2021-01-07 13:15:00


        4.2.3 XML 매퍼와 같이 쓰기

SQL 이 복잡하거나 길어지는 경우엔 어노테이션 보다는 XML 방식을 더 선호한다.

XML 작성 시 파일 위치와 파일에 지정하는 namespace 속성이 중요한데, XML 파일 위치의 경우 Mapper 인터페이스가 있는 곳에
작성하거나 'src/main/resources' 구조에 XML 을 저장할 폴더를 생성할 수 있다.

'src/main/resource/mapper' 폴더 내에 TimeMapper.xml 파일을 생성한다.

XML 파일에서 MyBatis XML 매퍼에 대한 태그 설정은 http://www.mybatis.org/mybatis-3/ko/sqlmap-xml.html 에서 확인할 수 있다.

Mapper 인터페이스와 XML 을 같이 이용해보기 위해 TimeMapper 인터페이스에 메소드를 추가 선언한다.


    import org.apache.ibatis.annotations.Select;

    public interface TimeMapper {
        @Select("SELECT sysdate FROM dual")
        public String getTime();

        public String getTime2();
    }


위 인터페이스의 getTime2() 에는 @Select 와 같은 MyBatis 어노테이션이 존재하지 않는데 XML 을 이용해서 처리할 것이다.
TimeMapper.xml 은 다음과 같다.


    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE mapper
            PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/schema/mybatis-3-mapper.dtd">
        <mapper namespace="mapper.TimeMapper">

        <select id="getTime2" resultType="string">
            SELECT sysdate FROM dual
        </select>
    </mapper>


위에 주목해야 하는 점은 <mapper> 태그의 namespace 속성값이다.
MyBatis 는 Mapper 인터페이스와 XML 의 이름을 namespace 속성값으로 판단한다.
위와 같이 <mapper namespace="mapper.TimeMapper"> 와 동일한 이름이 존재하면 병합 처리한다.
따라서 메소드 선언은 인터페이스에 존재하고 SQL 처리는 XML 을 이용하는 방식이라 볼 수 있다.

<select> 태그의 id 속성의 값은 메소드 이름과 동일해야 한다.
resultType 속성을 가지는데 인터페이스에 선언된 메소드의 리턴 타입과 동일하게 작성한다.

최종확인을 위해 테스트 작업을 진행해보자.


    @Test
    public void testGetTime2() {
        log.info("getTime2");
        log.info(timeMapper.getTime2());
    }


getTime2() 코드의 결과는 getTime() 과 동일하다.


    INFO : persistence.TimeMapperTests - getTime2
    INFO : persistence.TimeMapperTests - 2021-01-07 17:59:07


        4.3 log4jdbc-log4j2 설정

MyBatis 는 내부적으로 JDBC 의 PreparedStatement 로 SQL 을 처리한다.
SQL 에 전달된 파라미터는 JDBC 와 같이 "?" 로 치환되어 처리하는데 복잡한 SQL 의 경우 "?" 값이 확인이 어렵고
SQL 의 내용 확인도 어렵다. 이를 해결하기 위해 "?" 가 어떤 값으로 처리됐는지 확인하는 기능으로 SQL 로그를 확인 가능한
log4jdbc-log4j2 라이브러리를 사용한다.

pom.xml 에 라이브러리를 설정한다.


    <dependency>
        <groupId>org.bgee.log4jdbc-log4j2</groupId>
        <artifactId>log4jdbc-log4j2-jdbc4</artifactId>
        <version>1.16</version>
    </dependency>


라이브러리 추가 후 로그 설정 파일을 추가하고 JDBC 연결 정보를 수정해야 함

우선 'src/main/resources' 아래에 log4jdbc.log4j2.properties 파일을 추가한다.


    log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator


log4jdbc 를 이용한 경우 JDBC 드라이버와 URL 정보를 수정한다. root-context.xml 의 일부를 수정한다.


	<!-- HikariCP Connection Pool -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- <property name="driverClassName"
				  value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl"
				  value="jdbc:oracle:thin:@localhost:1521:XE" /> -->

		<property name="driverClassName"
				  value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="jdbcUrl"
				  value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="book_ex" />
		<property name="password" value="book_ex" />
	</bean>


변경된 부분은 'net.sf.log4jdbc.sql.jdbcapi.DriverSpy' 로 수정한 작업과 JDBC 연결 URL 중간에 log4jdbc 을 추가했다.
이 두 설정으로 데이터베이스의 로그를 기록한다. 설정을 변경 후 코드를 실행하면 JDBC 로그들이 출력된 것을 볼 수 있다.


    INFO : jdbc.resultsettable -
    |--------------------|
    |sysdate             |
    |--------------------|
    |2021-01-07 18:20:27 |
    |--------------------|


Java 설정을 이용하는 경우 RootConfig 를 다음과 같이 반영한다.


    @Bean
    public DataSource dataSource() {
        HikariConfig hikariConfig = new HikariConfig();
        // hikariConfig.setDriverClassName("oracle.jdbc.driver.OracleDriver");
        // hikariConfig.setJdbcUrl("jdbc:oracle:thin:@localhost:1521:XE");
        hikariConfig.setDriverClassName("net.sf.log4jdbc.sql.jdbcapi.DriverSpy");
        hikariConfig.setJdbcUrl("jdbc:log4jdbc:oracle:thin:@localhost:1521:XE");
        hikariConfig.setUsername("book_ex");
        hikariConfig.setPassword("book_ex");
        ...


        4.3.1 로그의 레벨 설정

테스트 코드가 상당히 많은 양의 로그가 출력되면 불편할 수 있기 때문에 로그의 레벨을 이용해서 수정할 필요가 있다.
테스트 코드의 로그 설정은 'src/test/resources' 밑에 log4j.xml 을 이용한다.

테스트 코드가 실행될 때 'INFO ... ' 메시지는 log4j.xml 마지막 부분의 설정에 영향을 받는다.


	<!-- Root Logger -->
	<root>
		<priority value="info" />
		<appender-ref ref="console" />
	</root>


만일 log4jdbc 에 출력되는 로그를 조절하고 싶을 시 <logger> 를 추가로 지정한다.


	<logger name="jdbc.audit">
		<level value="warn" />
	</logger>

	<logger name="jdbc.resultset">
		<level value="warn" />
	</logger>

	<logger name="jdbc.connection">
		<level value="warn" />
	</logger>


기본 설정의 로그는 info 레벨이기 때문에 warn 과 같이 더 높은 레벨의 로그만 기록하게 수정하면
로그의 양이 줄어드는 것을 볼 수 있다.