            2.1 스프링 프레임워크 간략한 역사

프레임워크는 '뼈대나 근간을 이루는 코드들의 묶음' 으로  개발자 개개인의 차이나는 성향을 프레임워크를 통해
기본 흐름이나 구조를 정하고 이 구조에 팀원들이 코드를 추가하는 방식

프레임워크 최대 장점은 실력이 부족한 개발자도 반쯤 완성된 상태에서 필요한 부분을 조립하는 형태의 개발이 가능하다는 점
일정 품질이 보장되고 자신이 맡은 코드를 개발해서 넣어주는 형태로 개발 시간이 단축

90년대의 경량 프레임워크(하드웨어적 구성)들은 스프링과 뚜렷한 차별점이 있음


    - 복잡한 반기에 들어 만들어진 프레임워크

복잡성을 해결하기 위해 나온 스프링은 일반적인 Java 클래스 구조이기 때문에 낮은 진입장벽

    - 전체 구조 설계에 유용한 프레임워크

스프링은 한 분야에 집중하지 않고 전체를 설계하는 용도로 사용 가능
근본적인 사상 자체는 OOP 로 구조를 설계하는 사상 및 의존성 주입

    - 다른 프레임워크 포용

스프링은 전체 구조에 집중하여 특정 영역의 프레임워크들과 공존하는 방식
기본 뼈대를 흔들지 않고 여러 프레임워크 혼용 가능

    - 개발 생산성 및 개발 도구 지원

STS나 이클립스, 인텔리제이 등 다양한 개발도구 존재


스프링의 변화는 다음과 같다.


    - Spring 2.5

어노테이션을 활용한 설정 도입

    - Spring 3.0

별도 설정 없이 Java 클래스만으로 설정 파일 대신하게 지원

    - Spring 4.0

모바일 및 웹 환경의 REST 방식 컨트롤러 지원

    - Spring 5.0

Reactor 를 이용한 Reactive 스타일 개발 환경 지원


        2.1.1 스프링 주요 특징

    - POJO 기반의 구성

스프링은 가벼운 프레임워크지만, 다른 프레임워크와 달리 관계 구성에 대한 API 등을 사용하지 않는 POJO(Plain Old Java Object)의
구성만으로 구성하도록 제작되었다. 쉽게 말해 Java 코드로 객체를 구성하는 방식이다.

이것은 특정 라이브러리나 컨테이너 기술에 종속적이지 않아 생산성에 유리하고 유연하다는 장점이 있다.


    - 의존성 주입(DI)과 스프링

의존성(Dependency)은 하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것을 의미한다. 즉, 한 객체가 다른 객체의 상테에 따라
영향을 받는 것을 의미한다. 흔히 A 객체가 B 객체 없이 동작이 불가능하면 'A가 B에 의존적이다' 라고 표현한다.

주입(Injection)은 외부에서 밀어 넣는 것을 의미한다. 먼저, 음식점으로 비유하면 점주가 직접 식재료를 구하고 가게를 여는 방법과
프렌차이즈일 시 본사에서 트럭 등으로 식재료를 공급하는 경우가 있다.
필요에 따라 주체가 능동적인지 수동적인지에 대한 문제이다.

위의 두 번째 방식은 점주 측 입장에선 식재료를 모두 구하러 다닐 필요가 없이 '장사에만 집중' 할 수 있다는 점이다.
이를 의존성 주입으로 본다면 '어떤 객체에 의존하든 자신의 역할은 변하지 않는다', '주입받는 입장에선 어떤 객체인지 신경쓸 필요 없다'
라는 특징이 나타난다.


                                                →           ←
            A   →   B                       A           ?       B
                                                ←

    A 객체로 B에 직접 주입하는 방식             A는 필요하다는 신호만 보내고 B 객체는 주입하는 것은 외부에서 이루어지는 방식


스프링은 ApplicationContext 라는 존재가 필요한 객체들을 생성하고, 필요한 객체들을 주입하는 역할을 해주는 구조이다.
ApplicationContext 가 관리하는 객체들을 '빈(Bean)' 이라는 용어로 부르고, 빈과 빈 사이의 의존 관계를 처리하는 방식으로
XML 설정, 어노테이션 설정, Java 설정 방식을 이용할 수 있다.

    - AOP 지원

반복적인 코드를 제거하기 위해 스프링은 프레임워크로 반복적인 코드를 줄이고, 비즈니스 로직에만 집중할 수 있는 방법을 제공한다.
대부분 시스템에 공통적인 것은 아니지만, 반드시 처리가 필요한 부분을 스프링에선 '횡단 관심사(cross-concern)' 라고 한다.
스프링은 이런 횡단 관심사를 분리하여 제작하는 것이 가능하고, AOP(Aspect Oriented Programming)는 이런 횡단 관심사를
모듈로 분리하는 프로그래밍의 패러다임이다.

AOP 를 AspectJ 의 문법으로 작성하며 이를 통해 반복적인 코드 제거, 관심사를 적용할 때 코드의 수정을 최소화, 관심사 유지 보수가 수월하게
구성할 수 있다.

    - 트랜잭션 지원

데이터베이스에 여러 작업이 이루어지는 경우의 트랜잭션 처리이다.
스프링은 트랜잭션의 관리를 어노테이션이나 XML 로 설정할 수 있어 매번 상황에 맞는 코드를 작성할 필요가 없어졌다.


            2.2 의존성 주입 테스트

의존성 기능을 테스트 하기 위해 레스토랑(Restaurant) 객체와 레스토랑에 일하는 셰프(Chef) 객체를 주입하는 예제를 작성한다.

스프링에선 생성자를 이용한 주입 setter 메소드를 이용하여 의존성 주입을 구현한다.
설정 방식은 주로 XML 이나 어노테이션을 이용하여 처리한다. 예제는 Lombok 을 이용하여 setter 메소드를 자동 구현하고 동작을 테스트하므로
pom.xml 에서 Lombok 라이브러리와 spring-test 라이브러리를 추가한다.


    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-test</artifactId>
        <version>${org.springframework-version}</version>
    </dependency>
    <!-- Lombok Library -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.16</version>
    </dependency>


기존의 Log4j 라이브러리는 1.2.15로 설정되어 있는데 1.2.17로 수정한다.(Lombok 활용 시 문제가 생길 수 있어 주의 필요)


        2.2.1 예제 클래스

sample 패키지에 Restaurant 와 Chef 클래스를 생성한다.
최소한의 코드만으로 의존성 주입을 테스트를 할 것이다. Chef 클래스를 다음과 같이 생성한다.


    import lombok.Data;
    import org.springframework.stereotype.Component;

    @Component
    @Data
    public class Chef {
    }


Restaurant 클래스는 Chef 를 주입받도록 설계한다. 이때 Lombok 의 setter 생성하는 기능과 생성자,
toString() 등을 자동으로 생성하도록 @Data 어노테이션을 이용한다.


    import lombok.Data;
    import lombok.Setter;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    @Component
    @Data
    public class Restaurant {

        @Setter(onMethod_ = @Autowired)
        private Chef chef;
    }


위 코드는 Restaurant 객체는 Chef 타입의 객체를 필요하다는 상황이다.
@Component 는 스프링에게 해당 클래스가 스프링에서 관리해야 하는 대상임을 표시하는 어노테이션이고,
@Setter 는 자동으로 setChef() 를 컴파일 시 생성한다.

@Setter 에서 사용된 onMethod 속성은 생성되는 setChef() 에 @Autowired 어노테이션을 추가하도록 한다.


        2.2.2 XML 을 이용한 의존성 주입 설정정

프로젝트 내의 src 폴더 내에 'root-context.xml' 은 스프링 프레임워크에서 관리해야 하는 객체(빈)을 설정하는 파일이다.
root-context.xml 에 아래의 코드를 추가한다.


    <context:component-scan base-package="sample" />


변경된 XML 을 저장하고 Spring Bean(이클립스는 Bean Graph) 탭을 선택해 보면 Restaurant 와 Chef 객체가 설정된 것을 확인할 수 있다.


    Java 설정을 이용하는 의존성 주입

Java 설정을 이용하는 경우 'root-context.xml' 대신 RootConfig 클래스를 이용한다.
XML 로 설정된 내용은 RootConfig 에서 @ComponentScan 어노테이션을 이용해서 처리할 수 있다.


    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    @ComponentScan(basePackages = {"sample"})
    public class RootConfig {
    }


            2.3 스프링 동작

Restaurant, Chef 클래스와 'root-context.xml' 이 어떻게 동작하는지 알아보자.


    Spring 컨텍스트                             Spring 컨텍스트         Spring 컨텍스트

                    →   root-context.xml    →   Restaurant, Chef    →   Restaurant ↔ Chef


    - 스프링 프레임워크 시작 시 컨텍스트라는 메모리 영역을 만들고, ApplicationContext 라는 객체를 만든다.

    - 객체를 생성하고 관리해야 하는 객체들에 대한 설정을 root-context.xml 를 통해 한다.

    - root-context.xml 에 설정되어 있는 <context:component-scan> 태그의 내용을 통해 'sample' 패키지를 스캔

    - 스프링이 사용하는 @Component 어노테이션이 존재하는 클래스의 인스턴스 생성

    - Restaurant 객체는 Chef 객체가 필요하다는 @Autowired 어노테이션이 설정되어 Chef 객체를 Restaurant 객체에 주입

위 내용을 테스트하기 위해서 main 메소드를 만드는 방식도 있었지만 더 간편하게 테스트하는 방법이 있음


        2.3.1 테스트 코드를 통한 확인

프로젝트 내 'src/test/java/sample' 폴더 내에 SampleTests 클래스 추가


    import static org.junit.Assert.assertNotNull;

    import lombok.Setter;
    import lombok.extern.log4j.Log4j;
    import org.junit.Test;
    import org.junit.runner.RunWith;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.test.context.ContextConfiguration;
    import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    @Log4j
    public class SampleTests {

        @Setter(onMethod_ = @Autowired)
        private Restaurant restaurant;

        @Test
        public void testExist() {
            assertNotNull(restaurant);

            log.info(restaurant);
            log.info("-----------------------");
            log.info(restaurant.getChef());
        }
    }


테스트 코드는 현재 테스트 코드가 스프링을 실행하는 역할을 할 것이라는 것을 @RunWith 어노테이션으로 표시함

다음으로 중요한 설정은 @ContextConfiguration 어노테이션과 속성값인 문자열이다.
지정된 클래스나 문자열로 객체들을 스프링 내 객체에 등록한다.
'classpath:' 나 'file:' 을 이용하여 root-context.xml 경로를 지정할 수 있다.

@Log4j 는 Lombok 을 이용해서 로그를 기록하는 Logger 를 변수로 생성함.
별도의 Logger 선언 없이 Log4j 라이브러리와 설정이 존재하면 바로 사용 가능함.
Spring Legacy Project 로 생성하는 경우 기본 Log4j 와 해당 설정이 완료된 상태라 별도로 만들 필요가 없음.
'src/main/resources' 와 'src/test/resources' 에 별도로 존재

@Autowired 는 해당 인스턴스 변수가 스프링으로부터 자동으로 주입해 달라는 표시이다.
위와 같은 경우는 스프링이 정상 주입이 가능하면 obj 변수에 Restaurant 타입의 객체를 주입하게 됨.

testExist() 에 선언된 @Test 는 JUnit 에서 테스트 대상을 표시하는 어노테이션.
해당 메소드를 선택하고 JUnit Test 기능을 실행함

assertNotNull() 은 restaurant 변수가 null 이 아니어야만 테스트를 성공한다는 의미이다.

테스트 작업은 프로젝트 초기에 설정해 두고 사용하는 습관이 중요

코드의 실행 결과를 보면 객체가 생성된 것을 확인할 수 있음


    INFO : sample.SampleTests - Restaurant(chef=Chef())
    INFO : sample.SampleTests - -----------------------
    INFO : sample.SampleTests - Chef()


실행 결과에 주목해야 하는 점은 다음과 같다.


    - new Restaurant() 으로 객체를 만들지 않았는데 만들어 졌다는 점
        -> 스프링은 객체를 생성하고 관리하는 일종의 '컨테이너' 나 '팩토리' 의 기능이 존재

    - Restaurant 클래스의 @Data 어노테이션으로 여러 메소드가 만들어진 점
        -> Lombok 은 자동으로 getter/setter 등을 만들어 주고 스프링은 생성자 주입 또는 setter 주입으로 동작.

    - Restaurant 객체의 Chef 인스턴스(멤버) 변수에 Chef 타입의 객체가 주입된 점
        -> 스프링은 @Autowired 와 같은 어노테이션으로 자동으로 관리됨


    Java 를 이용하는 경우의 테스트 설정

테스트에 사용할 @ContextConfiguration 어노테이션은 XML 뿐 아닌 Java 설정을 이용할 수도 있다.


    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration(classes = {RootConfig.class})
    @Log4j
    public class SampleTests {
    }


        2.3.2 코드에 사용된 어노테이션

Lombok - @Setter, @Data, @Log4j

Spring 관련 - @Autowired, @Component

테스트 관련 - @RunWith, @ContextConfiguration, @Test


    Lombok 관련

컴파일 시 코드를 작성하는 기능들을 완성해 주는 라이브러리이다.
@Setter 는 setter 메소드를 완성해 주는 역할을 한다. 이에 3 가지 속성을 부여해 줄 수 있다.


    - value     접근 제한 속성을 의미.
                기본값은 lombokAccessLevel.PUBLIC

    - onMethod  setter 메소드의 생성 시 메소드에 추가할 어노테이션 지정
                예제는 @Autowired 어노테이션으로 지정
                코드는 특이하게 '_' 표기가 사용되는데 JDK 버전에 따라 차이가 있음

                up to JDK:7
                @Setter(onMethod=@_({@AnnotationGoHere}))

                up to JDK:8
                @Setter(onMethod_={@AnnotationGoHere})

    - onParam   setter 메소드의 파라미터에 어노테이션을 사용하는 경우 적용


@Data 는 Lombok 에서 자주 사용되는 어노테이션으로 @ToString, @EqualsAndHashCode, @Getter/Setter, @RequiredArgsConstructor
모두 결합하여 한 번에 모든 메소드를 생성할 수 있는 장점이 있어 세부적인 설정이 필요 없을 시 주로 이용.

@Log4j 어노테이션은 로그 객체를 생성하게 됨. Log4j 가 존재하지 않을 경우 @Log 를 이용할 수도 있음.
작성된 코드는 실제로 컴파일된 결과는 다음과 같다.


    @Log
    public class LogExample {
        private static final java.util.logging.Logger log =
            java.util.logging.getLogger(LogExample.class.getName());
    }


@Log 를 클래스 쪽에 붙여주면 내부적으로 static final 로 Logger 객체가 생성되어 별도 설정할 필요 없이 필요한 코드 만들 수 있음.
'Spring Legacy Project' 로 생성한 경우엔 기본적으로 Log4j 설정이 있어 @Log4j 만으로 로그 객체를 준비할 수 있다.


    Spring 관련

@Component 는 해당 클래스가 스프링 객체에서 만들어서 관리하는 대상임을 명시하는 어노테이션
@Component 가 있는 클래스를 스프링이 읽도록 @ComponentScan 을 통해 지정할 수 있다.

@Autowired 는 스프링 내부에서 해당 타입의 빈을 주입해주라는 표시이다.
예제에선 Restaurant 객체는 Chef 타입의 객체가 필요하다는 것을 명시.
스프링은 @Autowired 어노테이션을 보고 스프링 내부에 관련된 객체가 있는지 확인하고 자동으로 주입해 준다.
당연하지만 필요한 객체가 존재하지 않으면 에러가 발생한다.


    테스트 관련 어노테이션

@ContextConfiguration 은 스프링 실행 시 어떤 설정 정보를 읽어야 하는지 명시한다.
속성으로 locations 으로 XML 설정 파일을 명시하거나 classes 속성으로 @Configuration 적용된 클래스를 지정해 줄 수도 있다.

@RunWith 테스트 시 필요한 클래스를 지정한다. 스프링은 SpringJUnit4ClassRunner 클래스가 대상이 된다.

@Test 는 junit 에서 해당 메소드가 jUnit 상에서 단위 테스트의 대상인지 알려준다.


            2.4 스프링 4.3 이후 단일 생성자의 묵시적 자동 주입

스프링 의존성 주입은 크게 생성자 주입, Setter 주입을 사용한다. Lombok 을 사용하고 @Autowired 와 같은 어노테이션으로
주입을 한다. 이렇게 생성자 주입과 별개로 스프링 4.3 이후에는 묵시적으로 생성자 주입이 가능하다.

예로 Chef 라는 존재는 호텔에서도 필요할 시 다음과 같은 코드가 구성된다.(실습으로는 진행하지 않음)


    import org.springframework.stereotype.Component;

    import lombok.Getter;
    import lombok.ToString;

    @Component
    @ToString
    @Getter
    public SampleHotel {
        private Chef chef;

        public SampleHotel(Chef chef) {
            this.chef = chef;
        }
    }


코드를 보면 기존과 달리 생성자를 선언하고 Chef 를 주입하도록 작성됐다. 다른 점은 @Autowired 어노테이션 없이 처리되었다.
SampleHotel 에 대한 테스트 코드는 다음과 같이 만들어 볼 수 있다.


    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    @Log4j
    public class HotelTests {
        @Setter(onMethod_ = {@Autowired})
        private SampleHotel hotel;

        @Test
        public void testExist() {
            assertNotNull(hotel);

            log.info(hotel);
            log.info("----------------------");
            log.info(hotel.getChef());
        }
    }


테스트를 진행하면 기존 내용과 거의 같고 테스트 결과는 의존성 주입이 이루어진 것을 볼 수 있다.

생성자의 자동 주입과 Lombok 을 결합하면 SampleHotel 은 아래와 같이 변경할 수 있다.


    @Component
    @ToString
    @Getter
    @AllArgusConstructor
    public class SampleHotel {
        private Chef chef;
    }


@AllArgusConstructor 인스턴스 변수로 선언된 모든 파라미터로 받는 생성자를 작성하게 된다.

만일 여러 개의 인스턴스 변수들 중 특정 변수에 대해서만 생성자를 작성하고 싶다면 @NonNull 과 @RequiredArgsConstructor
어노테이션을 이용할 수 있다.


    @Component
    @ToString
    @Getter
    @RequiredArgsConstructor
    public class SampleHotel {
        @NonNull
        private Chef chef;
    }


@RequiredArgsConstructor 는 @NonNull 이나 final 이 붙은 인스턴스 변수에 대해 생성자를 만들어 낸다.