            1.4 Lombok 라이브러리 설치

Lombok 이용 시 Java 개발 시 자주 사용하는 getter/setter, toString(), 생성자 등을 자동으로 생성해주는 유용한 라이브러리


            1.5 Java Configuration 하는 경우

'Spring Legacy Project' 는 XML 기반 스프링 설정을 하도록 하며, 스프링 3버전 이후 Java 클래스을 이용한 설정 지원
기본적으로 생성되는 web.xml 등 루트 파일들을 자바로 설정하고 싶을 시에 pom.xml 하단 <plugin> 내에 아래와 같이 설정하면 된다.


    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
            <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
    </plugin>


        1.5.2 @Configuration

XML 대신 Java 클래스로 설정을 이용하는 경우, 스프링은 @Configuration 어노테이션을 이용해서 해당 클래스의 인스턴스를 이용하여
설정 파일을 대신함.

프로젝트 내에 'main/java/config' 에서 RootConfig 클래스를 생성한다.


    import org.springframework.context.annotation.Configuration;

    @Configuration
    public class RootConfig {
    }


        1.5.3 web.xml 대신하는 클래스 작성

기존엔 web.xml 을 이용하여 스프링을 구동했지만, XML 을 사용하지 않을 경우 이 역할을 대신하는 클래스를 작성해서 처리한다.

프로젝트 내에 'main/java/config' 에 WebConfig.java 클래스를 생성한다.
생성된 클래스는 AbstractAnnotationConfigDispatcherServletInitializer 라는 긴 이름의 추상 클래스를 상속하도록 작성한다.


    import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

    public class WebConfig extends AbstractAnnotationConfigDispatcherServletInitializer {
        @Override
        protected Class<?>[] getRootConfigClasses() {
            return null;
        }

        @Override
        protected Class<?>[] getServletConfigClasses() {
            return null;
        }

        @Override
        protected String[] getServletMappings() {
            return null;
        }
    }

작성된 WebConfig 클래스는 3개의 추상 메소드를 오버라이드 하도록 작성
이때 getRootConfig() 클래스는 'root-context.xml' 을 대신하는 클래스를 지정
예제에서의 RootConfig 클래스를 사용하기 위해 아래와 같이 메소드를 변경한다.


    @Override
    protected Class<?>[] getRootConfigClasses() {
        return new Class[] {RootConfig.class};
    }


톰캣을 실행하여 스프링 관련 로그가 기록된 것을 확인 가능