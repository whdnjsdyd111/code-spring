스프링 시큐리티는 Java 설정으로도 이용할 수 있다.
다른 예제와 달리 개념이나 용어가 많이 나와서 XML 쪽을 미리 학습한 후 Java 설정을 공부하는 것이 좋다.


            36.1 Java 설정 추가 및 동작 확인

XML 이용 대신 WebConfig 클래스를 이용할 시 getServletFilters() 를 이용하여 직접 스프링 시큐리티 관련 필터를 추가하거나
AbstractSecurityWebApplicationInitializer 란 클래스를 상속하는 클래스를 추가한다.

AbstractSecurityWebApplicationInitializer 클래스는 내부적으로 DelegatingFilterProxy 를 스프링에 등록하는데
이 작접은 별도 구현 없이 클래스를 추가하는 것만으로 설정이 완료된다.
'src/main/java/config' 패키지에 SecurityInitializer 클래스를 추가한다.


    import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;

    public class SecurityInitializer extends AbstractSecurityWebApplicationInitializer {
    }


security-context.xml 을 대신하는 설정은 SecurityConfig 클래스를 추가한다.

SecurityConfig 클래스는 org.springframework.security.config.annotation.web.configuration.
WebSecurityConfigurationAdapter 란 클래스를 상속하여 필요한 기능을 오버라이드한다.


    @Configuration
    @EnableWebSecurity
    @Log
    public class SecurityConfig extends WebSecurityConfigurerAdapter {
    }


클래 선언부의 @EnabledWebSecurity 는 스프링 MVC 와 스프링 시큐리티를 결합하는 용도로 사용된다.
SecurityConfig 클래스엔 configure() 메소드를 오버라이드해서 security-context.xml 에서 사용한
<security:http> 관련 설정들을 대신한다.

configure() 는 파라미터로 WebSecurity 와 HttpSecurity 를 받는 메소드가 있으니 주의하여 오버라이드 한다.


    @Override
    protected void configure(HttpSecurity http) throws Exception {

    }


HttpSecurity 를 이용한 부분은 XML 내용 대신한다. 예제를 처음 설정했을 때 최초 설정은 아래와 같다.


    <security:http>
        <security:intercept-url pattern="/sample3/all" access="permitAll" />

        <security:intercept-url pattern="/sample3/member" access="hasRole('ROLE_MEMBER')" />

        <security:intercept-url pattern="/sample3/admin" access="hasRole('ROLE_ADMIN')" />


이를 SecurityConfig 클래스로 변경하면 아래와 같다.


    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/sample3/all").permitAll()
                .antMatchers("/sample3/admin").access("hasRole('ROLE_ADMIN')")
                .antMatchers("/sample3/member").access("hasRole('ROLE_MEMBER')");
    }


스프링 시큐리티를 동작시키기 위한 추가설정이 필요한데 최소한의 설정만 지정한 상태에서 프로젝트를 실행하여
동작이 이루어지는지 확인한다. 프로젝트를 Tomcat 으로 실행하면 에러 메시지를 확인할 수 있다.


        36.1.1 WebConfig 클래스 변경

스프링 시큐리티의 설정이 정상 동작을 위해 WebConfig 클래스를 아래와 같이 수정한다.


    @Override
    protected Class<?>[] getRootConfigClasses() {
        return new Class[] {RootConfig.class, SecurityConfig.class};
    }


스프링 로딩 시 SecurityConfig 클래스가 같이 로딩되도록 수정한 후 프로젝트를 실행해 정상 로딩되는지 확인한다.
WebConfig 클래스를 수정하여 프로젝트 로딩되어도 실제 동작엔 PasswordEncoder 라든가 인증 매니저 설정이 없어
정상 실행되지 않는다.


            36.2 로그인 페이지 관련 설정

'/sample3/admin' 처리 담당하는 컨트롤러와 jsp 가 정상 존재하면 위 처럼 'Access Denied' 메시지가 출력되는 것을 볼 수 있는데
이런 경우 로그인 페이지로 이동하고 로그인을 할 수 있는 설정을 추가한다.


    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/sample3/all").permitAll()
                .antMatchers("/sample3/admin").access("hasRole('ROLE_ADMIN')")
                .antMatchers("/sample3/member").access("hasRole('ROLE_MEMBER')");

        http.formLogin().loginPage("/customLogin").loginProcessingUrl("/login");
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        log.info("configure.....");

        auth.inMemoryAuthentication().withUser("admin").password("{noop}admin").roles("ADMIN");
        auth.inMemoryAuthentication().withUser("member").password("{noop}member").roles("MEMBER");
    }


동일한 내용을 XML 을 이용한 경우와 비교하면 유사한 것을 확인할 수 있다.
XML 과 가장 큰 차이는 XML 의 경우 기본으로 POST 방식을 처리하는 경로가 '/login' 으로 지정되지만,
Java 설정을 이용한 경우 loginPage() 에 해당하는 경로를 기본으로 사용한다는 점이다.
예제는 XML 과 동일하게 동작하는 것을 목표로 하기 때문에 loginProcessingUrl() 을 이용하여 '/login' 을 지정해줬다.


        36.2.1 로그인 성공 처리

앞 예제에서 로그인 성공 처리는 @Bean 으로 처리할 수 있다.

앞서 만든 CustomLoginSuccessHandler 를 Java 설정을 이용하여 추가하면 다음과 같이 된다.


    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/sample3/all").permitAll()
                .antMatchers("/sample3/admin").access("hasRole('ROLE_ADMIN')")
                .antMatchers("/sample3/member").access("hasRole('ROLE_MEMBER')");

        http.formLogin().loginPage("/customLogin").loginProcessingUrl("/login")
                .successHandler(loginSuccessHandler());
    }

    @Bean
    public AuthenticationSuccessHandler loginSuccessHandler() {
        return new CustomLoginSuccessHandler();
    }


        36.2.2 로그인 실습 시 주의점

XML 설정의 경우 스프링 시큐리티의 UserDetailsService 를 커스터마이징 하는 단계까지 진행됐지만,
Java 설정은 아직 그 단계가 아니므로 '/sample3/admin' 과 같이 다양한 정보를 볼 수 있는 상태가 아니니
제대로 작동하는지에 대한 확인은 별도의 추가적인 설정이 없는 '/sample3/member' 를 이용한다.

프로젝트 실행하고 '/sample3/member' 를 호출해 로그인 페이지로 이동하고,
'member/member' 로 로그인해서 정상 로그인되면 '/sample3/member' 로 이동하는지 확인한다.


            36.3 로그아웃 처리

로그아웃 처리는 GET 방식으로 처리되는 로그아웃 페이지를 볼 수 있는 기능과 실제 로그아웃 처리,
자동 로그인에서 사용하는 로그인 사용된 쿠키들의 삭제를 목적으로 한다.

SecurityConfig 에선 동일한 기능을 아래와 같이 작성한다.


    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/sample3/all").permitAll()
                .antMatchers("/sample3/admin").access("hasRole('ROLE_ADMIN')")
                .antMatchers("/sample3/member").access("hasRole('ROLE_MEMBER')");

        http.formLogin().loginPage("/customLogin").loginProcessingUrl("/login")
                .successHandler(loginSuccessHandler());

        http.logout().logoutUrl("/customLogout").invalidateHttpSession(true)
                .deleteCookies("remember-me", "JSESSION_ID");
    }


로그아웃 처리 과정을 확인하는 방법은 로그인 후 생성된 쿠키 값을 확인하고, 로그아웃 이후에
기존의 쿠키값이 삭제되고 다른 값을 변경되었는지 확인한다.


            36.4 PasswordEncoder 지정

JDBC 나 복잡한 구성을 사용하기 위해 PasswordEncoder 를 미리 준비하는 것이 좋다.
사실 암호화를 하지 않는 CustomNoOpPasswordEncoder 를 작성해 본적이 있으므로 이를 @Bean 을 이용하여
지정하거나 BcryptPasswordEncoder 등을 지정한다


    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }


PasswordEncoder 를 이용하기 위해 인코딩된 패스워드가 필요하니 'member/member' 로 로그인을 시도해보자.

만일 정상적으로 로그인되는 상황을 테스트하고 싶다면 해당 패스워드를 PasswordEncoder 를 이용하여 인코딩해야 한다.
'src/test/java' 에 PasswordEncoder 를 이용하는 테스트 클래스를 아래와 같이 작성한다.


    @RunWith(SpringJUnit4ClassRunner.class)
    @ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml",
            "file:src/main/webapp/WEB-INF/spring/security-context.xml"})
    // @ContextConfiguration(classes = {RootConfig.class})
    @Log4j
    public class PasswordEncoderTests {
        @Setter(onMethod_ = @Autowired)
        private PasswordEncoder pwEncoder;

        @Test
        public void testEncode() {
            String str = "member";

            String enStr = pwEncoder.encode(str);

            // 패스워드 인코딩 결과는 매번 달라질 수 있다.
            log.info(enStr);
        }
    }


'member' 라는 문자열을 인코딩한 결과는 매번 달라지지만 스프링 시큐리티에서 올바르게 인코딩된 것인지를 확인하기 때문에
SecurityConfig 클래스에 테스트 결과를 다음과 같이 반영하여 로그인이 가능한지 확인한다.


    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        log.info("configure.....");

        auth.inMemoryAuthentication().withUser("admin").password("{noop}admin").roles("ADMIN");
        auth.inMemoryAuthentication().withUser("member").password("{noop}member").roles("MEMBER");

        auth.inMemoryAuthentication().withUser("member").password("비크립트암호화").roles("MEMBER");
    }


            36.5 JDBC 를 이용한 Java 설정

스프링 시큐리티의 인증은 크게 username 으로 사용자 정보를 얻어오는 작업과 적당한 권한 등을 체크하는 과정으로 처리한다.
이미 'tbl_member' 테이블과 'tbl_member_auth' 테이블을 새성하였으니 이를 이용하여 JDBC 설정을 한다면
기존 메소드를 다음과 같이 변경한다.


    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        log.info("configure.....");

        String queryUser = "SELECT userid, userpw, enabled, FROM tbl_member WHERE userid = ?";
        String queryDetails = "SELECT userid, auth FROM tbl_member_auth WHERE userid = ?";

        auth.jdbcAuthentication()
                .dataSource(dataSource)
                .passwordEncoder(passwordEncoder())
                .usersByUsernameQuery(queryUser)
                .authoritiesByUsernameQuery(queryDetails);
    }


인증 과정에 패스워드 벙조는 BCryptPasswordEncoder 를 이용하니 이를 지정해주고, 필요한 쿼리를 지정한다.
테스트 전 데이터베이스엔 테스트에 적당한 정보들이 존재하는지 확인한다.


            36.6 커스텀 UserDetailsService 설정

설정 이전 MyBatis 나 MyBatis 가 사용하는 Mapper 파일, domain 패키지의 내용을 추가하여
프로젝트 실행에 문제가 발생하지 않는지 먼저 확인한다.

'src/main/resources' 밑에 MemberMapper.xml 파일이 존재하도록 준비한다.
security 패키지에 CustomUserDetailsService 를 추가해 두고, domain 패키지엔 CustomUser 를 추가한다.


    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(customUserService())
                .passwordEncoder(passwordEncoder());
    }

    @Bean
    public UserDetailsService customUserService() {
        return new CustomUserDetailsService();
    }


최종 확인은 '/sample3/admin' 경로에 로그인한 사용자만 정상 접근하여 가능하다.


            36.7 자동 로그인 설정(remember-me)

자동 로그인 역시 XML 과 유사하지만, DateSource 를 직접 추가하던 방식이 아니라 PersistentTokenRepository
란 타입을 이용하여 약간의 추가 설정이 필요하다.


    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/sample3/all").permitAll()
                .antMatchers("/sample3/admin").access("hasRole('ROLE_ADMIN')")
                .antMatchers("/sample3/member").access("hasRole('ROLE_MEMBER')");

        http.formLogin().loginPage("/customLogin").loginProcessingUrl("/login")
                .successHandler(loginSuccessHandler());

        http.logout().logoutUrl("/customLogout").invalidateHttpSession(true)
                .deleteCookies("remember-me", "JSESSION_ID");

        http.rememberMe()
                .key("zerock")
                .tokenRepository(persistentTokenRepository())
                .tokenValiditySeconds(604800);
    }

    @Bean
    public PersistentTokenRepository persistentTokenRepository() {
        JdbcTokenRepositoryImpl repo = new JdbcTokenRepositoryImpl();
        repo.setDataSource(dataSource);
        return repo;
    }


확인은 로그인 후 데이터베이스에 있는 persistent_login 테이블에 정상 추가되는지 확인한다.
단계별로 설정을 진행하니 복잡하지만 코드가 많은 양은 아니다.