매번 필요한 URL 에 따라 설정을 변경하는 일은 번거롭다.
스프링 시큐리티 역시 다른 기능들처럼 어노테이션을 이용하여 필요한 설정을 추가할 수 있따.
사용된 어노테이션은 주로 @Secured 와 @PreAuthorize, @PostAuthorize 이다.


    - @Secured : 스프링 시큐리티 초기부터 사용됐고, () 안에 'ROLE_ADMIN' 같은 문자열 혹운 배열을 이용한다.
    - @PreAuthorize, @PostAuthorize : 3 버전부터 지원되며, () 안에 표현식을 사용할 수 있으니 최근에 더 많이 사용된다.


예제를 위해 XML 을 이용한 예제에 SampleController 에 간단한 메소드와 설정을 추가한다.


    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
    @GetMapping("/annoMember")
    public void doMember2() {
        log.info("logined annotation member");
    }

    @Secured({"ROLE_ADMIN"})
    @GetMapping("/annoAdmin")
    public void doAdmin2() {
        log.info("admin annotation only");
    }


doMember2() 엔 @PreAuthorize 를 이용한 표현식으로 'hasAnyRole' 을 사용해 체크하고,
doAdmin2() 는 @Secured 를 이용하여 처리한다.
@Secured 엔 단순히 값(value)만을 추가할 수 있으므로 여러 개를 사용할 때는 배열로 표현한다.
주의할 사항은 컨트롤러에 사용하는 스프링 시큐리티의 어노테이션을 활성화하기 위해선
security-context.xml 가 아닌 스프링 MVC 의 servlet-context.xml 에 관련 설정이 추가되는 점이다.

우선 servlet-context.xml 에 security 네임스페이스를 추가한다.

XML 에 스프링 시큐리티의 네임스페이스가 추가될 때 5.0 버전으로 추가된 것을 4.2 버전으로 낮추거나
버전 정보를 지워야 에러없이 작동된다.


	<security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled" />


추가된 security 네임스페이스를 이용하여 global-method-security 를 지정한다.
어노테이션은 기본으로 'disabled' 되어 있으니 'enabled' 로 설정한다.
Java 설정을 이용할 때엔 servlet-context.xml 에 상응하는 ServletConfig.java 클래스에 어노테이션을 추가해서 사용한다.



    @EnableWebMvc
    @ComponentScan(basePackages = {"controller", "exception"})
    @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)