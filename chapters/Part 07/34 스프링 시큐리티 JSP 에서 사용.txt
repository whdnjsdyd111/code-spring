JDBC 와 약간의 쿼리로 데이터베이스로 스프링 시큐리티를 이용할 수 있지만, 굳이 CustomUserDetailsService 를 별도로 인증/권한
체크를 하는 큰 이유는 JSP 에선 단순히 사용자 아이디(스프링 시큐리티 username) 정도가 아닌
사용자의 이름이나 이메일 같은 추가적인 정보를 이용하기 위함이다.


            34.1 JSP 에서 로그인한 사용자 정보 보여주기

'/sample3/admin' 과 같은 경로는 로그인한 사용자만 접근할 수 있고, 권한이 적당하지 않으면 볼 수 없는 페이지이니
로그인한 사용자가 접근했을 때 해당 사용자의 여러 정보를 보여줄 필요가 있다.

스프링 시큐리티와 관련된 정보를 출력하거나 사용하려면 JSP 상단에 스프링 시큐리티 관련 태그 라이브러리의
사용을 선언하고, <sec:authentication> 태그와 principal 이란 이름의 사용한다.


    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <title>Title</title>
    </head>
    <body>
    <h1>/sample3/admin page</h1>

    <p>principal : <sec:authentication property="principal" /></p>
    <p>MemberVO : <sec:authentication property="principal.member" /></p>
    <p>사용자이름 : <sec:authentication property="principal.member.userName" /></p>
    <p>사용자아이디 : <sec:authentication property="principal.member.userid" /></p>
    <p>사용자 권한 리스트 : <sec:authentication property="principal.member.authList" /></p>

    <a href="/customLogout">Logout</a>
    </body>
    </html>


<sec:authentication property="principal" /> 를 이용할 때 의미는 UserDetailsService 에서 반환된 객체이다.
즉 CustomUserDetailsService 를 이용했으면 loadUserByUsername() 에서 반환된 CustomUser 객체가 된다.
이 사실을 이해하면 'principal' 이 CustomUser 를 의미하므로 'principal.member' 는 CustomUser 객체의
getMember() 를 호출한다는 것을 알 수 있다.


            34.2 표현식을 이용하는 동적 화면 구성

경우에 다라 특정 페이지에 로그인한 사용자의 경우 특정 내용을 보여주고, 그렇지 않으면 다른 내용을 보여주는 경우가 있다.
예제는 '/sample3/all' 이 이런 경우에 해당하는데 유용한 것이 스프링 시큐리티 표현식이다.
스프링 시큐리티의 표현식은 security-context.xml 에서도 사용됨.

스프링 시큐리티에서 주로 사용되는 표현식은 아래와 같다.


    표현식                             설명

    hasRole([role])                 해당 권한 있으면 true
    hasAuthority([authority])

    hasAnyRole([role])              여러 권한 중 하나라도 해당하는 권한이 있으면 true
    hasAnyAuthority([authority])

    principal                       현재 사용자 정보 의미

    permitAll                       모든 사용자에게 허용

    denyAll                         모든 사용자에게 거부

    isAnonymous()                   익명 사용자의 경우(로그인하지 않은 경우도 해당)

    isAuthenticated()               인증된 사용자면 true

    isFullyAuthenticated()          Remember-me 로 인증된 것이 아닌 인증된 사용자인 경우 true


표현식은 거의 대부분 true/false 를 리턴하기 때문에 조건문을 사용하는 것처럼 사용된다.
'/sample3/all' 의 JSP 페이지를 이용하여 사용자 로그인 상태에 따라 다른 화면을 구성한다.


    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <title>Title</title>
    </head>
    <body>
    <h1>/sample3/all page</h1>

    <sec:authorize access="isAnonymous()">
        <a href="/customLogin">로그인</a>
    </sec:authorize>
    <sec:authorize access="isAuthenticated()">
        <a href="/customLogin">로그아웃</a>
    </sec:authorize>
    </body>
    </html>


all.jsp 내용은 로그인 한 경우와 그렇지 않은 경우에 따라 다른 결과가 나타난다.