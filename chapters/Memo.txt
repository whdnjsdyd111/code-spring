해당 책에서는 XML, Java 설정. 두 가지 설정을 함께 병행하기 위해서 한 쪽을 모두 삭제하여 실행해 보면서 진행


                - Lombok 라이브러리 -

Lombok 이용 시 Java 개발 시 자주 사용하는 getter/setter, toString(), 생성자 등을 자동으로 생성해주는 유용한 라이브러리

    @Data - setter 생성하는 기능과 생성자, toString() 등을 자동으로 생성하는 어노테이션

    @Setter - 컴파일 시 자동으로 setter 메소드를 생성해주는 어노테이션

        value       접근 제한 속성을 의미.
                    기본값은 lombokAccessLevel.PUBLIC

        onMethod    setter 메소드의 생성 시 메소드에 추가할 어노테이션 지정
                    예제는 @Autowired 어노테이션으로 지정
                    코드는 특이하게 '_' 표기가 사용되는데 JDK 버전에 따라 차이가 있음

                    up to JDK:7
                    @Setter(onMethod=@_({@AnnotationGoHere}))

                    up to JDK:8
                    @Setter(onMethod_={@AnnotationGoHere})

        onParam     setter 메소드의 파라미터에 어노테이션을 사용하는 경우 적용

    @AllArgsConstructor - 인스턴스 변수로 선언된 모든 파라미터로 받는 생성자를 작성하게되는 어노테이션

    @NonNull 과 @RequiredArgsConstructor - 이 두 어노테이션을 이용하여 특정 변수에 대해서만 생성자를 작성하고 싶을 때 지정
                                            @NonNull 뿐만 아니라 final 로도 지정할 수 있음


                - root-context 설정 관련 어노테이션 -

        @Configuration

XML 대신 Java 클래스로 설정을 이용하는 경우, 스프링은 @Configuration 어노테이션을 이용해서 해당 클래스의 인스턴스를 이용하여
설정 파일을 대신함.

        @Component

스프링에게 해당 클래스가 스프링에서 관리해야 하는 대상임을 표시하는 어노테이션

        @ComponentScan

설정 클래스에서 @Component 로 설정이된 클래스를 스캔하기 위해서 basePackages 또는 basePackageClasses 로 패키지를 지정

예)

    @ComponentScan(basePackageClasses = {Restaurant.class, Chef.class})

    @ComponentScan(basePackages = {"sample"})

        @Bean

XML 설정에서 <bean> 태그와 동일한 역할로 선언된 메소드의 실행 결과로 반환된 객체는 스프링의 객체(Bean)로 등록됨


            AbstractAnnotationConfigDispatcherServletInitializer

web.xml 을 대신하여 Java 클래스로 설정하기 위해서 상속해야 하는 추상 클래스 AbstractAnnotationConfigDispatcherServletInitializer


    추상 메소드

    getRootConfigClasses - 'root-context' 을 대신하는 클래스를 지정

    getServletConfigClasses

    getServletMappings


                - servlet-context.xml 설정 관련 -

        @Controller

해당 클래스를 컨트롤러 빈으로 등록하기 위해 어노테이션으로 지정

        @RequestMapping

요청을 매핑할 URL 을 지정할 수 있다.
get, post 방식의 메소드를 지정할 수도 있다.

예)

    @RequestMapping('/sample/*')

    -> /sample/aaa , /sample/bbb

    @RequestMapping('value = /basic', method = {RequestMethod.GET})

    -> GET /basic

        @GetMapping, @PostMapping

메소드 방식을 축약한 형태

        @RequestParam

위 어노테이션으로 파라미터를 수집할 수 있음

예)

    @RequestParam("name") String name


        @InitBinder

파라미터로 2018-01-01 와 같은 형식의 요청을 Date 객체로 처리할 수 있는 바인딩 어노테이션

    @InitBinder
    public void initBinder(WebDataBinder binder) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        binder.registerCustomEditor(java.util.Date.class, new CustomDateEditor(dateFormat, false));
    }

    ...

    @GetMapping("/ex03")
    public String ex03(TodoDTO todo) {
        log.info("todo: " + todo);
        return "ex03";
    }

    '2018-01-01' 파라미터 요청 시 Date 객체 얻음


        @ModelAttribute

받은 파라미터를 강제로 Model 에 담아 전달하는 어노테이션이다.


                - 테스트 -

            ~ junit ~

스프링에서 빈 객체의 연결들에 관하여 테스트를 할 수 있는 라이브러리

        @RunWith

테스트 코드가 실행하는 역할이라는 것을 표시하는 어노테이션
SpringJUnit4ClassRunner 클래스를 등록해야함

예)

    @RunWith(SpringJUnit4ClassRunner.class)


        @Test

JUnit 에서 테스트 대상을 표시하는 어노테이션


        org.junit.Assert

위 패키지 내의 메소드는 테스트 성공에 대한 조건이 담겨져 있음.

예)

    assertNotNull(restaurant);

    restaurant 변수가 null 이 아니면 테스트 성공


            ~ spring-text ~

        @ContextConfiguration

root-context.xml 파일을 등록하여 설정 파일을 등록한다.
'classpath:' 또는 'file:' 로 root-context.xml 파일 경로를 지정하거나 class 로 Java 클래스를 지정할 수 있다.

예)

    @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
    또는
    @ContextConfiguration(classes = {RootConfig.class})


                - Spring Bean 관련 어노테이션 -

        @Autowired

해당 인스턴스 변수가 스프링으로부터 자동으로 주입해달라는 표시이다.

예)

    @Setter(onMethod_ = @Autowired)
    private Restaurant restaurant;


                - 데이터베이스 -

        ~ HikariCP ~

커넥션 풀과 동일한 역할을 하는 HikariCP(3.4.5 버전은 ojbdc8 버전을 주입해야 함)

        ~ MyBatis ~

    - spring-jdbc/spring-tx : 스프링에서 데이터 베이스 처리와 트랜잭션 처리
    - mybatis/mybatis-spring : MyBatis 와 스프링 연동 라이브러리

SQSessionFactory 은 내부적으로 SQLSession 을 만들어내는 객체이다.
개발에서는 SQLSession 을 통해 Connection 을 생성하거나 SQL 을 전달하고 결과를 받는 구조로 작성한다.

        ~ log4jdbc-log4j2 ~

"?" 으로 치환되어 실행되는 SQL 의 로그를 제대로 확인하기 위해 log4jdbc-log4j2 라이브러리를 사용

